{"version":3,"sources":["../src/QueuedRequestMiddleware.ts"],"sourcesContent":["import type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport { createAsyncMiddleware } from '@metamask/json-rpc-engine';\nimport { serializeError } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcParams, JsonRpcRequest } from '@metamask/utils';\n\nimport type { QueuedRequestController } from './QueuedRequestController';\nimport type { QueuedRequestMiddlewareJsonRpcRequest } from './types';\n\nconst isConfirmationMethod = (method: string) => {\n  const confirmationMethods = [\n    'eth_sendTransaction',\n    'wallet_watchAsset',\n    'wallet_switchEthereumChain',\n    'eth_signTypedData_v4',\n    'wallet_addEthereumChain',\n    'wallet_requestPermissions',\n    'wallet_requestSnaps',\n    'personal_sign',\n    'eth_sign',\n    'eth_requestAccounts',\n  ];\n\n  return confirmationMethods.includes(method);\n};\n\n/**\n * Ensure that the incoming request has the additional required request metadata. This metadata\n * should be attached to the request earlier in the middleware pipeline.\n *\n * @param request - The request to check.\n * @throws Throws an error if any required metadata is missing.\n */\nfunction hasRequiredMetadata(\n  request: Record<string, unknown>,\n): asserts request is QueuedRequestMiddlewareJsonRpcRequest {\n  if (!request.origin) {\n    throw new Error(\"Request object is lacking an 'origin'\");\n  } else if (typeof request.origin !== 'string') {\n    throw new Error(\n      `Request object has an invalid origin of type '${typeof request.origin}'`,\n    );\n  } else if (!request.networkClientId) {\n    throw new Error(\"Request object is lacking a 'networkClientId'\");\n  } else if (typeof request.networkClientId !== 'string') {\n    throw new Error(\n      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`,\n    );\n  }\n}\n\n/**\n * Creates a JSON-RPC middleware for handling queued requests. This middleware\n * intercepts JSON-RPC requests, checks if they require queueing, and manages\n * their execution based on the specified options.\n *\n * @param options - Configuration options.\n * @param options.enqueueRequest - A method for enqueueing a request.\n * @param options.useRequestQueue - A function that determines if the request queue feature is enabled.\n * @returns The JSON-RPC middleware that manages queued requests.\n */\nexport const createQueuedRequestMiddleware = ({\n  enqueueRequest,\n  useRequestQueue,\n}: {\n  enqueueRequest: QueuedRequestController['enqueueRequest'];\n  useRequestQueue: () => boolean;\n}): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  return createAsyncMiddleware(async (req: JsonRpcRequest, res, next) => {\n    hasRequiredMetadata(req);\n\n    // if the request queue feature is turned off, or this method is not a confirmation method\n    // bypass the queue completely\n    if (!useRequestQueue() || !isConfirmationMethod(req.method)) {\n      return await next();\n    }\n\n    try {\n      await enqueueRequest(req, next);\n    } catch (error: unknown) {\n      res.error = serializeError(error);\n    }\n    return undefined;\n  });\n};\n"],"mappings":";AACA,SAAS,6BAA6B;AACtC,SAAS,sBAAsB;AAM/B,IAAM,uBAAuB,CAAC,WAAmB;AAC/C,QAAM,sBAAsB;AAAA,IAC1B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO,oBAAoB,SAAS,MAAM;AAC5C;AASA,SAAS,oBACP,SAC0D;AAC1D,MAAI,CAAC,QAAQ,QAAQ;AACnB,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACzD,WAAW,OAAO,QAAQ,WAAW,UAAU;AAC7C,UAAM,IAAI;AAAA,MACR,iDAAiD,OAAO,QAAQ,MAAM;AAAA,IACxE;AAAA,EACF,WAAW,CAAC,QAAQ,iBAAiB;AACnC,UAAM,IAAI,MAAM,+CAA+C;AAAA,EACjE,WAAW,OAAO,QAAQ,oBAAoB,UAAU;AACtD,UAAM,IAAI;AAAA,MACR,0DAA0D,OAAO,QAAQ,eAAe;AAAA,IAC1F;AAAA,EACF;AACF;AAYO,IAAM,gCAAgC,CAAC;AAAA,EAC5C;AAAA,EACA;AACF,MAG8C;AAC5C,SAAO,sBAAsB,OAAO,KAAqB,KAAK,SAAS;AACrE,wBAAoB,GAAG;AAIvB,QAAI,CAAC,gBAAgB,KAAK,CAAC,qBAAqB,IAAI,MAAM,GAAG;AAC3D,aAAO,MAAM,KAAK;AAAA,IACpB;AAEA,QAAI;AACF,YAAM,eAAe,KAAK,IAAI;AAAA,IAChC,SAAS,OAAgB;AACvB,UAAI,QAAQ,eAAe,KAAK;AAAA,IAClC;AACA,WAAO;AAAA,EACT,CAAC;AACH;","names":[]}