{"version":3,"file":"PreferencesController.js","sourceRoot":"","sources":["../src/PreferencesController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseController,\n  type ControllerStateChangeEvent,\n  type ControllerGetStateAction,\n  type RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { toChecksumHexAddress } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerState,\n  KeyringControllerStateChangeEvent,\n} from '@metamask/keyring-controller';\n\nimport { ETHERSCAN_SUPPORTED_CHAIN_IDS } from './constants';\n\n/**\n * A representation of a MetaMask identity\n */\nexport type Identity = {\n  /**\n   * The address of the identity\n   */\n  address: string;\n  /**\n   * The timestamp for when this identity was first added\n   */\n  importTime?: number;\n  /**\n   * The name of the identity\n   */\n  name: string;\n};\n\n/**\n * A type union of the name for each chain that is supported by Etherscan or\n * an Etherscan-compatible service.\n */\nexport type EtherscanSupportedChains =\n  keyof typeof ETHERSCAN_SUPPORTED_CHAIN_IDS;\n\n/**\n * A type union of the chain ID for each chain that is supported by Etherscan\n * or an Etherscan-compatible service.\n */\nexport type EtherscanSupportedHexChainId =\n  (typeof ETHERSCAN_SUPPORTED_CHAIN_IDS)[EtherscanSupportedChains];\n\n/**\n * Preferences controller state\n */\nexport type PreferencesState = {\n  /**\n   * A map of RPC method names to enabled state (true is enabled, false is disabled)\n   */\n  disabledRpcMethodPreferences: {\n    [methodName: string]: boolean;\n  };\n  /**\n   * Map of specific features to enable or disable\n   */\n  featureFlags: { [feature: string]: boolean };\n  /**\n   * Map of addresses to Identity objects\n   */\n  identities: { [address: string]: Identity };\n  /**\n   * The configured IPFS gateway\n   */\n  ipfsGateway: string;\n  /**\n   * Controls whether IPFS is enabled or not\n   */\n  isIpfsGatewayEnabled: boolean;\n  /**\n   * Controls whether multi-account balances are enabled or not\n   */\n  isMultiAccountBalancesEnabled: boolean;\n  /**\n   * Map of lost addresses to Identity objects\n   */\n  lostIdentities: { [address: string]: Identity };\n  /**\n   * Controls whether the OpenSea API is used\n   */\n  openSeaEnabled: boolean;\n  /**\n   * Controls whether \"security alerts\" are enabled\n   */\n  securityAlertsEnabled: boolean;\n  /**\n   * The current selected address\n   */\n  selectedAddress: string;\n  /**\n   * Controls whether incoming transactions are enabled, per-chain (for Etherscan-supported chains)\n   */\n  showIncomingTransactions: {\n    [chainId in EtherscanSupportedHexChainId]: boolean;\n  };\n  /**\n   * Controls whether test networks are shown in the wallet\n   */\n  showTestNetworks: boolean;\n  /**\n   * Controls whether NFT detection is enabled\n   */\n  useNftDetection: boolean;\n  /**\n   * Controls whether token detection is enabled\n   */\n  useTokenDetection: boolean;\n};\n\nconst metadata = {\n  disabledRpcMethodPreferences: { persist: true, anonymous: true },\n  featureFlags: { persist: true, anonymous: true },\n  identities: { persist: true, anonymous: false },\n  ipfsGateway: { persist: true, anonymous: false },\n  isIpfsGatewayEnabled: { persist: true, anonymous: true },\n  isMultiAccountBalancesEnabled: { persist: true, anonymous: true },\n  lostIdentities: { persist: true, anonymous: false },\n  openSeaEnabled: { persist: true, anonymous: true },\n  securityAlertsEnabled: { persist: true, anonymous: true },\n  selectedAddress: { persist: true, anonymous: false },\n  showTestNetworks: { persist: true, anonymous: true },\n  showIncomingTransactions: { persist: true, anonymous: true },\n  useNftDetection: { persist: true, anonymous: true },\n  useTokenDetection: { persist: true, anonymous: true },\n};\n\nconst name = 'PreferencesController';\n\nexport type PreferencesControllerGetStateAction = ControllerGetStateAction<\n  typeof name,\n  PreferencesState\n>;\n\nexport type PreferencesControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof name,\n  PreferencesState\n>;\n\nexport type PreferencesControllerActions = PreferencesControllerGetStateAction;\n\nexport type PreferencesControllerEvents = PreferencesControllerStateChangeEvent;\n\nexport type AllowedEvents = KeyringControllerStateChangeEvent;\n\nexport type PreferencesControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  PreferencesControllerActions,\n  PreferencesControllerEvents | AllowedEvents,\n  never,\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default PreferencesController state.\n *\n * @returns The default PreferencesController state.\n */\nexport function getDefaultPreferencesState() {\n  return {\n    disabledRpcMethodPreferences: {\n      eth_sign: false,\n    },\n    featureFlags: {},\n    identities: {},\n    ipfsGateway: 'https://ipfs.io/ipfs/',\n    isIpfsGatewayEnabled: true,\n    isMultiAccountBalancesEnabled: true,\n    lostIdentities: {},\n    openSeaEnabled: false,\n    securityAlertsEnabled: false,\n    selectedAddress: '',\n    showIncomingTransactions: {\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MAINNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.GOERLI]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.BSC_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.OPTIMISM_SEPOLIA]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.POLYGON_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.AVALANCHE_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.FANTOM_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.SEPOLIA]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_GOERLI]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.LINEA_MAINNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONBEAM_TESTNET]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.MOONRIVER]: true,\n      [ETHERSCAN_SUPPORTED_CHAIN_IDS.GNOSIS]: true,\n    },\n    showTestNetworks: false,\n    useNftDetection: false,\n    useTokenDetection: true,\n  };\n}\n\n/**\n * Controller that stores shared settings and exposes convenience methods\n */\nexport class PreferencesController extends BaseController<\n  typeof name,\n  PreferencesState,\n  PreferencesControllerMessenger\n> {\n  /**\n   * Creates a PreferencesController instance.\n   *\n   * @param args - Arguments\n   * @param args.messenger - The preferences controller messenger.\n   * @param args.state - Preferences controller state.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: PreferencesControllerMessenger;\n    state?: Partial<PreferencesState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultPreferencesState(),\n        ...state,\n      },\n    });\n\n    messenger.subscribe(\n      'KeyringController:stateChange',\n      (keyringState: KeyringControllerState) => {\n        const accounts = new Set<string>();\n        for (const keyring of keyringState.keyrings) {\n          for (const account of keyring.accounts) {\n            accounts.add(account);\n          }\n        }\n        if (accounts.size > 0) {\n          this.#syncIdentities(Array.from(accounts));\n        }\n      },\n    );\n  }\n\n  /**\n   * Adds identities to state.\n   *\n   * @param addresses - List of addresses to use to generate new identities.\n   */\n  addIdentities(addresses: string[]) {\n    const checksummedAddresses = addresses.map(toChecksumHexAddress);\n    this.update((state) => {\n      const { identities } = state;\n      for (const address of checksummedAddresses) {\n        if (identities[address]) {\n          continue;\n        }\n        const identityCount = Object.keys(identities).length;\n\n        identities[address] = {\n          name: `Account ${identityCount + 1}`,\n          address,\n          importTime: Date.now(),\n        };\n      }\n    });\n  }\n\n  /**\n   * Removes an identity from state.\n   *\n   * @param address - Address of the identity to remove.\n   */\n  removeIdentity(address: string) {\n    address = toChecksumHexAddress(address);\n    const { identities } = this.state;\n    if (!identities[address]) {\n      return;\n    }\n    this.update((state) => {\n      delete state.identities[address];\n      if (address === state.selectedAddress) {\n        state.selectedAddress = Object.keys(state.identities)[0];\n      }\n    });\n  }\n\n  /**\n   * Associates a new label with an identity.\n   *\n   * @param address - Address of the identity to associate.\n   * @param label - New label to assign.\n   */\n  setAccountLabel(address: string, label: string) {\n    address = toChecksumHexAddress(address);\n    this.update((state) => {\n      const identity = state.identities[address] || {};\n      identity.name = label;\n      state.identities[address] = identity;\n    });\n  }\n\n  /**\n   * Enable or disable a specific feature flag.\n   *\n   * @param feature - Feature to toggle.\n   * @param activated - Value to assign.\n   */\n  setFeatureFlag(feature: string, activated: boolean) {\n    this.update((state) => {\n      state.featureFlags[feature] = activated;\n    });\n  }\n\n  /**\n   * Synchronizes the current identity list with new identities.\n   *\n   * @param addresses - List of addresses corresponding to identities to sync.\n   */\n  #syncIdentities(addresses: string[]) {\n    addresses = addresses.map((address: string) =>\n      toChecksumHexAddress(address),\n    );\n\n    this.update((state) => {\n      const { identities } = state;\n      const newlyLost: { [address: string]: Identity } = {};\n\n      for (const [address, identity] of Object.entries(identities)) {\n        if (!addresses.includes(address)) {\n          newlyLost[address] = identity;\n          delete identities[address];\n        }\n      }\n\n      for (const [address, identity] of Object.entries(newlyLost)) {\n        state.lostIdentities[address] = identity;\n      }\n    });\n    this.addIdentities(addresses);\n\n    if (!addresses.includes(this.state.selectedAddress)) {\n      this.update((state) => {\n        state.selectedAddress = addresses[0];\n      });\n    }\n  }\n\n  /**\n   * Sets selected address.\n   *\n   * @param selectedAddress - Ethereum address.\n   */\n  setSelectedAddress(selectedAddress: string) {\n    this.update((state) => {\n      state.selectedAddress = toChecksumHexAddress(selectedAddress);\n    });\n  }\n\n  /**\n   * Sets new IPFS gateway.\n   *\n   * @param ipfsGateway - IPFS gateway string.\n   */\n  setIpfsGateway(ipfsGateway: string) {\n    this.update((state) => {\n      state.ipfsGateway = ipfsGateway;\n    });\n  }\n\n  /**\n   * Toggle the token detection setting.\n   *\n   * @param useTokenDetection - Boolean indicating user preference on token detection.\n   */\n  setUseTokenDetection(useTokenDetection: boolean) {\n    this.update((state) => {\n      state.useTokenDetection = useTokenDetection;\n    });\n  }\n\n  /**\n   * Toggle the NFT detection setting.\n   *\n   * @param useNftDetection - Boolean indicating user preference on NFT detection.\n   */\n  setUseNftDetection(useNftDetection: boolean) {\n    if (useNftDetection && !this.state.openSeaEnabled) {\n      throw new Error(\n        'useNftDetection cannot be enabled if openSeaEnabled is false',\n      );\n    }\n    this.update((state) => {\n      state.useNftDetection = useNftDetection;\n    });\n  }\n\n  /**\n   * Toggle the opensea enabled setting.\n   *\n   * @param openSeaEnabled - Boolean indicating user preference on using OpenSea's API.\n   */\n  setOpenSeaEnabled(openSeaEnabled: boolean) {\n    this.update((state) => {\n      state.openSeaEnabled = openSeaEnabled;\n      if (!openSeaEnabled) {\n        state.useNftDetection = false;\n      }\n    });\n  }\n\n  /**\n   * Toggle the security alert enabled setting.\n   *\n   * @param securityAlertsEnabled - Boolean indicating user preference on using security alerts.\n   */\n  setSecurityAlertsEnabled(securityAlertsEnabled: boolean) {\n    this.update((state) => {\n      state.securityAlertsEnabled = securityAlertsEnabled;\n    });\n  }\n\n  /**\n   * A setter for the user preferences to enable/disable rpc methods.\n   *\n   * @param methodName - The RPC method name to change the setting of.\n   * @param isEnabled - true to enable the rpc method, false to disable it.\n   */\n  setDisabledRpcMethodPreference(methodName: string, isEnabled: boolean) {\n    const { disabledRpcMethodPreferences } = this.state;\n    const newDisabledRpcMethods = {\n      ...disabledRpcMethodPreferences,\n      [methodName]: isEnabled,\n    };\n    this.update((state) => {\n      state.disabledRpcMethodPreferences = newDisabledRpcMethods;\n    });\n  }\n\n  /**\n   * A setter for the user preferences to enable/disable fetch of multiple accounts balance.\n   *\n   * @param isMultiAccountBalancesEnabled - true to enable multiple accounts balance fetch, false to fetch only selectedAddress.\n   */\n  setIsMultiAccountBalancesEnabled(isMultiAccountBalancesEnabled: boolean) {\n    this.update((state) => {\n      state.isMultiAccountBalancesEnabled = isMultiAccountBalancesEnabled;\n    });\n  }\n\n  /**\n   * A setter for the user have the test networks visible/hidden.\n   *\n   * @param showTestNetworks - true to show test networks, false to hidden.\n   */\n  setShowTestNetworks(showTestNetworks: boolean) {\n    this.update((state) => {\n      state.showTestNetworks = showTestNetworks;\n    });\n  }\n\n  /**\n   * A setter for the user allow to be fetched IPFS content\n   *\n   * @param isIpfsGatewayEnabled - true to enable ipfs source\n   */\n  setIsIpfsGatewayEnabled(isIpfsGatewayEnabled: boolean) {\n    this.update((state) => {\n      state.isIpfsGatewayEnabled = isIpfsGatewayEnabled;\n    });\n  }\n\n  /**\n   * A setter for the user allow to be fetched IPFS content\n   *\n   * @param chainId - On hexadecimal format to enable the incoming transaction network\n   * @param isIncomingTransactionNetworkEnable - true to enable incoming transactions\n   */\n  setEnableNetworkIncomingTransactions(\n    chainId: EtherscanSupportedHexChainId,\n    isIncomingTransactionNetworkEnable: boolean,\n  ) {\n    if (Object.values(ETHERSCAN_SUPPORTED_CHAIN_IDS).includes(chainId)) {\n      this.update((state) => {\n        state.showIncomingTransactions = {\n          ...this.state.showIncomingTransactions,\n          [chainId]: isIncomingTransactionNetworkEnable,\n        };\n      });\n    }\n  }\n}\n\nexport default PreferencesController;\n"]}