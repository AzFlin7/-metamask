{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":";;;AACA,2CAA6C;AAE7C,6CAA2E;AAE3E,+CAAsD;AACtD,mCAAqC;AAErC;;GAEG;AACH,IAAY,SAYX;AAZD,WAAY,SAAS;IACnB,0BAA0B;IAC1B,2CAA8B,CAAA;IAC9B,8BAAiB,CAAA;IACjB,oDAAuC,CAAA;IACvC,qDAAwC,CAAA;IACxC,qDAAwC,CAAA;IACxC,qDAAwC,CAAA;IACxC,mBAAmB;IACnB,8DAAiD,CAAA;IACjD,0DAA6C,CAAA;IAC7C,wDAA2C,CAAA;AAC7C,CAAC,EAZW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAYpB;AAED;;GAEG;AACH,IAAY,cAGX;AAHD,WAAY,cAAc;IACxB,oCAAkB,CAAA;IAClB,4CAA0B,CAAA;AAC5B,CAAC,EAHW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAGzB;AAEY,QAAA,oBAAoB,GAAG,IAAA,oBAAM,EAAC;IACzC;;OAEG;IACH,EAAE,EAAE,kBAAU;IAEd;;OAEG;IACH,OAAO,EAAE,IAAA,oBAAM,GAAE;IAEjB;;OAEG;IACH,OAAO,EAAE,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,kBAAU,CAAC;IAErC;;OAEG;IACH,OAAO,EAAE,IAAA,mBAAK,EACZ,IAAA,mBAAK,EAAC;QACJ,GAAG,SAAS,CAAC,YAAY,EAAE;QAC3B,GAAG,SAAS,CAAC,IAAI,EAAE;QACnB,GAAG,SAAS,CAAC,eAAe,EAAE;QAC9B,GAAG,SAAS,CAAC,eAAe,EAAE;QAC9B,GAAG,SAAS,CAAC,eAAe,EAAE;QAC9B,GAAG,SAAS,CAAC,eAAe,EAAE;QAC9B,GAAG,SAAS,CAAC,oBAAoB,EAAE;QACnC,GAAG,SAAS,CAAC,kBAAkB,EAAE;QACjC,GAAG,SAAS,CAAC,iBAAiB,EAAE;KACjC,CAAC,CACH;IAED;;OAEG;IACH,IAAI,EAAE,IAAA,mBAAK,EAAC,CAAC,GAAG,cAAc,CAAC,GAAG,EAAE,EAAE,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;CACpE,CAAC,CAAC;AASU,QAAA,oBAAoB,GAAG,IAAA,oBAAM,EAAC;IACzC;;OAEG;IACH,EAAE,EAAE,kBAAU;IAEd;;OAEG;IACH,KAAK,EAAE,IAAA,oBAAM,GAAE;IAEf;;OAEG;IACH,OAAO,EAAE,kBAAU;IAEnB;;OAEG;IACH,OAAO,EAAE,IAAA,oBAAM,EAAC;QACd,MAAM,EAAE,IAAA,oBAAM,GAAE;QAChB,MAAM,EAAE,IAAA,2BAAa,EACnB,IAAA,mBAAK,EAAC,CAAC,IAAA,mBAAK,EAAC,kBAAU,CAAC,EAAE,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,kBAAU,CAAC,CAAC,CAAC,CACzD;KACF,CAAC;CACH,CAAC,CAAC;AASU,QAAA,wBAAwB,GAAG,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,kBAAU,CAAC,CAAC;AASxD,QAAA,qBAAqB,GAAG,IAAA,mBAAK,EAAC;IACzC,IAAA,oBAAM,EAAC;QACL;;;;;;WAMG;QACH,OAAO,EAAE,IAAA,qBAAO,EAAC,IAAI,CAAC;QAEtB;;;;;;WAMG;QACH,QAAQ,EAAE,IAAA,2BAAa,EACrB,IAAA,oBAAM,EAAC;YACL,OAAO,EAAE,IAAA,2BAAa,EAAC,IAAA,oBAAM,GAAE,CAAC;YAChC,GAAG,EAAE,IAAA,2BAAa,EAAC,IAAA,oBAAM,GAAE,CAAC;SAC7B,CAAC,CACH;KACF,CAAC;IACF,IAAA,oBAAM,EAAC;QACL;;;;;;WAMG;QACH,OAAO,EAAE,IAAA,qBAAO,EAAC,KAAK,CAAC;QAEvB;;WAEG;QACH,MAAM,EAAE,kBAAU;KACnB,CAAC;CACH,CAAC,CAAC","sourcesContent":["import type { Json } from '@metamask/utils';\nimport { JsonStruct } from '@metamask/utils';\nimport type { Infer } from 'superstruct';\nimport { array, enums, literal, record, string, union } from 'superstruct';\n\nimport { exactOptional, object } from './superstruct';\nimport { UuidStruct } from './utils';\n\n/**\n * Supported Ethereum methods.\n */\nexport enum EthMethod {\n  // General signing methods\n  PersonalSign = 'personal_sign',\n  Sign = 'eth_sign',\n  SignTransaction = 'eth_signTransaction',\n  SignTypedDataV1 = 'eth_signTypedData_v1',\n  SignTypedDataV3 = 'eth_signTypedData_v3',\n  SignTypedDataV4 = 'eth_signTypedData_v4',\n  // ERC-4337 methods\n  PrepareUserOperation = 'eth_prepareUserOperation',\n  PatchUserOperation = 'eth_patchUserOperation',\n  SignUserOperation = 'eth_signUserOperation',\n}\n\n/**\n * Supported Ethereum account types.\n */\nexport enum EthAccountType {\n  Eoa = 'eip155:eoa',\n  Erc4337 = 'eip155:erc4337',\n}\n\nexport const KeyringAccountStruct = object({\n  /**\n   * Account ID (UUIDv4).\n   */\n  id: UuidStruct,\n\n  /**\n   * Account address or next receive address (UTXO).\n   */\n  address: string(),\n\n  /**\n   * Keyring-dependent account options.\n   */\n  options: record(string(), JsonStruct),\n\n  /**\n   * Account supported methods.\n   */\n  methods: array(\n    enums([\n      `${EthMethod.PersonalSign}`,\n      `${EthMethod.Sign}`,\n      `${EthMethod.SignTransaction}`,\n      `${EthMethod.SignTypedDataV1}`,\n      `${EthMethod.SignTypedDataV3}`,\n      `${EthMethod.SignTypedDataV4}`,\n      `${EthMethod.PrepareUserOperation}`,\n      `${EthMethod.PatchUserOperation}`,\n      `${EthMethod.SignUserOperation}`,\n    ]),\n  ),\n\n  /**\n   * Account type.\n   */\n  type: enums([`${EthAccountType.Eoa}`, `${EthAccountType.Erc4337}`]),\n});\n\n/**\n * Account object.\n *\n * Represents an account with its properties and capabilities.\n */\nexport type KeyringAccount = Infer<typeof KeyringAccountStruct>;\n\nexport const KeyringRequestStruct = object({\n  /**\n   * Keyring request ID (UUIDv4).\n   */\n  id: UuidStruct,\n\n  /**\n   * Request's scope (CAIP-2 chain ID).\n   */\n  scope: string(),\n\n  /**\n   * Account ID (UUIDv4).\n   */\n  account: UuidStruct,\n\n  /**\n   * Inner request sent by the client application.\n   */\n  request: object({\n    method: string(),\n    params: exactOptional(\n      union([array(JsonStruct), record(string(), JsonStruct)]),\n    ),\n  }),\n});\n\n/**\n * Keyring request.\n *\n * Represents a request made to the keyring for account-related operations.\n */\nexport type KeyringRequest = Infer<typeof KeyringRequestStruct>;\n\nexport const KeyringAccountDataStruct = record(string(), JsonStruct);\n\n/**\n * Response to a call to `exportAccount`.\n *\n * The exact response depends on the keyring implementation.\n */\nexport type KeyringAccountData = Infer<typeof KeyringAccountDataStruct>;\n\nexport const KeyringResponseStruct = union([\n  object({\n    /**\n     * Pending flag.\n     *\n     * Setting the pending flag to true indicates that the request will be\n     * handled asynchronously. The keyring must be called with `approveRequest`\n     * or `rejectRequest` to resolve the request.\n     */\n    pending: literal(true),\n\n    /**\n     * Redirect URL.\n     *\n     * If present in the response, MetaMask will display a confirmation dialog\n     * with a link to the redirect URL. The user can choose to follow the link\n     * or cancel the request.\n     */\n    redirect: exactOptional(\n      object({\n        message: exactOptional(string()),\n        url: exactOptional(string()),\n      }),\n    ),\n  }),\n  object({\n    /**\n     * Pending flag.\n     *\n     * Setting the pending flag to false indicates that the request will be\n     * handled synchronously. The keyring must return the result of the\n     * request execution.\n     */\n    pending: literal(false),\n\n    /**\n     * Request result.\n     */\n    result: JsonStruct,\n  }),\n]);\n\n/**\n * Response to a call to `submitRequest`.\n *\n * Keyring implementations must return a response with `pending: true` if the\n * request will be handled asynchronously. Otherwise, the response must contain\n * the result of the request and `pending: false`.\n *\n * In the asynchronous case, the keyring can return a redirect URL and message\n * to be shown to the user. The user can choose to follow the link or cancel\n * the request. The main use case for this is to redirect the user to the snap\n * dapp to review the request.\n */\nexport type KeyringResponse = Infer<typeof KeyringResponseStruct>;\n\n/**\n * Keyring interface.\n *\n * Represents the functionality and operations related to managing accounts and\n * handling requests.\n */\nexport type Keyring = {\n  /**\n   * List accounts.\n   *\n   * Retrieves an array of KeyringAccount objects representing the available\n   * accounts.\n   *\n   * @returns A promise that resolves to an array of KeyringAccount objects.\n   */\n  listAccounts(): Promise<KeyringAccount[]>;\n\n  /**\n   * Get an account.\n   *\n   * Retrieves the KeyringAccount object for the given account ID.\n   *\n   * @param id - The ID of the account to retrieve.\n   * @returns A promise that resolves to the KeyringAccount object if found, or\n   * undefined otherwise.\n   */\n  getAccount(id: string): Promise<KeyringAccount | undefined>;\n\n  /**\n   * Create an account.\n   *\n   * Creates a new account with optional, keyring-defined, account options.\n   *\n   * @param options - Keyring-defined options for the account (optional).\n   * @returns A promise that resolves to the newly created KeyringAccount\n   * object without any private information.\n   */\n  createAccount(options?: Record<string, Json>): Promise<KeyringAccount>;\n\n  /**\n   * Filter supported chains for a given account.\n   *\n   * @param id - ID of the account to be checked.\n   * @param chains - List of chains (CAIP-2) to be checked.\n   * @returns A Promise that resolves to a filtered list of CAIP-2 IDs\n   * representing the supported chains.\n   */\n  filterAccountChains(id: string, chains: string[]): Promise<string[]>;\n\n  /**\n   * Update an account.\n   *\n   * Updates the account with the given account object. Does nothing if the\n   * account does not exist.\n   *\n   * @param account - The updated account object.\n   * @returns A promise that resolves when the account is successfully updated.\n   */\n  updateAccount(account: KeyringAccount): Promise<void>;\n\n  /**\n   * Delete an account from the keyring.\n   *\n   * Deletes the account with the given ID from the keyring.\n   *\n   * @param id - The ID of the account to delete.\n   * @returns A promise that resolves when the account is successfully deleted.\n   */\n  deleteAccount(id: string): Promise<void>;\n\n  /**\n   * Exports an account's private key.\n   *\n   * If the keyring cannot export a private key, this function should throw an\n   * error.\n   *\n   * @param id - The ID of the account to export.\n   * @returns A promise that resolves to the exported account.\n   */\n  exportAccount?(id: string): Promise<KeyringAccountData>;\n\n  /**\n   * List all submitted requests.\n   *\n   * Retrieves an array of KeyringRequest objects representing the submitted\n   * requests.\n   *\n   * @returns A promise that resolves to an array of KeyringRequest objects.\n   */\n  listRequests?(): Promise<KeyringRequest[]>;\n\n  /**\n   * Get a request.\n   *\n   * Retrieves the KeyringRequest object for the given request ID.\n   *\n   * @param id - The ID of the request to retrieve.\n   * @returns A promise that resolves to the KeyringRequest object if found, or\n   * undefined otherwise.\n   */\n  getRequest?(id: string): Promise<KeyringRequest | undefined>;\n\n  /**\n   * Submit a request.\n   *\n   * Submits the given KeyringRequest object.\n   *\n   * @param request - The KeyringRequest object to submit.\n   * @returns A promise that resolves to the request response.\n   */\n  submitRequest(request: KeyringRequest): Promise<KeyringResponse>;\n\n  /**\n   * Approve a request.\n   *\n   * Approves the request with the given ID and sets the response if provided.\n   *\n   * @param id - The ID of the request to approve.\n   * @param data - The response to the request (optional).\n   * @returns A promise that resolves when the request is successfully\n   * approved.\n   */\n  approveRequest?(id: string, data?: Record<string, Json>): Promise<void>;\n\n  /**\n   * Reject a request.\n   *\n   * Rejects the request with the given ID.\n   *\n   * @param id - The ID of the request to reject.\n   * @returns A promise that resolves when the request is successfully\n   * rejected.\n   */\n  rejectRequest?(id: string): Promise<void>;\n};\n"]}