{"version":3,"sources":["../src/create-network-client.ts"],"names":[],"mappings":"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","sourcesContent":["import type { InfuraNetworkType } from '@metamask/controller-utils';\nimport { ChainId } from '@metamask/controller-utils';\nimport { createInfuraMiddleware } from '@metamask/eth-json-rpc-infura';\nimport {\n  createBlockCacheMiddleware,\n  createBlockRefMiddleware,\n  createBlockRefRewriteMiddleware,\n  createBlockTrackerInspectorMiddleware,\n  createInflightCacheMiddleware,\n  createFetchMiddleware,\n  createRetryOnEmptyMiddleware,\n} from '@metamask/eth-json-rpc-middleware';\nimport type { SafeEventEmitterProvider } from '@metamask/eth-json-rpc-provider';\nimport {\n  providerFromEngine,\n  providerFromMiddleware,\n} from '@metamask/eth-json-rpc-provider';\nimport {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JsonRpcEngine,\n  mergeMiddleware,\n} from '@metamask/json-rpc-engine';\nimport type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport type { Hex, Json, JsonRpcParams } from '@metamask/utils';\nimport { PollingBlockTracker } from 'eth-block-tracker';\n\nimport type {\n  BlockTracker,\n  NetworkClientConfiguration,\n  Provider,\n} from './types';\nimport { NetworkClientType } from './types';\n\nconst SECOND = 1000;\n\n/**\n * The pair of provider / block tracker that can be used to interface with the\n * network and respond to new activity.\n */\nexport type NetworkClient = {\n  configuration: NetworkClientConfiguration;\n  provider: Provider;\n  blockTracker: BlockTracker;\n  destroy: () => void;\n};\n\n/**\n * Create a JSON RPC network client for a specific network.\n *\n * @param networkConfig - The network configuration.\n * @returns The network client.\n */\nexport function createNetworkClient(\n  networkConfig: NetworkClientConfiguration,\n): NetworkClient {\n  const rpcApiMiddleware =\n    networkConfig.type === NetworkClientType.Infura\n      ? createInfuraMiddleware({\n          network: networkConfig.network,\n          projectId: networkConfig.infuraProjectId,\n          maxAttempts: 5,\n          source: 'metamask',\n        })\n      : createFetchMiddleware({\n          btoa: global.btoa,\n          fetch: global.fetch,\n          rpcUrl: networkConfig.rpcUrl,\n        });\n\n  const rpcProvider = providerFromMiddleware(rpcApiMiddleware);\n\n  const blockTrackerOpts =\n    // eslint-disable-next-line n/no-process-env\n    process.env.IN_TEST && networkConfig.type === 'custom'\n      ? { pollingInterval: SECOND }\n      : {};\n  const blockTracker = new PollingBlockTracker({\n    ...blockTrackerOpts,\n    provider: rpcProvider,\n  });\n\n  const networkMiddleware =\n    networkConfig.type === NetworkClientType.Infura\n      ? createInfuraNetworkMiddleware({\n          blockTracker,\n          network: networkConfig.network,\n          rpcProvider,\n          rpcApiMiddleware,\n        })\n      : createCustomNetworkMiddleware({\n          blockTracker,\n          chainId: networkConfig.chainId,\n          rpcApiMiddleware,\n        });\n\n  const engine = new JsonRpcEngine();\n\n  engine.push(networkMiddleware);\n\n  const provider = providerFromEngine(engine);\n\n  const destroy = () => {\n    blockTracker.destroy();\n  };\n\n  return { configuration: networkConfig, provider, blockTracker, destroy };\n}\n\n/**\n * Create middleware for infura.\n *\n * @param args - The arguments.\n * @param args.blockTracker - The block tracker to use.\n * @param args.network - The Infura network to use.\n * @param args.rpcProvider - The RPC provider to use.\n * @param args.rpcApiMiddleware - Additional middleware.\n * @returns The collection of middleware that makes up the Infura client.\n */\nfunction createInfuraNetworkMiddleware({\n  blockTracker,\n  network,\n  rpcProvider,\n  rpcApiMiddleware,\n}: {\n  blockTracker: PollingBlockTracker;\n  network: InfuraNetworkType;\n  rpcProvider: SafeEventEmitterProvider;\n  rpcApiMiddleware: JsonRpcMiddleware<JsonRpcParams, Json>;\n}) {\n  return mergeMiddleware([\n    createNetworkAndChainIdMiddleware({ network }),\n    createBlockCacheMiddleware({ blockTracker }),\n    createInflightCacheMiddleware(),\n    createBlockRefMiddleware({ blockTracker, provider: rpcProvider }),\n    createRetryOnEmptyMiddleware({ blockTracker, provider: rpcProvider }),\n    createBlockTrackerInspectorMiddleware({ blockTracker }),\n    rpcApiMiddleware,\n  ]);\n}\n\n/**\n * Creates static method middleware.\n *\n * @param args - The Arguments.\n * @param args.network - The Infura network to use.\n * @returns The middleware that implements the eth_chainId method.\n */\nfunction createNetworkAndChainIdMiddleware({\n  network,\n}: {\n  network: InfuraNetworkType;\n}) {\n  return createScaffoldMiddleware({\n    eth_chainId: ChainId[network],\n  });\n}\n\nconst createChainIdMiddleware = (\n  chainId: Hex,\n): JsonRpcMiddleware<JsonRpcParams, Json> => {\n  return (req, res, next, end) => {\n    if (req.method === 'eth_chainId') {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n};\n\n/**\n * Creates custom middleware.\n *\n * @param args - The arguments.\n * @param args.blockTracker - The block tracker to use.\n * @param args.chainId - The chain id to use.\n * @param args.rpcApiMiddleware - Additional middleware.\n * @returns The collection of middleware that makes up the Infura client.\n */\nfunction createCustomNetworkMiddleware({\n  blockTracker,\n  chainId,\n  rpcApiMiddleware,\n}: {\n  blockTracker: PollingBlockTracker;\n  chainId: Hex;\n  rpcApiMiddleware: JsonRpcMiddleware<JsonRpcParams, Json>;\n}): JsonRpcMiddleware<JsonRpcParams, Json> {\n  // eslint-disable-next-line n/no-process-env\n  const testMiddlewares = process.env.IN_TEST\n    ? [createEstimateGasDelayTestMiddleware()]\n    : [];\n\n  return mergeMiddleware([\n    ...testMiddlewares,\n    createChainIdMiddleware(chainId),\n    createBlockRefRewriteMiddleware({ blockTracker }),\n    createBlockCacheMiddleware({ blockTracker }),\n    createInflightCacheMiddleware(),\n    createBlockTrackerInspectorMiddleware({ blockTracker }),\n    rpcApiMiddleware,\n  ]);\n}\n\n/**\n * For use in tests only.\n * Adds a delay to `eth_estimateGas` calls.\n *\n * @returns The middleware for delaying gas estimation calls by 2 seconds when in test.\n */\nfunction createEstimateGasDelayTestMiddleware() {\n  return createAsyncMiddleware(async (req, _, next) => {\n    if (req.method === 'eth_estimateGas') {\n      await new Promise((resolve) => setTimeout(resolve, SECOND * 2));\n    }\n    return next();\n  });\n}\n"]}