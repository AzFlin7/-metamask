{"version":3,"sources":["../src/safe-event-emitter-provider.ts"],"sourcesContent":["import type { JsonRpcEngine } from '@metamask/json-rpc-engine';\nimport SafeEventEmitter from '@metamask/safe-event-emitter';\nimport type { JsonRpcRequest } from '@metamask/utils';\n\n/**\n * An Ethereum provider.\n *\n * This provider loosely follows conventions that pre-date EIP-1193.\n * It is not compliant with any Ethereum provider standard.\n */\nexport class SafeEventEmitterProvider extends SafeEventEmitter {\n  #engine: JsonRpcEngine;\n\n  /**\n   * Construct a SafeEventEmitterProvider from a JSON-RPC engine.\n   *\n   * @param options - Options.\n   * @param options.engine - The JSON-RPC engine used to process requests.\n   */\n  constructor({ engine }: { engine: JsonRpcEngine }) {\n    super();\n    this.#engine = engine;\n\n    if (engine.on) {\n      engine.on('notification', (message: string) => {\n        this.emit('data', null, message);\n      });\n    }\n  }\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * @param req - The request to send.\n   * @param callback - A function that is called upon the success or failure of the request.\n   */\n  sendAsync = (\n    req: JsonRpcRequest,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (error: unknown, providerRes?: any) => void,\n  ) => {\n    this.#engine.handle(req, callback);\n  };\n\n  /**\n   * Send a provider request asynchronously.\n   *\n   * This method serves the same purpose as `sendAsync`. It only exists for\n   * legacy reasons.\n   *\n   * @deprecated Use `sendAsync` instead.\n   * @param req - The request to send.\n   * @param callback - A function that is called upon the success or failure of the request.\n   */\n  send = (\n    req: JsonRpcRequest,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (error: unknown, providerRes?: any) => void,\n  ) => {\n    if (typeof callback !== 'function') {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    this.#engine.handle(req, callback);\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,OAAO,sBAAsB;AAD7B;AAUO,IAAM,2BAAN,cAAuC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS7D,YAAY,EAAE,OAAO,GAA8B;AACjD,UAAM;AATR;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAY,CACV,KAGA,aACG;AACH,yBAAK,SAAQ,OAAO,KAAK,QAAQ;AAAA,IACnC;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAO,CACL,KAGA,aACG;AACH,UAAI,OAAO,aAAa,YAAY;AAClC,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC3D;AACA,yBAAK,SAAQ,OAAO,KAAK,QAAQ;AAAA,IACnC;AA5CE,uBAAK,SAAU;AAEf,QAAI,OAAO,IAAI;AACb,aAAO,GAAG,gBAAgB,CAAC,YAAoB;AAC7C,aAAK,KAAK,QAAQ,MAAM,OAAO;AAAA,MACjC,CAAC;AAAA,IACH;AAAA,EACF;AAsCF;AAvDE;","names":[]}