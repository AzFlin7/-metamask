{"version":3,"sources":["../src/provider-from-middleware.ts"],"names":[],"mappings":";;;;;AAAA,SAAS,qBAAqB;AAavB,SAAS,uBAGd,YAAyE;AACzE,QAAM,SAAwB,IAAI,cAAc;AAChD,SAAO,KAAK,UAAU;AACtB,QAAM,WAAqC,mBAAmB,MAAM;AACpE,SAAO;AACT","sourcesContent":["import { JsonRpcEngine } from '@metamask/json-rpc-engine';\nimport type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport type { Json, JsonRpcParams } from '@metamask/utils';\n\nimport { providerFromEngine } from './provider-from-engine';\nimport type { SafeEventEmitterProvider } from './safe-event-emitter-provider';\n\n/**\n * Construct an Ethereum provider from the given middleware.\n *\n * @param middleware - The middleware to construct a provider from.\n * @returns An Ethereum provider.\n */\nexport function providerFromMiddleware<\n  Params extends JsonRpcParams,\n  Result extends Json,\n>(middleware: JsonRpcMiddleware<Params, Result>): SafeEventEmitterProvider {\n  const engine: JsonRpcEngine = new JsonRpcEngine();\n  engine.push(middleware);\n  const provider: SafeEventEmitterProvider = providerFromEngine(engine);\n  return provider;\n}\n"]}