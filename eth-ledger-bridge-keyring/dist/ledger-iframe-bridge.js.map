{"version":3,"file":"ledger-iframe-bridge.js","sourceRoot":"","sources":["../src/ledger-iframe-bridge.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  GetPublicKeyParams,\n  GetPublicKeyResponse,\n  LedgerBridge,\n  LedgerSignMessageParams,\n  LedgerSignMessageResponse,\n  LedgerSignTransactionParams,\n  LedgerSignTransactionResponse,\n  LedgerSignTypedDataParams,\n  LedgerSignTypedDataResponse,\n} from './ledger-bridge';\n\nconst LEDGER_IFRAME_ID = 'LEDGER-IFRAME';\n\nexport enum IFrameMessageAction {\n  LedgerConnectionChange = 'ledger-connection-change',\n  LedgerUnlock = 'ledger-unlock',\n  LedgerMakeApp = 'ledger-make-app',\n  LedgerUpdateTransport = 'ledger-update-transport',\n  LedgerSignTransaction = 'ledger-sign-transaction',\n  LedgerSignPersonalMessage = 'ledger-sign-personal-message',\n  LedgerSignTypedData = 'ledger-sign-typed-data',\n}\n\ntype IFrameMessageResponse<TAction extends IFrameMessageAction> = {\n  action: TAction;\n  messageId: number;\n} & (\n  | {\n      action: IFrameMessageAction.LedgerConnectionChange;\n      payload: { connected: boolean };\n    }\n  | ({\n      action: IFrameMessageAction.LedgerMakeApp;\n    } & ({ success: true } | { success: false; error?: unknown }))\n  | {\n      action: IFrameMessageAction.LedgerUpdateTransport;\n      success: boolean;\n    }\n  | ({\n      action: IFrameMessageAction.LedgerUnlock;\n    } & (\n      | { success: true; payload: GetPublicKeyResponse }\n      | { success: false; payload: { error: Error } }\n    ))\n  | ({\n      action: IFrameMessageAction.LedgerSignTransaction;\n    } & (\n      | { success: true; payload: LedgerSignTransactionResponse }\n      | { success: false; payload: { error: Error } }\n    ))\n  | ({\n      action:\n        | IFrameMessageAction.LedgerSignPersonalMessage\n        | IFrameMessageAction.LedgerSignTypedData;\n    } & (\n      | {\n          success: true;\n          payload: LedgerSignMessageResponse | LedgerSignTypedDataResponse;\n        }\n      | { success: false; payload: { error: Error } }\n    ))\n);\n\ntype IFrameMessage<TAction extends IFrameMessageAction> = {\n  action: TAction;\n  params?: Readonly<Record<string, unknown>>;\n};\n\ntype IFramePostMessage<TAction extends IFrameMessageAction> =\n  IFrameMessage<TAction> & {\n    messageId: number;\n    target: typeof LEDGER_IFRAME_ID;\n  };\n\nexport class LedgerIframeBridge implements LedgerBridge {\n  iframe?: HTMLIFrameElement;\n\n  iframeLoaded = false;\n\n  eventListener?: (eventMessage: {\n    origin: string;\n    data: IFrameMessageResponse<IFrameMessageAction>;\n  }) => void;\n\n  isDeviceConnected = false;\n\n  currentMessageId = 0;\n\n  messageCallbacks: Record<\n    number,\n    (response: IFrameMessageResponse<IFrameMessageAction>) => void\n  > = {};\n\n  delayedPromise?: {\n    resolve: (value: boolean) => void;\n    reject: (error: unknown) => void;\n    transportType: string;\n  };\n\n  async init(bridgeUrl: string) {\n    this.#setupIframe(bridgeUrl);\n\n    this.eventListener = this.#eventListener.bind(this, bridgeUrl);\n\n    window.addEventListener('message', this.eventListener);\n  }\n\n  async destroy() {\n    if (this.eventListener) {\n      window.removeEventListener('message', this.eventListener);\n    }\n  }\n\n  async attemptMakeApp(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      this.#sendMessage(\n        {\n          action: IFrameMessageAction.LedgerMakeApp,\n        },\n        (response) => {\n          if (response.success) {\n            resolve(true);\n          } else {\n            reject(response.error);\n          }\n        },\n      );\n    });\n  }\n\n  async updateTransportMethod(transportType: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      // If the iframe isn't loaded yet, let's store the desired transportType value and\n      // optimistically return a successful promise\n      if (!this.iframeLoaded) {\n        this.delayedPromise = {\n          resolve,\n          reject,\n          transportType,\n        };\n        return;\n      }\n\n      this.#sendMessage(\n        {\n          action: IFrameMessageAction.LedgerUpdateTransport,\n          params: { transportType },\n        },\n        ({ success }) => {\n          if (success) {\n            return resolve(true);\n          }\n          return reject(new Error('Ledger transport could not be updated'));\n        },\n      );\n    });\n  }\n\n  async getPublicKey(\n    params: GetPublicKeyParams,\n  ): Promise<GetPublicKeyResponse> {\n    return this.#deviceActionMessage(IFrameMessageAction.LedgerUnlock, params);\n  }\n\n  async deviceSignTransaction(\n    params: LedgerSignTransactionParams,\n  ): Promise<LedgerSignTransactionResponse> {\n    return this.#deviceActionMessage(\n      IFrameMessageAction.LedgerSignTransaction,\n      params,\n    );\n  }\n\n  async deviceSignMessage(\n    params: LedgerSignMessageParams,\n  ): Promise<LedgerSignMessageResponse> {\n    return this.#deviceActionMessage(\n      IFrameMessageAction.LedgerSignPersonalMessage,\n      params,\n    );\n  }\n\n  async deviceSignTypedData(\n    params: LedgerSignTypedDataParams,\n  ): Promise<LedgerSignTypedDataResponse> {\n    return this.#deviceActionMessage(\n      IFrameMessageAction.LedgerSignTypedData,\n      params,\n    );\n  }\n\n  async #deviceActionMessage(\n    action: IFrameMessageAction.LedgerUnlock,\n    params: GetPublicKeyParams,\n  ): Promise<GetPublicKeyResponse>;\n\n  async #deviceActionMessage(\n    action: IFrameMessageAction.LedgerSignTransaction,\n    params: LedgerSignTransactionParams,\n  ): Promise<LedgerSignTransactionResponse>;\n\n  async #deviceActionMessage(\n    action: IFrameMessageAction.LedgerSignPersonalMessage,\n    params: LedgerSignMessageParams,\n  ): Promise<LedgerSignMessageResponse>;\n\n  async #deviceActionMessage(\n    action: IFrameMessageAction.LedgerSignTypedData,\n    params: LedgerSignTypedDataParams,\n  ): Promise<LedgerSignTypedDataResponse>;\n\n  async #deviceActionMessage(\n    ...[action, params]:\n      | [IFrameMessageAction.LedgerUnlock, GetPublicKeyParams]\n      | [IFrameMessageAction.LedgerSignTransaction, LedgerSignTransactionParams]\n      | [IFrameMessageAction.LedgerSignPersonalMessage, LedgerSignMessageParams]\n      | [IFrameMessageAction.LedgerSignTypedData, LedgerSignTypedDataParams]\n  ) {\n    return new Promise((resolve, reject) => {\n      this.#sendMessage(\n        {\n          action,\n          params,\n        },\n        ({ success, payload }) => {\n          if (success) {\n            return resolve(payload);\n          }\n          return reject(payload.error);\n        },\n      );\n    });\n  }\n\n  #setupIframe(bridgeUrl: string) {\n    this.iframe = document.createElement('iframe');\n    this.iframe.src = bridgeUrl;\n    this.iframe.allow = `hid 'src'`;\n    this.iframe.onload = async () => {\n      // If the ledger live preference was set before the iframe is loaded,\n      // set it after the iframe has loaded\n      this.iframeLoaded = true;\n      if (this.delayedPromise) {\n        try {\n          const result = await this.updateTransportMethod(\n            this.delayedPromise.transportType,\n          );\n          this.delayedPromise.resolve(result);\n        } catch (error) {\n          this.delayedPromise.reject(error);\n        } finally {\n          delete this.delayedPromise;\n        }\n      }\n    };\n    document.head.appendChild(this.iframe);\n  }\n\n  #getOrigin(bridgeUrl: string) {\n    const tmp = bridgeUrl.split('/');\n    tmp.splice(-1, 1);\n    return tmp.join('/');\n  }\n\n  #eventListener(\n    bridgeUrl: string,\n    eventMessage: {\n      origin: string;\n      data: IFrameMessageResponse<IFrameMessageAction>;\n    },\n  ) {\n    if (eventMessage.origin !== this.#getOrigin(bridgeUrl)) {\n      return;\n    }\n\n    if (eventMessage.data) {\n      const messageCallback =\n        this.messageCallbacks[eventMessage.data.messageId];\n      if (messageCallback) {\n        messageCallback(eventMessage.data);\n      } else if (\n        eventMessage.data.action === IFrameMessageAction.LedgerConnectionChange\n      ) {\n        this.isDeviceConnected = eventMessage.data.payload.connected;\n      }\n    }\n  }\n\n  #sendMessage<TAction extends IFrameMessageAction>(\n    message: IFrameMessage<TAction>,\n    callback: (response: IFrameMessageResponse<TAction>) => void,\n  ) {\n    this.currentMessageId += 1;\n\n    const postMsg: IFramePostMessage<TAction> = {\n      ...message,\n      messageId: this.currentMessageId,\n      target: LEDGER_IFRAME_ID,\n    };\n\n    this.messageCallbacks[this.currentMessageId] = callback as (\n      response: IFrameMessageResponse<IFrameMessageAction>,\n    ) => void;\n\n    if (!this.iframeLoaded || !this.iframe || !this.iframe.contentWindow) {\n      throw new Error('The iframe is not loaded yet');\n    }\n\n    this.iframe.contentWindow.postMessage(postMsg, '*');\n  }\n}\n"]}