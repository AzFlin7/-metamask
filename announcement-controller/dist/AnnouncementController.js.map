{"version":3,"file":"AnnouncementController.js","sourceRoot":"","sources":["../src/AnnouncementController.ts"],"names":[],"mappings":";;;;;;;;;AAKA,+DAA2D;AAkD3D,MAAM,cAAc,GAAG,wBAAwB,CAAC;AAEhD,MAAM,YAAY,GAAG;IACnB,aAAa,EAAE,EAAE;CAClB,CAAC;AAEF,MAAM,QAAQ,GAAG;IACf,aAAa,EAAE;QACb,OAAO,EAAE,IAAI;QACb,SAAS,EAAE,IAAI;KAChB;CACF,CAAC;AAUF;;GAEG;AACH,MAAa,sBAAuB,SAAQ,gCAI3C;IACC;;;;;;;OAOG;IACH,YAAY,EACV,SAAS,EACT,KAAK,EACL,gBAAgB,GAKjB;QACC,MAAM,WAAW,mCAAQ,YAAY,GAAK,KAAK,CAAE,CAAC;QAClD,KAAK,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;;QACzE,uBAAA,IAAI,mFAAkB,MAAtB,IAAI,EAAmB,gBAAgB,CAAC,CAAC;IAC3C,CAAC;IAoBD;;;;;OAKG;IACH,YAAY,CAAC,SAA6B;QACxC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE;YAChC,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACnD,aAAa,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA1DD,wDA0DC;gJAvBmB,gBAAiC;IACjD,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;QACpB,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,YAA0B,EAAE,EAAE;;YACrE,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG,MAAA,KAAK,CAAC,aAAa,CACxD,YAAY,CAAC,EAAE,CAChB,mEAAS,YAAY,KAAE,OAAO,EAAE,KAAK,GAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\n\ntype ViewedAnnouncement = {\n  [id: number]: boolean;\n};\n\ntype Announcement = {\n  id: number;\n  date: string;\n};\n\n/**\n * A map of announcement ids to Announcement objects\n */\nexport type AnnouncementMap = {\n  [id: number]: Announcement;\n};\n\ntype StateAnnouncement = Announcement & { isShown: boolean };\n\n/**\n * A map of announcement ids to StateAnnouncement objects\n */\nexport type StateAnnouncementMap = {\n  [id: number]: StateAnnouncement;\n};\n\n/**\n * Announcement state will hold all the seen and unseen announcements\n * that are still active\n */\nexport type AnnouncementControllerState = {\n  announcements: StateAnnouncementMap;\n};\n\nexport type AnnouncementControllerActions =\n  AnnouncementControllerGetStateAction;\nexport type AnnouncementControllerEvents =\n  AnnouncementControllerStateChangeEvent;\n\nexport type AnnouncementControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  AnnouncementControllerState\n>;\n\nexport type AnnouncementControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  AnnouncementControllerState\n>;\n\nconst controllerName = 'AnnouncementController';\n\nconst defaultState = {\n  announcements: {},\n};\n\nconst metadata = {\n  announcements: {\n    persist: true,\n    anonymous: true,\n  },\n};\n\nexport type AnnouncementControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AnnouncementControllerActions,\n  AnnouncementControllerEvents,\n  never,\n  never\n>;\n\n/**\n * Controller for managing in-app announcements.\n */\nexport class AnnouncementController extends BaseController<\n  typeof controllerName,\n  AnnouncementControllerState,\n  AnnouncementControllerMessenger\n> {\n  /**\n   * Creates a AnnouncementController instance.\n   *\n   * @param args - The arguments to this function.\n   * @param args.messenger - Messenger used to communicate with BaseV2 controller.\n   * @param args.state - Initial state to set on this controller.\n   * @param args.allAnnouncements - Announcements to be passed through to #addAnnouncements\n   */\n  constructor({\n    messenger,\n    state,\n    allAnnouncements,\n  }: {\n    messenger: AnnouncementControllerMessenger;\n    state?: AnnouncementControllerState;\n    allAnnouncements: AnnouncementMap;\n  }) {\n    const mergedState = { ...defaultState, ...state };\n    super({ messenger, metadata, name: controllerName, state: mergedState });\n    this.#addAnnouncements(allAnnouncements);\n  }\n\n  /**\n   * Compares the announcements in state with the announcements from file\n   * to check if there are any new announcements\n   * if yes, the new announcement will be added to the state with a flag indicating\n   * that the announcement is not seen by the user.\n   *\n   * @param allAnnouncements - all announcements to compare with the announcements from state\n   */\n  #addAnnouncements(allAnnouncements: AnnouncementMap): void {\n    this.update((state) => {\n      Object.values(allAnnouncements).forEach((announcement: Announcement) => {\n        state.announcements[announcement.id] = state.announcements[\n          announcement.id\n        ] ?? { ...announcement, isShown: false };\n      });\n    });\n  }\n\n  /**\n   * Updates the status of the status of the specified announcements\n   * once it is read by the user.\n   *\n   * @param viewedIds - The announcement IDs to mark as viewed.\n   */\n  updateViewed(viewedIds: ViewedAnnouncement): void {\n    this.update(({ announcements }) => {\n      for (const id of Object.keys(viewedIds).map(Number)) {\n        announcements[id].isShown = viewedIds[id];\n      }\n    });\n  }\n}\n"]}