{"version":3,"file":"PermissionLogController.js","sourceRoot":"","sources":["../src/PermissionLogController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseController,\n  type RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport type { JsonRpcMiddleware } from '@metamask/json-rpc-engine';\nimport {\n  type Json,\n  type JsonRpcRequest,\n  type JsonRpcParams,\n  type PendingJsonRpcResponse,\n  hasProperty,\n} from '@metamask/utils';\n\nimport {\n  LOG_IGNORE_METHODS,\n  LOG_LIMIT,\n  LOG_METHOD_TYPES,\n  WALLET_PREFIX,\n  CAVEAT_TYPES,\n} from './enums';\n\nexport type JsonRpcRequestWithOrigin<\n  Params extends JsonRpcParams = JsonRpcParams,\n> = JsonRpcRequest<Params> & {\n  origin?: string;\n};\n\nexport type Caveat = {\n  type: string;\n  value: string[];\n};\n\nexport type Permission = {\n  parentCapability: string;\n  caveats?: Caveat[];\n};\n\nexport type PermissionActivityLog = {\n  id: string | number | null;\n  method: string;\n  methodType: LOG_METHOD_TYPES;\n  origin?: string;\n  requestTime: number;\n  responseTime: number | null;\n  success: boolean | null;\n};\n\nexport type PermissionLog = {\n  accounts?: Record<string, number>;\n  lastApproved?: number;\n};\nexport type PermissionEntry = Record<string, PermissionLog>;\n\nexport type PermissionHistory = Record<string, PermissionEntry>;\n\n/**\n *\n * Permission log controller state\n * @property permissionHistory - permission history\n * @property permissionActivityLog - permission activity logs\n */\nexport type PermissionLogControllerState = {\n  permissionHistory: PermissionHistory;\n  permissionActivityLog: PermissionActivityLog[];\n};\n\nexport type PermissionLogControllerOptions = {\n  restrictedMethods: Set<string>;\n  state?: Partial<PermissionLogControllerState>;\n  messenger: PermissionLogControllerMessenger;\n};\n\nexport type PermissionLogControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  never,\n  never,\n  never,\n  never\n>;\n\nconst defaultState: PermissionLogControllerState = {\n  permissionHistory: {},\n  permissionActivityLog: [],\n};\n\nconst name = 'PermissionLogController';\n\n/**\n * Controller with middleware for logging requests and responses to restricted\n * and permissions-related methods.\n */\nexport class PermissionLogController extends BaseController<\n  typeof name,\n  PermissionLogControllerState,\n  PermissionLogControllerMessenger\n> {\n  #restrictedMethods: Set<string>;\n\n  constructor({\n    messenger,\n    restrictedMethods,\n    state,\n  }: PermissionLogControllerOptions) {\n    super({\n      messenger,\n      name,\n      metadata: {\n        permissionHistory: {\n          persist: true,\n          anonymous: false,\n        },\n        permissionActivityLog: {\n          persist: true,\n          anonymous: false,\n        },\n      },\n      state: { ...defaultState, ...state },\n    });\n    this.#restrictedMethods = restrictedMethods;\n  }\n\n  /**\n   * Updates the exposed account history for the given origin.\n   * Sets the 'last seen' time to Date.now() for the given accounts.\n   * Does **not** update the 'lastApproved' time for the permission itself.\n   * Returns if the accounts array is empty.\n   *\n   * @param origin - The origin that the accounts are exposed to.\n   * @param accounts - The accounts.\n   */\n  updateAccountsHistory(origin: string, accounts: string[]) {\n    if (accounts.length === 0) {\n      return;\n    }\n    const newEntries = {\n      eth_accounts: {\n        accounts: this.#getAccountToTimeMap(accounts, Date.now()),\n      },\n    };\n    this.#commitNewHistory(origin, newEntries);\n  }\n\n  /**\n   * Create a permissions log middleware. Records permissions activity and history:\n   *\n   * Activity: requests and responses for restricted and most wallet_ methods.\n   *\n   * History: for each origin, the last time a permission was granted, including\n   * which accounts were exposed, if any.\n   *\n   * @returns The permissions log middleware.\n   */\n  createMiddleware(): JsonRpcMiddleware<JsonRpcParams, Json> {\n    return (req: JsonRpcRequestWithOrigin, res, next) => {\n      const { origin, method } = req;\n      const isInternal = method.startsWith(WALLET_PREFIX);\n      const isEthRequestAccounts = method === 'eth_requestAccounts';\n\n      // Determine if the method should be logged\n      if (\n        (!LOG_IGNORE_METHODS.includes(method) &&\n          (isInternal || this.#restrictedMethods.has(method))) ||\n        isEthRequestAccounts\n      ) {\n        const activityEntry = this.#logRequest(req, isInternal);\n\n        const requestedMethods = this.#getRequestedMethods(req);\n\n        // Call next with a return handler for capturing the response\n        next((cb) => {\n          const time = Date.now();\n          this.#logResponse(activityEntry, res, time);\n\n          if (requestedMethods && !res.error && res.result && origin) {\n            this.#logPermissionsHistory(\n              requestedMethods,\n              origin,\n              res.result,\n              time,\n              isEthRequestAccounts,\n            );\n          }\n          cb();\n        });\n        return;\n      }\n\n      next();\n    };\n  }\n\n  /**\n   * Get a map from account addresses to the given time.\n   *\n   * @param accounts - An array of addresses.\n   * @param time - A time, e.g. Date.now().\n   * @returns A string:number map of addresses to time.\n   */\n  #getAccountToTimeMap(\n    accounts: string[],\n    time: number,\n  ): Record<string, number> {\n    return accounts.reduce(\n      (acc, account) => ({\n        ...acc,\n        [account]: time,\n      }),\n      {},\n    );\n  }\n\n  /**\n   * Creates and commits an activity log entry, without response data.\n   *\n   * @param request - The request object.\n   * @param isInternal - Whether the request is internal.\n   * @returns new added activity entry\n   */\n  #logRequest(\n    request: JsonRpcRequestWithOrigin,\n    isInternal: boolean,\n  ): PermissionActivityLog {\n    const activityEntry: PermissionActivityLog = {\n      id: request.id,\n      method: request.method,\n      methodType: isInternal\n        ? LOG_METHOD_TYPES.internal\n        : LOG_METHOD_TYPES.restricted,\n      origin: request.origin,\n      requestTime: Date.now(),\n      responseTime: null,\n      success: null,\n    };\n    this.update((state) => {\n      const newLogs = [...state.permissionActivityLog, activityEntry];\n      state.permissionActivityLog =\n        // remove oldest log if exceeding size limit\n        newLogs.length > LOG_LIMIT ? newLogs.slice(1) : newLogs;\n    });\n    return activityEntry;\n  }\n\n  /**\n   * Adds response data to an existing activity log entry.\n   * Entry assumed already committed (i.e., in the log).\n   *\n   * @param entry - The entry to add a response to.\n   * @param response - The response object.\n   * @param time - Output from Date.now()\n   */\n  #logResponse(\n    entry: PermissionActivityLog,\n    response: PendingJsonRpcResponse<Json>,\n    time: number,\n  ) {\n    if (!entry || !response) {\n      return;\n    }\n\n    // The JSON-RPC 2.0 specification defines \"success\" by the presence of\n    // either the \"result\" or \"error\" property. The specification forbids\n    // both properties from being present simultaneously, and our JSON-RPC\n    // stack is spec-compliant at the time of writing.\n    this.update((state) => {\n      state.permissionActivityLog = state.permissionActivityLog.map((log) => {\n        // Update the log entry that matches the given entry id\n        if (log.id === entry.id) {\n          return {\n            ...log,\n            success: hasProperty(response, 'result'),\n            responseTime: time,\n          };\n        }\n        return log;\n      });\n    });\n  }\n\n  /**\n   * Create new permissions history log entries, if any, and commit them.\n   *\n   * @param requestedMethods - The method names corresponding to the requested permissions.\n   * @param origin - The origin of the permissions request.\n   * @param result - The permissions request response.result.\n   * @param time - The time of the request, i.e. Date.now().\n   * @param isEthRequestAccounts - Whether the permissions request was 'eth_requestAccounts'.\n   */\n  #logPermissionsHistory(\n    requestedMethods: string[],\n    origin: string,\n    result: Json,\n    time: number,\n    isEthRequestAccounts: boolean,\n  ) {\n    let newEntries: PermissionEntry;\n\n    if (isEthRequestAccounts) {\n      // Type assertion: We are assuming that the response data contains\n      // a set of accounts if the RPC method is \"eth_requestAccounts\".\n      const accounts = result as string[];\n      newEntries = {\n        eth_accounts: {\n          accounts: this.#getAccountToTimeMap(accounts, time),\n          lastApproved: time,\n        },\n      };\n    } else {\n      // Records new \"lastApproved\" times for the granted permissions, if any.\n      // Special handling for eth_accounts, in order to record the time the\n      // accounts were last seen or approved by the origin.\n      // Type assertion: We are assuming that the response data contains\n      // a set of permissions if the RPC method is \"eth_requestPermissions\".\n      const permissions = result as Permission[];\n      newEntries = permissions.reduce((acc: PermissionEntry, permission) => {\n        const method = permission.parentCapability;\n\n        if (!requestedMethods.includes(method)) {\n          return acc;\n        }\n\n        if (method === 'eth_accounts') {\n          const accounts = this.#getAccountsFromPermission(permission);\n          return {\n            ...acc,\n            [method]: {\n              lastApproved: time,\n              accounts: this.#getAccountToTimeMap(accounts, time),\n            },\n          };\n        }\n\n        return {\n          ...acc,\n          [method]: {\n            lastApproved: time,\n          },\n        };\n      }, {});\n    }\n\n    if (Object.keys(newEntries).length > 0) {\n      this.#commitNewHistory(origin, newEntries);\n    }\n  }\n\n  /**\n   * Commit new entries to the permissions history log.\n   * Merges the history for the given origin, overwriting existing entries\n   * with the same key (permission name).\n   *\n   * @param origin - The requesting origin.\n   * @param newEntries - The new entries to commit.\n   */\n  #commitNewHistory(origin: string, newEntries: PermissionEntry) {\n    const { permissionHistory } = this.state;\n\n    // a simple merge updates most permissions\n    const oldOriginHistory = permissionHistory[origin] ?? {};\n    const newOriginHistory = {\n      ...oldOriginHistory,\n      ...newEntries,\n    };\n\n    // eth_accounts requires special handling, because of information\n    // we store about the accounts\n    const existingEthAccountsEntry = oldOriginHistory.eth_accounts;\n    const newEthAccountsEntry = newEntries.eth_accounts;\n\n    if (existingEthAccountsEntry && newEthAccountsEntry) {\n      // we may intend to update just the accounts, not the permission\n      // itself\n      const lastApproved =\n        newEthAccountsEntry.lastApproved ??\n        existingEthAccountsEntry.lastApproved;\n\n      // merge old and new eth_accounts history entries\n      newOriginHistory.eth_accounts = {\n        lastApproved,\n        accounts: {\n          ...existingEthAccountsEntry.accounts,\n          ...newEthAccountsEntry.accounts,\n        },\n      };\n    }\n\n    this.update((state) => {\n      state.permissionHistory = {\n        ...permissionHistory,\n        [origin]: newOriginHistory,\n      };\n    });\n  }\n\n  /**\n   * Get all requested methods from a permissions request.\n   *\n   * @param request - The request object.\n   * @returns The names of the requested permissions.\n   */\n  #getRequestedMethods(request: JsonRpcRequestWithOrigin): string[] | null {\n    const { method, params } = request;\n    if (method === 'eth_requestAccounts') {\n      return ['eth_accounts'];\n    } else if (\n      method === `${WALLET_PREFIX}requestPermissions` &&\n      params &&\n      Array.isArray(params) &&\n      params[0] &&\n      typeof params[0] === 'object' &&\n      !Array.isArray(params[0])\n    ) {\n      return Object.keys(params[0]);\n    }\n    return null;\n  }\n\n  /**\n   * Get the permitted accounts from an eth_accounts permissions object.\n   * Returns an empty array if the permission is not eth_accounts.\n   *\n   * @param permission - The permissions object.\n   * @param permission.parentCapability - The permissions parentCapability.\n   * @param permission.caveats - The permissions caveats.\n   * @returns The permitted accounts.\n   */\n  #getAccountsFromPermission(permission: Permission): string[] {\n    if (permission.parentCapability !== 'eth_accounts' || !permission.caveats) {\n      return [];\n    }\n\n    const accounts = new Set<string>();\n    for (const caveat of permission.caveats) {\n      if (\n        caveat.type === CAVEAT_TYPES.restrictReturnedAccounts &&\n        Array.isArray(caveat.value)\n      ) {\n        for (const value of caveat.value) {\n          accounts.add(value);\n        }\n      }\n    }\n\n    return [...accounts];\n  }\n}\n"]}