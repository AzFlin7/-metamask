{"version":3,"sources":["../src/AbstractPollingController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,OAAO,eAAe;AACtB,SAAS,MAAM,cAAc;AAQtB,IAAM,SAAS,CACpB,iBACA,YACsB,GAAG,eAAe,IAAI,UAAU,OAAO,CAAC;AAQzD,SAAS,mCACd,MACA;AAxBF;AAAA,EAyBE,MAAe,sCACL,KAEV;AAAA,IAHA;AAAA;AAIE,yBAAS,mBAAyD,oBAAI,IAAI;AAE1E,qCAGI,oBAAI,IAAI;AAAA;AAAA,IAcZ,8BACE,iBACA,UAAgB,CAAC,GACT;AACR,YAAM,YAAY,OAAO;AACzB,YAAM,MAAM,OAAO,iBAAiB,OAAO;AAC3C,YAAM,kBACJ,mBAAK,mBAAkB,IAAI,GAAG,KAAK,oBAAI,IAAY;AACrD,sBAAgB,IAAI,SAAS;AAC7B,yBAAK,mBAAkB,IAAI,KAAK,eAAe;AAE/C,UAAI,gBAAgB,SAAS,GAAG;AAC9B,aAAK,+BAA+B,iBAAiB,OAAO;AAAA,MAC9D;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,iBAAiB;AACf,yBAAK,mBAAkB,QAAQ,CAAC,UAAU,SAAS;AACjD,iBAAS,QAAQ,CAAC,UAAU;AAC1B,eAAK,0BAA0B,KAAK;AAAA,QACtC,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,IAEA,0BAA0B,cAAsB;AAC9C,UAAI,CAAC,cAAc;AACjB,cAAM,IAAI,MAAM,uBAAuB;AAAA,MACzC;AAEA,UAAI,cAAwC;AAC5C,iBAAW,CAAC,KAAK,QAAQ,KAAK,mBAAK,oBAAmB;AACpD,YAAI,SAAS,OAAO,YAAY,GAAG;AACjC,cAAI,SAAS,SAAS,GAAG;AACvB,0BAAc;AAAA,UAChB;AACA;AAAA,QACF;AAAA,MACF;AAEA,UAAI,aAAa;AACf,aAAK,gCAAgC,WAAW;AAChD,2BAAK,mBAAkB,OAAO,WAAW;AACzC,cAAM,YAAY,mBAAK,YAAW,IAAI,WAAW;AACjD,YAAI,WAAW;AACb,qBAAW,YAAY,WAAW;AAEhC,qBAAS,WAAW;AAAA,UACtB;AACA,oBAAU,MAAM;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAAA,IAEA,mCACE,iBACA,UACA,UAAgB,CAAC,GACjB;AACA,YAAM,MAAM,OAAO,iBAAiB,OAAO;AAC3C,YAAM,YAAY,mBAAK,YAAW,IAAI,GAAG,KAAK,oBAAI,IAAqB;AACvE,gBAAU,IAAI,QAAQ;AACtB,yBAAK,YAAW,IAAI,KAAK,SAAS;AAAA,IACpC;AAAA,EACF;AApFW;AAET;AAmFF,SAAO;AACT","sourcesContent":["import type { NetworkClientId } from '@metamask/network-controller';\nimport type { Json } from '@metamask/utils';\nimport stringify from 'fast-json-stable-stringify';\nimport { v4 as random } from 'uuid';\n\nimport type {\n  Constructor,\n  PollingTokenSetId,\n  IPollingController,\n} from './types';\n\nexport const getKey = (\n  networkClientId: NetworkClientId,\n  options: Json,\n): PollingTokenSetId => `${networkClientId}:${stringify(options)}`;\n\n/**\n * AbstractPollingControllerBaseMixin\n *\n * @param Base - The base class to mix onto.\n * @returns The composed class.\n */\nexport function AbstractPollingControllerBaseMixin<TBase extends Constructor>(\n  Base: TBase,\n) {\n  abstract class AbstractPollingControllerBase\n    extends Base\n    implements IPollingController\n  {\n    readonly #pollingTokenSets: Map<PollingTokenSetId, Set<string>> = new Map();\n\n    #callbacks: Map<\n      PollingTokenSetId,\n      Set<(PollingTokenSetId: PollingTokenSetId) => void>\n    > = new Map();\n\n    abstract _executePoll(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ): Promise<void>;\n\n    abstract _startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ): void;\n\n    abstract _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;\n\n    startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json = {},\n    ): string {\n      const pollToken = random();\n      const key = getKey(networkClientId, options);\n      const pollingTokenSet =\n        this.#pollingTokenSets.get(key) ?? new Set<string>();\n      pollingTokenSet.add(pollToken);\n      this.#pollingTokenSets.set(key, pollingTokenSet);\n\n      if (pollingTokenSet.size === 1) {\n        this._startPollingByNetworkClientId(networkClientId, options);\n      }\n\n      return pollToken;\n    }\n\n    stopAllPolling() {\n      this.#pollingTokenSets.forEach((tokenSet, _key) => {\n        tokenSet.forEach((token) => {\n          this.stopPollingByPollingToken(token);\n        });\n      });\n    }\n\n    stopPollingByPollingToken(pollingToken: string) {\n      if (!pollingToken) {\n        throw new Error('pollingToken required');\n      }\n\n      let keyToDelete: PollingTokenSetId | null = null;\n      for (const [key, tokenSet] of this.#pollingTokenSets) {\n        if (tokenSet.delete(pollingToken)) {\n          if (tokenSet.size === 0) {\n            keyToDelete = key;\n          }\n          break;\n        }\n      }\n\n      if (keyToDelete) {\n        this._stopPollingByPollingTokenSetId(keyToDelete);\n        this.#pollingTokenSets.delete(keyToDelete);\n        const callbacks = this.#callbacks.get(keyToDelete);\n        if (callbacks) {\n          for (const callback of callbacks) {\n            // eslint-disable-next-line n/callback-return\n            callback(keyToDelete);\n          }\n          callbacks.clear();\n        }\n      }\n    }\n\n    onPollingCompleteByNetworkClientId(\n      networkClientId: NetworkClientId,\n      callback: (networkClientId: NetworkClientId) => void,\n      options: Json = {},\n    ) {\n      const key = getKey(networkClientId, options);\n      const callbacks = this.#callbacks.get(key) ?? new Set<typeof callback>();\n      callbacks.add(callback);\n      this.#callbacks.set(key, callbacks);\n    }\n  }\n  return AbstractPollingControllerBase;\n}\n"]}