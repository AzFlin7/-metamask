{"version":3,"file":"desktop-manager.js","sourceRoot":"","sources":["../src/desktop-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { Duplex } from 'stream';\nimport PortStream from 'extension-port-stream';\nimport endOfStream from 'end-of-stream';\nimport log from './utils/log';\nimport { browser } from './browser';\nimport { cfg } from './utils/config';\nimport {\n  DesktopState,\n  TestConnectionResult,\n  ConnectionType,\n  PairingKeyStatus,\n} from './types';\nimport { BrowserWebSocket, WebSocketStream } from './web-socket-stream';\nimport { DuplexCopy } from './utils/stream';\nimport * as RawState from './utils/state';\nimport EncryptedWebSocketStream from './encryption/web-socket-stream';\nimport { timeoutPromise } from './utils/utils';\nimport { DESKTOP_HOOK_TYPES } from './constants';\nimport DesktopConnection from './desktop-connection';\n\nconst TIMEOUT_CONNECT = 10000;\n\nconst PAIRING_KEY_NOT_MATCH_ERROR_REASON = 'Desktop app is not recognized';\nconst PAIRING_KEY_NOT_MATCH_ERROR_CODE = 4000;\n\nclass DesktopManager {\n  private desktopConnection?: DesktopConnection;\n\n  private desktopState: DesktopState;\n\n  private extensionVersion?: string;\n\n  private transferredState = false;\n\n  public constructor() {\n    this.desktopState = {};\n  }\n\n  public async init(extensionVersion: string) {\n    this.extensionVersion = extensionVersion;\n  }\n\n  public setState(state: any) {\n    this.desktopState = state.DesktopController || {};\n  }\n\n  public async getConnection(): Promise<DesktopConnection | undefined> {\n    if (!this.desktopState.desktopEnabled) {\n      return undefined;\n    }\n\n    if (!this.desktopConnection) {\n      await this.createConnection();\n    }\n\n    return this.desktopConnection;\n  }\n\n  public isDesktopEnabled(): boolean {\n    return this.desktopState.desktopEnabled === true;\n  }\n\n  public async createStream(remotePort: any, connectionType: ConnectionType) {\n    const uiStream = new PortStream(remotePort as any) as any as Duplex;\n    uiStream.pause();\n    uiStream.on('data', (data) => this.onUIMessage(data, uiStream));\n\n    // Wrapping the original UI stream allows us to intercept messages required for error handling,\n    // while still pausing messages from the UI until we are connected to the desktop.\n    const uiInputStream = new DuplexCopy(uiStream);\n    uiInputStream.pause();\n\n    uiStream.resume();\n\n    endOfStream(uiStream, () => {\n      uiInputStream.destroy();\n    });\n\n    const desktopConnection = await this.getConnection();\n\n    await desktopConnection?.createStream(\n      remotePort,\n      connectionType,\n      uiInputStream,\n    );\n  }\n\n  public async testConnection(): Promise<TestConnectionResult> {\n    log.debug('Testing desktop connection');\n\n    try {\n      const connection =\n        this.desktopConnection || (await this.createConnection());\n\n      const versionCheckResult = await connection.checkVersions();\n\n      log.debug('Connection test completed');\n\n      return { isConnected: true, versionCheck: versionCheckResult };\n    } catch (error: any) {\n      let testConnectionResult: TestConnectionResult = { isConnected: false };\n      if (error?.message === PAIRING_KEY_NOT_MATCH_ERROR_REASON) {\n        testConnectionResult = {\n          ...testConnectionResult,\n          pairingKeyCheck: PairingKeyStatus.NO_MATCH,\n        };\n      }\n      log.debug('Connection test failed', error);\n      return testConnectionResult;\n    }\n  }\n\n  private async createConnection(): Promise<DesktopConnection> {\n    const webSocket = await this.createWebSocket();\n\n    const webSocketStream = cfg().webSocket.disableEncryption\n      ? new WebSocketStream(webSocket)\n      : new EncryptedWebSocketStream(webSocket);\n\n    try {\n      await webSocketStream.init({ startHandshake: true });\n    } catch (error) {\n      log.error('Failed to initialise web socket stream', error);\n      webSocket.close();\n      throw error;\n    }\n\n    const connection = new DesktopConnection(\n      webSocketStream,\n      this.extensionVersion as string,\n    );\n\n    webSocket.addEventListener('close', (event: CloseEvent) => {\n      this.onDisconnect(webSocket, webSocketStream, connection, event.code);\n    });\n\n    log.debug('Created web socket connection');\n\n    if (!cfg().skipOtpPairingFlow) {\n      log.debug('Desktop enabled, checking pairing key');\n\n      const pairingKeyStatus = await connection.checkPairingKey();\n      if ([PairingKeyStatus.NO_MATCH].includes(pairingKeyStatus)) {\n        log.error(\n          'The pairing key does not match, desktop app is not recognized',\n        );\n\n        webSocket.close(\n          PAIRING_KEY_NOT_MATCH_ERROR_CODE,\n          PAIRING_KEY_NOT_MATCH_ERROR_REASON,\n        );\n        throw new Error(PAIRING_KEY_NOT_MATCH_ERROR_REASON);\n      }\n\n      log.debug('Desktop app recognised');\n    }\n\n    if (!this.isDesktopEnabled()) {\n      this.desktopConnection = connection;\n      return connection;\n    }\n\n    connection.setPaired();\n    await this.transferState(connection);\n\n    this.desktopConnection = connection;\n\n    return connection;\n  }\n\n  private async onDisconnect(\n    webSocket: BrowserWebSocket,\n    stream: Duplex,\n    connection: DesktopConnection,\n    closeEventCode: number,\n  ) {\n    log.debug('Desktop connection disconnected');\n\n    stream.removeAllListeners();\n    stream.destroy();\n\n    webSocket.close();\n\n    connection.removeAllListeners();\n\n    if (connection === this.desktopConnection) {\n      this.desktopConnection = undefined;\n    }\n\n    // Emit event to extension UI to show connection lost error\n    // if close reason is not due \"Desktop app is not recognized\"\n    if (closeEventCode !== PAIRING_KEY_NOT_MATCH_ERROR_CODE) {\n      await browser?.runtime?.sendMessage?.({\n        type: DESKTOP_HOOK_TYPES.DISCONNECT,\n      });\n    }\n  }\n\n  private async onUIMessage(data: any, stream: Duplex) {\n    const method = data.data?.method;\n    const id = data.data?.id;\n\n    if (method === 'disableDesktopError') {\n      await this.disable();\n    }\n\n    if (method === 'getDesktopEnabled') {\n      stream.write({\n        name: data.name,\n        data: { jsonrpc: '2.0', result: true, id },\n      });\n    }\n  }\n\n  private async transferState(connection: DesktopConnection) {\n    if (this.transferredState) {\n      return;\n    }\n\n    if (!cfg().isExtensionTest) {\n      await connection.transferState();\n    }\n\n    this.transferredState = true;\n  }\n\n  private async disable() {\n    log.debug('Disabling desktop mode');\n\n    await RawState.setDesktopState({\n      desktopEnabled: false,\n      pairingKey: undefined,\n      pairingKeyHash: undefined,\n    });\n\n    browser.runtime.reload();\n  }\n\n  private async createWebSocket(): Promise<WebSocket> {\n    const waitForWebSocketOpen = new Promise<BrowserWebSocket>((resolve) => {\n      const webSocket = new WebSocket(`${cfg().webSocket.url}`);\n\n      webSocket.addEventListener('open', () => {\n        resolve(webSocket);\n      });\n    });\n\n    return timeoutPromise(waitForWebSocketOpen, TIMEOUT_CONNECT, {\n      errorMessage: 'Timeout connecting to web socket server',\n    });\n  }\n}\n\nexport default new DesktopManager();\n"]}