{"version":3,"file":"version-check.js","sourceRoot":"","sources":["../src/version-check.ts"],"names":[],"mappings":";;;;;;AACA,sDAA8B;AAO9B,2CAAqC;AACrC,2CAAgD;AAEhD,MAAa,YAAY;IAKvB,YAAY,MAAc,EAAE,gBAAwB;QAClD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,aAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAE/B,MAAM,oBAAoB,GAAG;YAC3B,OAAO,EAAE,IAAI,CAAC,gBAAgB;YAC9B,oBAAoB,EAAE,IAAA,YAAG,GAAE,CAAC,oBAAoB,CAAC,SAAS;SAC3D,CAAC;QAEF,MAAM,mBAAmB,GAA+B;YACtD,oBAAoB;SACrB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAEvC,MAAM,QAAQ,GAAG,MAAM,IAAA,uBAAc,EACnC,IAAI,CAAC,MAAM,CACZ,CAAC;QAEF,MAAM,uBAAuB,GAAG,QAAQ,CAAC,oBAAoB,CAAC;QAE9D,MAAM,qBAAqB,GAAG,IAAI,CAAC,yBAAyB,CAC1D,QAAQ,CAAC,kBAAkB,EAC3B,oBAAoB,CACrB,CAAC;QAEF,MAAM,gBAAgB,GAAG,oBAAoB,CAAC,OAAO,CAAC;QACtD,MAAM,cAAc,GAAG,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC;QAE3D,MAAM,MAAM,GAAuB;YACjC,gBAAgB;YAChB,cAAc;YACd,uBAAuB;YACvB,qBAAqB;SACtB,CAAC;QAEF,aAAG,CAAC,KAAK,CAAC,yBAAyB,EAAE,MAAM,CAAC,CAAC;QAE7C,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,yBAAyB,CAC/B,kBAA+B,EAC/B,oBAAiC;QAEjC,OAAO,CACL,kBAAkB,CAAC,oBAAoB;YACvC,oBAAoB,CAAC,oBAAoB,CAC1C,CAAC;IACJ,CAAC;CACF;AA3DD,oCA2DC","sourcesContent":["import { Duplex } from 'stream';\nimport log from './utils/log';\nimport {\n  CheckVersionRequestMessage,\n  CheckVersionResponseMessage,\n  VersionCheckResult,\n  VersionData,\n} from './types';\nimport { cfg } from './utils/config';\nimport { waitForMessage } from './utils/stream';\n\nexport class VersionCheck {\n  private stream: Duplex;\n\n  private extensionVersion: string;\n\n  constructor(stream: Duplex, extensionVersion: string) {\n    this.stream = stream;\n    this.extensionVersion = extensionVersion;\n  }\n\n  public async check(): Promise<VersionCheckResult> {\n    log.debug('Checking versions');\n\n    const extensionVersionData = {\n      version: this.extensionVersion,\n      compatibilityVersion: cfg().compatibilityVersion.extension,\n    };\n\n    const checkVersionRequest: CheckVersionRequestMessage = {\n      extensionVersionData,\n    };\n\n    this.stream.write(checkVersionRequest);\n\n    const response = await waitForMessage<CheckVersionResponseMessage>(\n      this.stream,\n    );\n\n    const isExtensionVersionValid = response.isExtensionSupported;\n\n    const isDesktopVersionValid = this.isDesktopVersionSupported(\n      response.desktopVersionData,\n      extensionVersionData,\n    );\n\n    const extensionVersion = extensionVersionData.version;\n    const desktopVersion = response.desktopVersionData.version;\n\n    const result: VersionCheckResult = {\n      extensionVersion,\n      desktopVersion,\n      isExtensionVersionValid,\n      isDesktopVersionValid,\n    };\n\n    log.debug('Completed version check', result);\n\n    return result;\n  }\n\n  private isDesktopVersionSupported(\n    desktopVersionData: VersionData,\n    extensionVersionData: VersionData,\n  ): boolean {\n    return (\n      desktopVersionData.compatibilityVersion >=\n      extensionVersionData.compatibilityVersion\n    );\n  }\n}\n"]}