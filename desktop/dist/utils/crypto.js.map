{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../src/utils/crypto.ts"],"names":[],"mappings":";;;AAAO,MAAM,SAAS,GAAG,GAAW,EAAE;IACpC,MAAM,MAAM,GACV,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACxE,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7C,CAAC,CAAC;AAJW,QAAA,SAAS,aAIpB;AAEK,MAAM,UAAU,GAAG,KAAK,EAC7B,UAAkB,EAClB,EAAE,KAAK,GAAG,KAAK,EAAE,GAAG,EAAE,EACtB,EAAE;IACF,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;IACxC,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAErD,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CACvD,SAAS,EACT,UAAU,CACX,CAAC;IAEF,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAEhD,OAAO,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC,CAAC;AAfW,QAAA,UAAU,cAerB","sourcesContent":["export const randomHex = (): string => {\n  const random =\n    global.crypto?.getRandomValues(new Uint8Array(12)) || Buffer.from([]);\n  return Buffer.from(random).toString('hex');\n};\n\nexport const hashString = async (\n  dataString: string,\n  { isHex = false } = {},\n) => {\n  const encoding = isHex ? 'hex' : 'utf8';\n  const dataBuffer = Buffer.from(dataString, encoding);\n\n  const hashArrayBuffer = await global.crypto.subtle.digest(\n    'SHA-512',\n    dataBuffer,\n  );\n\n  const hashBuffer = Buffer.from(hashArrayBuffer);\n\n  return hashBuffer.toString('hex');\n};\n"]}