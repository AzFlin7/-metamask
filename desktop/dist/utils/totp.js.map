{"version":3,"file":"totp.js","sourceRoot":"","sources":["../../src/utils/totp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAmC;AACnC,qCAAqC;AAExB,QAAA,qCAAqC,GAAG,CAAC,CAAC;AACvD,MAAM,IAAI;IAKR;QAIO,aAAQ,GAAG,GAAW,EAAE;YAC7B,gBAAgB;YAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QAClC,CAAC,CAAC;QAEK,aAAQ,GAAG,CAAC,KAAa,EAAW,EAAE;YAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBACpC,KAAK;gBACL,MAAM,EAAE,CAAC;aACV,CAAC,CAAC;YAEH,4BAA4B;YAC5B,IAAI,CAAC,uBAAuB,IAAI,CAAC,CAAC;YAClC,IAAI,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAE;gBACpE,IAAI,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;aACpC;YAED,OAAO,MAAM,KAAK,IAAI,CAAC;QACzB,CAAC,CAAC;QAEM,kCAA6B,GAAG,CAAC,OAAe,EAAW,EAAE;YACnE,OAAO,OAAO,IAAI,6CAAqC,CAAC;QAC1D,CAAC,CAAC;QAEM,yBAAoB,GAAG,GAAG,EAAE;YAClC,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;QACnC,CAAC,CAAC;QAEM,SAAI,GAAG,CAAC,IAAgC,EAAE,EAAE;YAClD,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,aAAa,EAAE;gBACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC;oBAC/B,MAAM,EAAE,IAAI;oBACZ,KAAK,EAAE,UAAU;oBACjB,SAAS,EAAE,MAAM;oBACjB,MAAM,EAAE,CAAC;oBACT,MAAM,EAAE,EAAE;oBACV,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAA,kBAAS,GAAE,CAAC;iBAC5C,CAAC,CAAC;gBAEH,gBAAgB;gBAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAC7B;QACH,CAAC,CAAC;QA/CA,IAAI,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;IACtC,CAAC;;AAJc,4BAAuB,GAAG,CAAC,CAAC;AAqD7C,kBAAe,IAAI,IAAI,EAAE,CAAC","sourcesContent":["import * as OTPAuth from 'otpauth';\nimport { randomHex } from './crypto';\n\nexport const MAX_TOTP_VALIDATE_RETRY_IN_30_SECONDS = 5;\nclass TOTP {\n  private static instance: OTPAuth.TOTP;\n\n  private static validateAttemptsCounter = 0;\n\n  constructor() {\n    this.init({ resetInstance: false });\n  }\n\n  public generate = (): string => {\n    // reset counter\n    this.resetAttemptsCounter();\n    return TOTP.instance.generate();\n  };\n\n  public validate = (token: string): boolean => {\n    const result = TOTP.instance.validate({\n      token,\n      window: 1,\n    });\n\n    // Increase attempts counter\n    TOTP.validateAttemptsCounter += 1;\n    if (this.hasReachedMaxValidateAttempts(TOTP.validateAttemptsCounter)) {\n      this.init({ resetInstance: true });\n    }\n\n    return result !== null;\n  };\n\n  private hasReachedMaxValidateAttempts = (counter: number): boolean => {\n    return counter >= MAX_TOTP_VALIDATE_RETRY_IN_30_SECONDS;\n  };\n\n  private resetAttemptsCounter = () => {\n    TOTP.validateAttemptsCounter = 0;\n  };\n\n  private init = (opts: { resetInstance: boolean }) => {\n    const { resetInstance } = opts;\n    if (!TOTP.instance || resetInstance) {\n      TOTP.instance = new OTPAuth.TOTP({\n        issuer: 'MM',\n        label: 'MetaMask',\n        algorithm: 'SHA1',\n        digits: 6,\n        period: 30,\n        secret: OTPAuth.Secret.fromHex(randomHex()),\n      });\n\n      // reset counter\n      this.resetAttemptsCounter();\n    }\n  };\n}\n\nexport default new TOTP();\n"]}