{"version":3,"file":"browser-proxy.js","sourceRoot":"","sources":["../../src/browser/browser-proxy.ts"],"names":[],"mappings":";;;;;;AACA,uDAA+B;AAE/B,wBAA4B;AAE5B,IAAI,cAAsB,CAAC;AAE3B,MAAM,gBAAgB,GAAG,KAAK,EAC5B,GAAa,EACmC,EAAE;IAClD,IAAI,MAAM,GAAG,UAAc,CAAC;IAC5B,MAAM,YAAY,GAChB,CAAC,MAAM,UAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC,EAAE,gBAAgB,KAAK,CAAC,CAAC;IAElE,KAAK,IAAI,OAAO,IAAI,GAAG,EAAE;QACvB,iDAAiD;QACjD,IAAI,YAAY,EAAE;YAChB,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;SACtD;QACD,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;QAEzB,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,SAAS,CAAC;SAClB;KACF;IAED,OAAO,MAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,KAAK,EAAE,IAAyB,EAAE,EAAE;IAC3D,aAAG,CAAC,KAAK,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;IAE5C,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAEhD,IAAI,CAAC,MAAM,EAAE;QACX,aAAG,CAAC,KAAK,CAAC,gCAAgC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChE,OAAO;KACR;IAED,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,QAAQ,GAAyB,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC;IAE/D,aAAG,CAAC,KAAK,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC;IAEhD,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;AAClC,CAAC,CAAC;AAEK,MAAM,sBAAsB,GAAG,CAAC,MAAc,EAAE,EAAE;IACvD,cAAc,GAAG,MAAM,CAAC;IACxB,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAyB,EAAE,EAAE,CACtD,gBAAgB,CAAC,IAAI,CAAC,CACvB,CAAC;AACJ,CAAC,CAAC;AALW,QAAA,sBAAsB,0BAKjC","sourcesContent":["import { Duplex } from 'stream';\nimport log from '../utils/log';\nimport { BrowserProxyRequest, BrowserProxyResponse } from '../types/browser';\nimport { browser } from '.';\n\nlet responseStream: Duplex;\n\nconst getBrowserMethod = async (\n  key: string[],\n): Promise<((...args: any[]) => any) | undefined> => {\n  let method = browser as any;\n  const isManifestV3 =\n    (await browser?.runtime?.getManifest())?.manifest_version === 3;\n\n  for (let keyPart of key) {\n    // replace browserAction to action to support MV3\n    if (isManifestV3) {\n      keyPart = keyPart.replace('browserAction', 'action');\n    }\n    method = method[keyPart];\n\n    if (!method) {\n      return undefined;\n    }\n  }\n\n  return method as any;\n};\n\nconst onBrowserRequest = async (data: BrowserProxyRequest) => {\n  log.debug('Received browser request', data);\n\n  const method = await getBrowserMethod(data.key);\n\n  if (!method) {\n    log.error(`Cannot find browser method - ${data.key.join('.')}`);\n    return;\n  }\n\n  const result = await method(...data.args);\n  const response: BrowserProxyResponse = { id: data.id, result };\n\n  log.debug('Sending browser response', response);\n\n  responseStream?.write(response);\n};\n\nexport const registerResponseStream = (stream: Duplex) => {\n  responseStream = stream;\n  responseStream.on('data', (data: BrowserProxyRequest) =>\n    onBrowserRequest(data),\n  );\n};\n"]}