{"version":3,"file":"symmetric.js","sourceRoot":"","sources":["../../src/encryption/symmetric.ts"],"names":[],"mappings":";;;AAAA,MAAM,SAAS,GAAG,SAAS,CAAC;AAC5B,MAAM,UAAU,GAAG,GAAG,CAAC;AACvB,MAAM,UAAU,GAAG,KAAK,CAAC;AACzB,MAAM,UAAU,GAAe,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAEtD,MAAM,cAAc,GAAG,KAAK,EAAE,QAAkB,EAAsB,EAAE;IACtE,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAE5C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAC9C,UAAU,EACV,SAAS,EACT,EAAE,IAAI,EAAE,SAAS,EAAE,EACnB,KAAK,EACL,UAAU,CACX,CAAC;IAEF,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEK,MAAM,SAAS,GAAG,KAAK,IAAuB,EAAE;IACrD,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAChD;QACE,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,UAAU;KACnB,EACD,IAAI,EACJ,UAAU,CACX,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;IACxE,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;IAEvD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAdW,QAAA,SAAS,aAcpB;AAEK,MAAM,OAAO,GAAG,KAAK,EAAE,IAAY,EAAE,QAAkB,EAAE,EAAE;IAChE,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,MAAM,GAAG,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC3C,MAAM,UAAU,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAElD,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAClD,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,EACvB,GAAG,EACH,UAAU,CACX,CAAC;IAEF,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;IAC7D,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAE/B,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC;AAC/C,CAAC,CAAC;AAfW,QAAA,OAAO,WAelB;AAEK,MAAM,OAAO,GAAG,KAAK,EAC1B,SAAmB,EACnB,QAAkB,EAClB,OAAiB,EACA,EAAE;IACnB,MAAM,GAAG,GAAG,MAAM,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC3C,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACxC,MAAM,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEpC,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAClD,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,EACvB,GAAG,EACH,IAAI,CACL,CAAC;IAEF,MAAM,eAAe,GAAG,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAE5D,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAlBW,QAAA,OAAO,WAkBlB","sourcesContent":["const ALGORITHM = 'AES-GCM';\nconst KEY_LENGTH = 256;\nconst KEY_FORMAT = 'raw';\nconst KEY_USAGES: KeyUsage[] = ['encrypt', 'decrypt'];\n\nconst deserializeKey = async (keyBytes: number[]): Promise<CryptoKey> => {\n  const keyBuffer = Uint8Array.from(keyBytes);\n\n  const key = await global.crypto.subtle.importKey(\n    KEY_FORMAT,\n    keyBuffer,\n    { name: ALGORITHM },\n    false,\n    KEY_USAGES,\n  );\n\n  return key;\n};\n\nexport const createKey = async (): Promise<number[]> => {\n  const key = await global.crypto.subtle.generateKey(\n    {\n      name: ALGORITHM,\n      length: KEY_LENGTH,\n    },\n    true,\n    KEY_USAGES,\n  );\n\n  const keyBuffer = await global.crypto.subtle.exportKey(KEY_FORMAT, key);\n  const keyBytes = Array.from(new Uint8Array(keyBuffer));\n\n  return keyBytes;\n};\n\nexport const encrypt = async (data: string, keyBytes: number[]) => {\n  const iv = global.crypto.getRandomValues(new Uint8Array(12));\n  const key = await deserializeKey(keyBytes);\n  const dataBuffer = new TextEncoder().encode(data);\n\n  const encrypted = await global.crypto.subtle.encrypt(\n    { name: ALGORITHM, iv },\n    key,\n    dataBuffer,\n  );\n\n  const encryptedBytes = Array.from(new Uint8Array(encrypted));\n  const ivBytes = Array.from(iv);\n\n  return { data: encryptedBytes, iv: ivBytes };\n};\n\nexport const decrypt = async (\n  dataBytes: number[],\n  keyBytes: number[],\n  ivBytes: number[],\n): Promise<string> => {\n  const key = await deserializeKey(keyBytes);\n  const data = Uint8Array.from(dataBytes);\n  const iv = Uint8Array.from(ivBytes);\n\n  const decrypted = await global.crypto.subtle.decrypt(\n    { name: ALGORITHM, iv },\n    key,\n    data,\n  );\n\n  const decryptedString = new TextDecoder().decode(decrypted);\n\n  return decryptedString;\n};\n"]}