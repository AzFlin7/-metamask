{"version":3,"file":"web-socket-stream.js","sourceRoot":"","sources":["../../src/encryption/web-socket-stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { Duplex } from 'stream';\nimport log from '../utils/log';\nimport {\n  MESSAGE_HANDSHAKE_FINISH,\n  MESSAGE_HANDSHAKE_START,\n} from '../constants';\nimport {\n  BrowserWebSocket,\n  NodeWebSocket,\n  WebSocketStream,\n} from '../web-socket-stream';\nimport { waitForMessage } from '../utils/stream';\nimport { flattenMessage, timeoutPromise } from '../utils/utils';\nimport * as asymmetricEncryption from './asymmetric';\nimport * as symmetricEncryption from './symmetric';\n\nconst HANDSHAKE_RESEND_INTERVAL = 1000;\nconst HANDSHAKE_TIMEOUT = 10000;\n\nenum HandshakeMode {\n  START,\n  WAIT,\n  RECEIVED,\n}\n\nexport default class EncryptedWebSocketStream extends Duplex {\n  private webSocket: BrowserWebSocket | NodeWebSocket;\n\n  private webSocketStream?: WebSocketStream;\n\n  private asymmetricKeyPair?: asymmetricEncryption.KeyPair;\n\n  private symmetricKey?: number[];\n\n  private targetPublicKey?: string;\n\n  private targetSymmetricKey?: number[];\n\n  private performingHandshake: boolean;\n\n  private resendInterval: any;\n\n  constructor(webSocket: BrowserWebSocket | NodeWebSocket) {\n    super({ objectMode: true });\n\n    this.webSocket = webSocket;\n    this.performingHandshake = true;\n  }\n\n  async init({ startHandshake }: { startHandshake: boolean }) {\n    this.webSocketStream = new WebSocketStream(this.webSocket);\n    this.webSocketStream.on('data', (data) => this.onMessage(data));\n\n    this.asymmetricKeyPair = asymmetricEncryption.createKeyPair();\n    this.symmetricKey = await symmetricEncryption.createKey();\n\n    await timeoutPromise(\n      this.handshake(startHandshake ? HandshakeMode.START : HandshakeMode.WAIT),\n      HANDSHAKE_TIMEOUT,\n      {\n        errorMessage: 'Encryption handshake timed out',\n        cleanUp: () => {\n          if (this.resendInterval) {\n            clearInterval(this.resendInterval);\n          }\n        },\n      },\n    );\n  }\n\n  public _read() {\n    return undefined;\n  }\n\n  public async _write(msg: any, _: string | undefined, cb: () => void) {\n    await this.writeSymmetric(msg, cb);\n  }\n\n  private async onMessage(data: any) {\n    if (this.performingHandshake) {\n      return;\n    }\n\n    if (data === MESSAGE_HANDSHAKE_START) {\n      await this.handshake(HandshakeMode.RECEIVED);\n      return;\n    }\n\n    const decryptedData = await this.decryptSymmetric(data);\n    this.push(decryptedData);\n  }\n\n  private async handshake(mode: HandshakeMode) {\n    log.debug('Starting handshake');\n\n    this.cork();\n    this.pause();\n\n    this.performingHandshake = true;\n    this.targetPublicKey = undefined;\n    this.targetSymmetricKey = undefined;\n\n    const sendFirst = mode === HandshakeMode.START;\n\n    await this.handshakeStep(\n      () => {\n        this.writeRaw(MESSAGE_HANDSHAKE_START);\n      },\n      async (data: any) =>\n        data === MESSAGE_HANDSHAKE_START ? data : undefined,\n      sendFirst,\n      mode === HandshakeMode.RECEIVED,\n    );\n\n    log.debug('Received handshake');\n\n    this.targetPublicKey = await this.handshakeStep(\n      () => {\n        this.writeRaw({ publicKey: this.asymmetricKeyPair?.publicKey });\n      },\n      async (data: any) => data.publicKey,\n      sendFirst,\n    );\n\n    log.debug('Received public key', this.targetPublicKey);\n\n    this.targetSymmetricKey = await this.handshakeStep(\n      () => {\n        this.writeAsymmetric({ symmetricKey: this.symmetricKey });\n      },\n      async (data) => {\n        const decryptedData = this.decryptAsymmetric(data);\n        return decryptedData?.symmetricKey;\n      },\n      sendFirst,\n    );\n\n    log.debug('Received symmetric key', this.targetSymmetricKey);\n\n    await this.handshakeStep(\n      () => {\n        this.writeSymmetric(MESSAGE_HANDSHAKE_FINISH);\n      },\n      async (data) => {\n        const decryptedData = await this.decryptSymmetric(data);\n        return decryptedData === MESSAGE_HANDSHAKE_FINISH ? {} : undefined;\n      },\n      sendFirst,\n    );\n\n    log.debug('Completed handshake');\n\n    this.uncork();\n    this.resume();\n\n    this.performingHandshake = false;\n  }\n\n  private previousSendSecond: (() => void) | undefined;\n\n  private async handshakeStep(\n    send: () => void,\n    responseFilter: (data: any) => Promise<any>,\n    sendFirst: boolean,\n    writeOnly = false,\n  ): Promise<any> {\n    if (sendFirst) {\n      send();\n    }\n\n    let data;\n\n    if (!writeOnly) {\n      this.resendInterval = setInterval(() => {\n        if (sendFirst) {\n          send();\n        } else {\n          this.previousSendSecond?.();\n        }\n      }, HANDSHAKE_RESEND_INTERVAL);\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      data = await waitForMessage(this.webSocketStream!, responseFilter, {\n        returnFilterOutput: true,\n      });\n\n      clearInterval(this.resendInterval);\n      this.resendInterval = undefined;\n    }\n\n    if (!sendFirst) {\n      this.previousSendSecond = send;\n      send();\n    }\n\n    return data;\n  }\n\n  private async decryptSymmetric(data: any): Promise<any> {\n    if (!this.targetSymmetricKey) {\n      log.error('Target symmetric key not set');\n      return undefined;\n    }\n\n    let decryptedData;\n\n    try {\n      decryptedData = await symmetricEncryption.decrypt(\n        data.data,\n        this.targetSymmetricKey,\n        data.iv,\n      );\n    } catch (error) {\n      log.debug(\n        'Failed to decrypt symmetric encrypted web socket message',\n        error,\n      );\n      return undefined;\n    }\n\n    try {\n      decryptedData = JSON.parse(decryptedData);\n    } catch {\n      // Ignore as data is not a serialised object\n    }\n\n    log.debug(\n      'Decrypted symmetric encrypted web socket message',\n      flattenMessage(decryptedData),\n    );\n\n    return decryptedData;\n  }\n\n  private decryptAsymmetric(data: string): any {\n    if (!this.asymmetricKeyPair) {\n      log.error('Key pair not created');\n      return undefined;\n    }\n\n    let decryptedData;\n\n    try {\n      decryptedData = asymmetricEncryption.decrypt(\n        data,\n        this.asymmetricKeyPair.privateKey,\n      );\n    } catch (error) {\n      log.debug('Failed to decrypt asymmetric encrypted web socket message', {\n        error,\n        data,\n      });\n      return undefined;\n    }\n\n    try {\n      decryptedData = JSON.parse(decryptedData);\n    } catch {\n      // Ignore as data is not a serialised object\n    }\n\n    log.debug(\n      'Decrypted asymmetric encrypted web socket message',\n      flattenMessage(decryptedData),\n    );\n\n    return decryptedData;\n  }\n\n  private async writeSymmetric(data: string | object, cb?: () => void) {\n    if (!this.symmetricKey) {\n      log.error('Symmetric key not created');\n      return;\n    }\n\n    const rawData = typeof data === 'string' ? data : JSON.stringify(data);\n\n    const encrypted = await symmetricEncryption.encrypt(\n      rawData,\n      this.symmetricKey,\n    );\n\n    log.debug('Sending symmetric encrypted message to web socket');\n\n    this.writeRaw(encrypted, cb);\n  }\n\n  private writeAsymmetric(data: string | object, cb?: () => void) {\n    if (!this.targetPublicKey) {\n      log.error('Target public key not set');\n      return;\n    }\n\n    const rawData = typeof data === 'string' ? data : JSON.stringify(data);\n\n    const encrypted = asymmetricEncryption.encrypt(\n      rawData,\n      this.targetPublicKey,\n    );\n\n    log.debug('Sending asymmetric encrypted message to web socket');\n\n    this.writeRaw(encrypted, cb);\n  }\n\n  private writeRaw(rawData: string | object, cb: () => void = () => undefined) {\n    if (!this.webSocketStream) {\n      log.error('Web socket stream not initialised');\n      return;\n    }\n\n    this.webSocketStream.write(rawData, undefined, cb);\n  }\n}\n"]}