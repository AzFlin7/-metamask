{"version":3,"file":"pairing.js","sourceRoot":"","sources":["../src/pairing.ts"],"names":[],"mappings":"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","sourcesContent":["import { Duplex } from 'stream';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport ObjectMultiplex from 'obj-multiplex';\nimport log from './utils/log';\nimport {\n  addDataListener,\n  waitForAcknowledge,\n  waitForMessage,\n} from './utils/stream';\nimport TOTP from './utils/totp';\nimport { createKey } from './encryption/symmetric';\nimport { hashString } from './utils/crypto';\nimport {\n  PairingKeyRequestMessage,\n  PairingKeyResponseMessage,\n  PairingKeyStatus,\n  PairingRequestMessage,\n  PairingResultMessage,\n} from './types';\nimport * as rawState from './utils/state';\nimport { browser } from './browser';\n\nexport class Pairing {\n  private requestStream: Duplex;\n\n  private keyStream: Duplex;\n\n  private transferState: () => Promise<void>;\n\n  constructor(stream: Duplex, transferState: () => Promise<void>) {\n    const streams = this.createStreams(stream);\n\n    this.requestStream = streams.requestStream;\n    this.keyStream = streams.keyStream;\n    this.transferState = transferState;\n  }\n\n  public static generateOTP(): string {\n    const value = TOTP.generate() as string;\n    log.debug('Generated OTP', value);\n    return value;\n  }\n\n  public init() {\n    addDataListener(this.requestStream, (data: any) => {\n      this.onRequestMessage(data);\n    });\n\n    return this;\n  }\n\n  public async checkPairingKeyMatch(): Promise<PairingKeyStatus> {\n    log.debug('Validating pairing key');\n\n    const requestPairingKey: PairingKeyRequestMessage = {\n      isRequestPairingKey: true,\n    };\n\n    this.keyStream.write(requestPairingKey);\n\n    // Wait for desktop pairing key\n    const response = await waitForMessage<PairingKeyResponseMessage>(\n      this.keyStream,\n    );\n\n    const desktopPairingKey = response.pairingKey;\n\n    if (!desktopPairingKey) {\n      log.debug('Desktop has no pairing key');\n      return PairingKeyStatus.MISSING;\n    }\n\n    const desktopPairingKeyHash = await hashString(desktopPairingKey, {\n      isHex: true,\n    });\n\n    const extensionPairingKeyHash = (await rawState.getDesktopState())\n      .pairingKeyHash;\n\n    const isMatch = extensionPairingKeyHash === desktopPairingKeyHash;\n\n    log.debug('Completed pairing key check', isMatch);\n\n    if (isMatch) {\n      return PairingKeyStatus.MATCH;\n    }\n    return PairingKeyStatus.NO_MATCH;\n  }\n\n  private async onRequestMessage(pairingRequest: PairingRequestMessage) {\n    log.debug('Received pairing request message', pairingRequest);\n\n    const isValidOTP = TOTP.validate(pairingRequest.otp);\n\n    if (!isValidOTP) {\n      log.debug('Received invalid OTP');\n\n      const pairingResultMessage: PairingResultMessage = {\n        isDesktopEnabled: false,\n      };\n\n      this.requestStream.write(pairingResultMessage);\n      return;\n    }\n\n    const pairingKey = Buffer.from(await createKey()).toString('hex');\n    const pairingKeyHash = await hashString(pairingKey, { isHex: true });\n\n    await rawState.setDesktopState({\n      desktopEnabled: true,\n      pairingKeyHash,\n    });\n\n    const pairingResultMessage: PairingResultMessage = {\n      isDesktopEnabled: true,\n      pairingKey,\n    };\n\n    this.requestStream.write(pairingResultMessage);\n\n    await waitForAcknowledge(this.requestStream);\n\n    log.debug('Saved pairing key', { pairingKey, pairingKeyHash });\n\n    await this.transferState();\n\n    browser.runtime.reload();\n\n    log.debug('Paired with desktop');\n  }\n\n  private createStreams(stream: Duplex) {\n    const multiplex = new ObjectMultiplex();\n    const requestStream = multiplex.createStream('request');\n    const keyStream = multiplex.createStream('key');\n\n    stream.pipe(multiplex).pipe(stream);\n\n    return { requestStream, keyStream };\n  }\n}\n"]}