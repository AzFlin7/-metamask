{"version":3,"file":"web-socket-stream.js","sourceRoot":"","sources":["../src/web-socket-stream.ts"],"names":[],"mappings":";;;;;;AAAA,mCAAgC;AAEhC,sDAA8B;AAC9B,yCAA+C;AAE/C,MAAM,2BAA2B,GAAG,GAAG,CAAC;AACxC,MAAM,0BAA0B,GAAG,IAAI,CAAC;AAKxC,MAAa,eAAgB,SAAQ,eAAM;IAKzC,YAAY,SAA2C;QACrD,KAAK,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAE5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,CAAE,IAAI,CAAC,SAAiB,CAAC,EAAE,CAAC;QAE7C,IAAI,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,SAA8B,CAAC,gBAAgB,CACnD,SAAS,EACT,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CACtC,CAAC;SACH;aAAM;YACJ,IAAI,CAAC,SAA2B,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE,CAC1D,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CACxB,CAAC;SACH;IACH,CAAC;IAEM,IAAI;QACT,+EAA+E;IACjF,CAAC;IAEM,KAAK;QACV,OAAO,SAAS,CAAC;IACnB,CAAC;IAEM,KAAK,CAAC,MAAM,CAAC,GAAQ,EAAE,CAAS,EAAE,EAAc;QACrD,aAAG,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QAE3C,MAAM,OAAO,GAAG,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAEpE,IAAI;YACF,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACnD;QAAC,OAAO,KAAK,EAAE;YACd,aAAG,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;YAC3D,EAAE,EAAE,CAAC;YACL,OAAO;SACR;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,EAAE,EAAE,CAAC;IACP,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,OAAY;QAClC,IAAI,IAAI,GAAG,OAAO,CAAC;QAEnB,IAAI;YACF,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACzB;QAAC,MAAM;YACN,4CAA4C;SAC7C;QAED,aAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAEzC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAClC,MAAwC;QAExC,IAAI,QAAa,CAAC;QAElB,OAAO,IAAA,sBAAc,EACnB,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;YAC5B,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,KAAK,CAAC,CAAC;YAE9C,IAAI,OAAO,EAAE,EAAE;gBACb,OAAO,EAAE,CAAC;gBACV,OAAO;aACR;YAED,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;gBAC1B,IAAI,OAAO,EAAE,EAAE;oBACb,aAAa,CAAC,QAAQ,CAAC,CAAC;oBACxB,OAAO,EAAE,CAAC;iBACX;YACH,CAAC,EAAE,2BAA2B,CAAC,CAAC;QAClC,CAAC,CAAC,EACF,0BAA0B,EAC1B;YACE,OAAO,EAAE,GAAG,EAAE;gBACZ,IAAI,QAAQ,EAAE;oBACZ,aAAa,CAAC,QAAQ,CAAC,CAAC;iBACzB;YACH,CAAC;SACF,CACF,CAAC;IACJ,CAAC;CACF;AA7FD,0CA6FC","sourcesContent":["import { Duplex } from 'stream';\nimport { WebSocket as WSWebSocket } from 'ws';\nimport log from './utils/log';\nimport { timeoutPromise } from './utils/utils';\n\nconst INTERVAL_WAIT_FOR_CONNECTED = 500;\nconst TIMEOUT_WAIT_FOR_CONNECTED = 3000;\n\nexport type BrowserWebSocket = WebSocket;\nexport type NodeWebSocket = WSWebSocket;\n\nexport class WebSocketStream extends Duplex {\n  private webSocket: BrowserWebSocket | NodeWebSocket;\n\n  private isBrowser: boolean;\n\n  constructor(webSocket: BrowserWebSocket | NodeWebSocket) {\n    super({ objectMode: true });\n\n    this.webSocket = webSocket;\n    this.isBrowser = !(this.webSocket as any).on;\n\n    if (this.isBrowser) {\n      (this.webSocket as BrowserWebSocket).addEventListener(\n        'message',\n        (event) => this.onMessage(event.data),\n      );\n    } else {\n      (this.webSocket as NodeWebSocket).on('message', (message) =>\n        this.onMessage(message),\n      );\n    }\n  }\n\n  public init() {\n    // For consistency with EncryptedWebSocketStream to avoid further code branches\n  }\n\n  public _read() {\n    return undefined;\n  }\n\n  public async _write(msg: any, _: string, cb: () => void) {\n    log.debug('Sending message to web socket');\n\n    const rawData = typeof msg === 'string' ? msg : JSON.stringify(msg);\n\n    try {\n      await this.waitForSocketConnected(this.webSocket);\n    } catch (error) {\n      log.error('Timeout waiting for web socket to be writable');\n      cb();\n      return;\n    }\n\n    this.webSocket.send(rawData);\n    cb();\n  }\n\n  private async onMessage(rawData: any) {\n    let data = rawData;\n\n    try {\n      data = JSON.parse(data);\n    } catch {\n      // Ignore as data is not a serialised object\n    }\n\n    log.debug('Received web socket message');\n\n    this.push(data);\n  }\n\n  private async waitForSocketConnected(\n    socket: BrowserWebSocket | NodeWebSocket,\n  ): Promise<void> {\n    let interval: any;\n\n    return timeoutPromise(\n      new Promise<void>((resolve) => {\n        const isReady = () => socket.readyState === 1;\n\n        if (isReady()) {\n          resolve();\n          return;\n        }\n\n        interval = setInterval(() => {\n          if (isReady()) {\n            clearInterval(interval);\n            resolve();\n          }\n        }, INTERVAL_WAIT_FOR_CONNECTED);\n      }),\n      TIMEOUT_WAIT_FOR_CONNECTED,\n      {\n        cleanUp: () => {\n          if (interval) {\n            clearInterval(interval);\n          }\n        },\n      },\n    );\n  }\n}\n"]}