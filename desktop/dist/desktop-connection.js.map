{"version":3,"file":"desktop-connection.js","sourceRoot":"","sources":["../src/desktop-connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { Duplex, Readable } from 'stream';\nimport EventEmitter from 'events';\nimport endOfStream from 'end-of-stream';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport ObjectMultiplex from 'obj-multiplex';\nimport log from './utils/log';\nimport { Pairing } from './pairing';\nimport { VersionCheck } from './version-check';\nimport { uuid } from './utils/utils';\nimport {\n  acknowledge,\n  addDataListener,\n  waitForAcknowledge,\n} from './utils/stream';\nimport {\n  addPairingKeyToRawState,\n  getAndUpdateDesktopState,\n  removePairingKeyFromRawState,\n  setDesktopState,\n  setRawState,\n} from './utils/state';\nimport {\n  ConnectionType,\n  RemotePortData,\n  ClientId,\n  RawState,\n  VersionCheckResult,\n  RemotePort,\n  PairingKeyStatus,\n} from './types';\nimport {\n  CLIENT_ID_BROWSER_CONTROLLER,\n  CLIENT_ID_END_CONNECTION,\n  CLIENT_ID_NEW_CONNECTION,\n  CLIENT_ID_STATE,\n  CLIENT_ID_DISABLE,\n  CLIENT_ID_VERSION,\n  CLIENT_ID_PAIRING,\n} from './constants';\nimport { browser, registerResponseStream } from './browser';\n\nexport default class DesktopConnection extends EventEmitter {\n  private stream: Duplex;\n\n  private multiplex: ObjectMultiplex;\n\n  private newConnectionStream: Duplex;\n\n  private endConnectionStream: Duplex;\n\n  private stateStream: Duplex;\n\n  private disableStream: Duplex;\n\n  private browserControllerStream: Duplex;\n\n  private versionCheck: VersionCheck;\n\n  private extensionPairing: Pairing;\n\n  private extensionVersion: string;\n\n  private paired = false;\n\n  public constructor(stream: Duplex, extensionVersion: string) {\n    super();\n\n    this.stream = stream;\n    this.extensionVersion = extensionVersion;\n    this.multiplex = new ObjectMultiplex();\n\n    this.newConnectionStream = this.multiplex.createStream(\n      CLIENT_ID_NEW_CONNECTION,\n    );\n\n    this.endConnectionStream = this.multiplex.createStream(\n      CLIENT_ID_END_CONNECTION,\n    );\n\n    this.stateStream = this.multiplex.createStream(CLIENT_ID_STATE);\n    this.addPairedOnlyDataListener(this.stateStream, (data: RawState) => {\n      this.onDesktopState(data);\n    });\n\n    this.disableStream = this.multiplex.createStream(CLIENT_ID_DISABLE);\n    this.addPairedOnlyDataListener(this.disableStream, (data: RawState) =>\n      this.onDisable(data),\n    );\n\n    const pairingStream = this.multiplex.createStream(CLIENT_ID_PAIRING);\n    this.extensionPairing = new Pairing(pairingStream, () =>\n      this.transferState(),\n    ).init();\n\n    const versionStream = this.multiplex.createStream(CLIENT_ID_VERSION);\n    this.versionCheck = new VersionCheck(versionStream, this.extensionVersion);\n\n    this.browserControllerStream = this.multiplex.createStream(\n      CLIENT_ID_BROWSER_CONTROLLER,\n    );\n\n    this.stream.pipe(this.multiplex).pipe(this.stream);\n  }\n\n  public setPaired() {\n    this.paired = true;\n    registerResponseStream(this.browserControllerStream);\n  }\n\n  /**\n   * Creates a connection with the MetaMask Desktop via a multiplexed stream.\n   *\n   * @param remotePort - The port provided by a new context.\n   * @param connectionType - Whether or not the new context is external (page or other extension).\n   * @param uiStream - A paused stream to communicate with the remote port.\n   */\n  public async createStream(\n    remotePort: RemotePort,\n    connectionType: ConnectionType,\n    uiStream: Duplex,\n  ) {\n    const clientId = this.generateClientId();\n    const clientStream = this.multiplex.createStream(clientId);\n\n    uiStream.pipe(clientStream).pipe(uiStream as any);\n\n    endOfStream(uiStream, () => {\n      this.onUIStreamEnd(clientId, clientStream);\n    });\n\n    this.sendNewConnectionMessage(remotePort, clientId, connectionType);\n\n    uiStream.resume();\n  }\n\n  public async transferState() {\n    const stateToTransfer = await getAndUpdateDesktopState({\n      desktopEnabled: true,\n    });\n\n    const filteredState = removePairingKeyFromRawState(stateToTransfer);\n\n    this.stateStream.write(filteredState);\n\n    await waitForAcknowledge(this.stateStream);\n\n    log.debug('Sent extension state to desktop');\n  }\n\n  public async checkVersions(): Promise<VersionCheckResult> {\n    return await this.versionCheck.check();\n  }\n\n  public async checkPairingKey(): Promise<PairingKeyStatus> {\n    return await this.extensionPairing.checkPairingKeyMatch();\n  }\n\n  private async onDisable(state: RawState) {\n    log.debug('Received desktop disable message');\n\n    if (state) {\n      await setRawState(state);\n      log.debug('Synchronised with final desktop state');\n    } else {\n      await setDesktopState({\n        desktopEnabled: false,\n        pairingKey: undefined,\n        pairingKeyHash: undefined,\n      });\n      log.debug('Disabled desktop mode');\n    }\n\n    acknowledge(this.disableStream);\n\n    this.restart();\n  }\n\n  private onUIStreamEnd(clientId: ClientId, clientStream: Duplex) {\n    log.debug('Port stream closed', clientId);\n\n    clientStream.end();\n\n    if (!this.endConnectionStream) {\n      log.error('End connection stream not initialised');\n      return;\n    }\n\n    this.endConnectionStream.write({ clientId });\n  }\n\n  private async onDesktopState(rawState: RawState) {\n    const newRawState = await addPairingKeyToRawState(rawState);\n\n    await setRawState(newRawState);\n\n    log.debug('Synchronised state with desktop');\n  }\n\n  private sendNewConnectionMessage(\n    remotePort: RemotePortData,\n    clientId: ClientId,\n    connectionType: ConnectionType,\n  ) {\n    if (!this.newConnectionStream) {\n      log.error('New Connection stream not initialised');\n      return;\n    }\n\n    const newConnectionMessage = {\n      clientId,\n      connectionType,\n      remotePort: {\n        name: remotePort.name,\n        sender: remotePort.sender,\n      },\n    };\n\n    log.debug('Sending new connection message', newConnectionMessage);\n\n    this.newConnectionStream.write(newConnectionMessage);\n  }\n\n  private addPairedOnlyDataListener(\n    stream: Readable,\n    listener: (data: any) => void,\n  ) {\n    addDataListener(stream, (data: any) => {\n      if (!this.paired) {\n        log.debug('Ignoring message as not paired');\n        return;\n      }\n\n      listener(data);\n    });\n  }\n\n  private async restart() {\n    log.debug('Restarting extension');\n    browser.runtime.reload();\n  }\n\n  private generateClientId(): ClientId {\n    return uuid();\n  }\n}\n"]}