{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/transforms/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,cAAc;AACd,MAAM,GAAG,GAAG,MAAM,CAAC;AAEnB;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,SAAsB,mBAAmB,CACvC,cAAsB,EACtB,QAAgB,EAChB,WAAmB;;QAEnB,MAAM,UAAU,GAAG,CACjB,MAAM,cAAc,CAAC,QAAQ,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAC7E,CAAC,CAAC,CAAC,CAAC;QAEL,8EAA8E;QAC9E,sBAAsB;QACtB,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,MAAM,IAAI,KAAK,CACb,qCAAqC,QAAQ,oCAAoC,CAClF,CAAC;SACH;QAED,2BAA2B;QAC3B,IAAI,UAAU,CAAC,UAAU,KAAK,CAAC,EAAE;YAC/B,OAAO;SACR;QAED,qEAAqE;QACrE,MAAM,YAAY,GAAG,UAAU,CAAC,QAAQ;aACrC,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,QAAQ,KAAK,CAAC,CAAC;aACxC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE;YACzC,OAAO,SAAS,CAAC,MAAM,CACrB,GAAG,GAAG,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,gBAAgB,KAAK,GAAG,GAAG,OAAO,MAAM,CAC5D,CAAC;QACJ,CAAC,EAAE,EAAE,CAAC,CAAC;QAET,MAAM,IAAI,KAAK,CACb,iEAAiE,QAAQ,SAAS,YAAY,EAAE,CACjG,CAAC;IACJ,CAAC;CAAA;AAlCD,kDAkCC","sourcesContent":["import type { ESLint } from 'eslint';\n\n// Four spaces\nconst TAB = '    ';\n\n/**\n * Lints a transformed file by invoking ESLint programmatically on the string\n * file contents. The path to the file must be specified so that the repository\n * ESLint config can be applied properly.\n *\n * **ATTN:** See the `eslintInstance` parameter documentation for important usage\n * information.\n *\n * An error is thrown if linting produced any errors, or if the file is ignored\n * by ESLint. Files linted by this function must not be ignored by ESLint.\n *\n * @param eslintInstance - The ESLint instance to use for linting. This instance\n * needs to be initialized with the options `{ baseConfig, useEslintrc: false}`,\n * where `baseConfig` is the desired ESLint configuration for linting. If using\n * your project's regular `.eslintrc` file, you may need to modify certain rules\n * for linting to pass after code fences are removed. Stylistic rules are\n * particularly likely to cause problems.\n * @param filePath - The path to the file.\n * @param fileContent - The file content.\n * @returns Returns `undefined` or throws an error if linting produced\n * any errors, or if the linted file is ignored.\n */\nexport async function lintTransformedFile(\n  eslintInstance: ESLint,\n  filePath: string,\n  fileContent: string,\n): Promise<void> {\n  const lintResult = (\n    await eslintInstance.lintText(fileContent, { filePath, warnIgnored: false })\n  )[0];\n\n  // This indicates that the file is ignored, which should never be the case for\n  // a transformed file.\n  if (lintResult === undefined) {\n    throw new Error(\n      `MetaMask build: Transformed file \"${filePath}\" appears to be ignored by ESLint.`,\n    );\n  }\n\n  // This is the success case\n  if (lintResult.errorCount === 0) {\n    return;\n  }\n\n  // Errors are stored in the messages array, and their \"severity\" is 2\n  const errorsString = lintResult.messages\n    .filter(({ severity }) => severity === 2)\n    .reduce((allErrors, { message, ruleId }) => {\n      return allErrors.concat(\n        `${TAB}${ruleId ?? '<Unknown rule>'}\\n${TAB}${message}\\n\\n`,\n      );\n    }, '');\n\n  throw new Error(\n    `MetaMask build: Lint errors encountered for transformed file \"${filePath}\":\\n\\n${errorsString}`,\n  );\n}\n"]}