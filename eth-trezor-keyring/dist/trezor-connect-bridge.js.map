{"version":3,"file":"trezor-connect-bridge.js","sourceRoot":"","sources":["../src/trezor-connect-bridge.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mEAA0E;AAY1E,MAAa,mBAAmB;IAAhC;QAGE,2BAAsB,GAAG,KAAK,CAAC;IA+CjC,CAAC;IA7CC,KAAK,CAAC,IAAI,CACR,QAE4B;QAE5B,qBAAa,CAAC,EAAE,CAAC,0BAAY,EAAE,CAAC,KAAK,EAAE,EAAE;;YACvC,IAAI,KAAK,CAAC,IAAI,KAAK,oBAAM,CAAC,OAAO,EAAE;gBACjC,OAAO;aACR;YACD,IAAI,CAAC,KAAK,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,0CAAE,KAAK,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,OAAO;SACR;QAED,MAAM,qBAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;IACrC,CAAC;IAED,OAAO;QACL,sDAAsD;QACtD,wEAAwE;QACxE,sHAAsH;QACtH,qBAAa,CAAC,OAAO,EAAE,CAAC;QACxB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,YAAY,CAAC,MAAsC;QACjD,OAAO,qBAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;IAED,uBAAuB,CAAC,MAAuC;QAC7D,OAAO,qBAAa,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,mBAAmB,CAAC,MAAmC;QACrD,OAAO,qBAAa,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAED,qBAAqB,CACnB,MAAwC;QAExC,OAAO,qBAAa,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;CACF;AAlDD,kDAkDC","sourcesContent":["import TrezorConnect, { DEVICE_EVENT, DEVICE } from '@trezor/connect-web';\nimport type {\n  Manifest,\n  ConnectSettings,\n  EthereumSignTransaction,\n  Params,\n  EthereumSignMessage,\n  EthereumSignTypedDataTypes,\n  EthereumSignTypedHash,\n} from '@trezor/connect-web';\nimport type { TrezorBridge } from './trezor-bridge';\n\nexport class TrezorConnectBridge implements TrezorBridge {\n  model?: string;\n\n  trezorConnectInitiated = false;\n\n  async init(\n    settings: {\n      manifest: Manifest;\n    } & Partial<ConnectSettings>,\n  ) {\n    TrezorConnect.on(DEVICE_EVENT, (event) => {\n      if (event.type !== DEVICE.CONNECT) {\n        return;\n      }\n      this.model = event.payload.features?.model;\n    });\n\n    if (this.trezorConnectInitiated) {\n      return;\n    }\n\n    await TrezorConnect.init(settings);\n    this.trezorConnectInitiated = true;\n  }\n\n  dispose() {\n    // This removes the Trezor Connect iframe from the DOM\n    // This method is not well documented, but the code it calls can be seen\n    // here: https://github.com/trezor/connect/blob/dec4a56af8a65a6059fb5f63fa3c6690d2c37e00/src/js/iframe/builder.js#L181\n    TrezorConnect.dispose();\n    return Promise.resolve();\n  }\n\n  getPublicKey(params: { path: string; coin: string }) {\n    return TrezorConnect.getPublicKey(params);\n  }\n\n  ethereumSignTransaction(params: Params<EthereumSignTransaction>) {\n    return TrezorConnect.ethereumSignTransaction(params);\n  }\n\n  ethereumSignMessage(params: Params<EthereumSignMessage>) {\n    return TrezorConnect.ethereumSignMessage(params);\n  }\n\n  ethereumSignTypedData<T extends EthereumSignTypedDataTypes>(\n    params: Params<EthereumSignTypedHash<T>>,\n  ) {\n    return TrezorConnect.ethereumSignTypedData(params);\n  }\n}\n"]}