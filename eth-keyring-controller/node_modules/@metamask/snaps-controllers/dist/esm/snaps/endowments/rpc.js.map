{"version":3,"sources":["../../../../src/snaps/endowments/rpc.ts"],"sourcesContent":["import type {\n  Caveat,\n  CaveatSpecificationConstraint,\n  EndowmentGetterParams,\n  PermissionConstraint,\n  PermissionSpecificationBuilder,\n  PermissionValidatorConstraint,\n  ValidPermissionSpecification,\n} from '@metamask/permission-controller';\nimport { PermissionType, SubjectType } from '@metamask/permission-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { RpcOrigins } from '@metamask/snaps-utils';\nimport { assertIsRpcOrigins, SnapCaveatType } from '@metamask/snaps-utils';\nimport type { Json, NonEmptyArray } from '@metamask/utils';\nimport { hasProperty, isPlainObject, assert } from '@metamask/utils';\n\nimport { SnapEndowments } from './enum';\n\nconst targetName = SnapEndowments.Rpc;\n\ntype RpcSpecification = ValidPermissionSpecification<{\n  permissionType: PermissionType.Endowment;\n  targetName: typeof targetName;\n  endowmentGetter: (_options?: any) => undefined;\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n  validator: PermissionValidatorConstraint;\n  subjectTypes: readonly SubjectType[];\n}>;\n\ntype RpcSpecificationBuilderOptions = {\n  // Empty for now.\n};\n\n/**\n * The specification builder for the JSON-RPC endowment permission.\n *\n * @param _builderOptions - Optional specification builder options.\n * @returns The specification for the JSON-RPC endowment permission.\n */\nconst specificationBuilder: PermissionSpecificationBuilder<\n  PermissionType.Endowment,\n  RpcSpecificationBuilderOptions,\n  RpcSpecification\n> = (_builderOptions?: any): RpcSpecification => {\n  return {\n    permissionType: PermissionType.Endowment,\n    targetName,\n    allowedCaveats: [SnapCaveatType.RpcOrigin],\n    endowmentGetter: (_getterOptions?: EndowmentGetterParams) => undefined,\n    validator: ({ caveats }) => {\n      if (\n        caveats?.length !== 1 ||\n        caveats[0].type !== SnapCaveatType.RpcOrigin\n      ) {\n        throw rpcErrors.invalidParams({\n          message: `Expected a single \"${SnapCaveatType.RpcOrigin}\" caveat.`,\n        });\n      }\n    },\n    subjectTypes: [SubjectType.Snap],\n  };\n};\n\nexport const rpcEndowmentBuilder = Object.freeze({\n  targetName,\n  specificationBuilder,\n} as const);\n\n/**\n * Validate the value of a caveat. This does not validate the type of the\n * caveat itself, only the value of the caveat.\n *\n * @param caveat - The caveat to validate.\n * @throws If the caveat value is invalid.\n */\nfunction validateCaveatOrigins(caveat: Caveat<string, any>) {\n  if (!hasProperty(caveat, 'value') || !isPlainObject(caveat.value)) {\n    throw rpcErrors.invalidParams({\n      message: 'Invalid JSON-RPC origins: Expected a plain object.',\n    });\n  }\n\n  const { value } = caveat;\n  assertIsRpcOrigins(value, rpcErrors.invalidParams);\n}\n\n/**\n * Map a raw value from the `initialPermissions` to a caveat specification.\n * Note that this function does not do any validation, that's handled by the\n * PermissionsController when the permission is requested.\n *\n * @param value - The raw value from the `initialPermissions`.\n * @returns The caveat specification.\n */\nexport function getRpcCaveatMapper(\n  value: Json,\n): Pick<PermissionConstraint, 'caveats'> {\n  return {\n    caveats: [\n      {\n        type: SnapCaveatType.RpcOrigin,\n        value,\n      },\n    ],\n  };\n}\n\n/**\n * Getter function to get the {@link RpcOrigins} caveat value from a permission.\n *\n * @param permission - The permission to get the caveat value from.\n * @returns The caveat value.\n * @throws If the permission does not have a valid {@link RpcOrigins} caveat.\n */\nexport function getRpcCaveatOrigins(\n  permission?: PermissionConstraint,\n): RpcOrigins | null {\n  assert(permission?.caveats);\n  assert(permission.caveats.length === 1);\n  assert(permission.caveats[0].type === SnapCaveatType.RpcOrigin);\n\n  const caveat = permission.caveats[0] as Caveat<string, RpcOrigins>;\n  return caveat.value;\n}\n\nexport const rpcCaveatSpecifications: Record<\n  SnapCaveatType.RpcOrigin,\n  CaveatSpecificationConstraint\n> = {\n  [SnapCaveatType.RpcOrigin]: Object.freeze({\n    type: SnapCaveatType.RpcOrigin,\n    validator: (caveat: Caveat<string, any>) => validateCaveatOrigins(caveat),\n  }),\n};\n"],"names":["PermissionType","SubjectType","rpcErrors","assertIsRpcOrigins","SnapCaveatType","hasProperty","isPlainObject","assert","SnapEndowments","targetName","Rpc","specificationBuilder","_builderOptions","permissionType","Endowment","allowedCaveats","RpcOrigin","endowmentGetter","_getterOptions","undefined","validator","caveats","length","type","invalidParams","message","subjectTypes","Snap","rpcEndowmentBuilder","Object","freeze","validateCaveatOrigins","caveat","value","getRpcCaveatMapper","getRpcCaveatOrigins","permission","rpcCaveatSpecifications"],"mappings":"AASA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kCAAkC;AAC9E,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,SAASC,kBAAkB,EAAEC,cAAc,QAAQ,wBAAwB;AAE3E,SAASC,WAAW,EAAEC,aAAa,EAAEC,MAAM,QAAQ,kBAAkB;AAErE,SAASC,cAAc,QAAQ,SAAS;AAExC,MAAMC,aAAaD,eAAeE,GAAG;AAerC;;;;;CAKC,GACD,MAAMC,uBAIF,CAACC;IACH,OAAO;QACLC,gBAAgBb,eAAec,SAAS;QACxCL;QACAM,gBAAgB;YAACX,eAAeY,SAAS;SAAC;QAC1CC,iBAAiB,CAACC,iBAA2CC;QAC7DC,WAAW,CAAC,EAAEC,OAAO,EAAE;YACrB,IACEA,SAASC,WAAW,KACpBD,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKnB,eAAeY,SAAS,EAC5C;gBACA,MAAMd,UAAUsB,aAAa,CAAC;oBAC5BC,SAAS,CAAC,mBAAmB,EAAErB,eAAeY,SAAS,CAAC,SAAS,CAAC;gBACpE;YACF;QACF;QACAU,cAAc;YAACzB,YAAY0B,IAAI;SAAC;IAClC;AACF;AAEA,OAAO,MAAMC,sBAAsBC,OAAOC,MAAM,CAAC;IAC/CrB;IACAE;AACF,GAAY;AAEZ;;;;;;CAMC,GACD,SAASoB,sBAAsBC,MAA2B;IACxD,IAAI,CAAC3B,YAAY2B,QAAQ,YAAY,CAAC1B,cAAc0B,OAAOC,KAAK,GAAG;QACjE,MAAM/B,UAAUsB,aAAa,CAAC;YAC5BC,SAAS;QACX;IACF;IAEA,MAAM,EAAEQ,KAAK,EAAE,GAAGD;IAClB7B,mBAAmB8B,OAAO/B,UAAUsB,aAAa;AACnD;AAEA;;;;;;;CAOC,GACD,OAAO,SAASU,mBACdD,KAAW;IAEX,OAAO;QACLZ,SAAS;YACP;gBACEE,MAAMnB,eAAeY,SAAS;gBAC9BiB;YACF;SACD;IACH;AACF;AAEA;;;;;;CAMC,GACD,OAAO,SAASE,oBACdC,UAAiC;IAEjC7B,OAAO6B,YAAYf;IACnBd,OAAO6B,WAAWf,OAAO,CAACC,MAAM,KAAK;IACrCf,OAAO6B,WAAWf,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKnB,eAAeY,SAAS;IAE9D,MAAMgB,SAASI,WAAWf,OAAO,CAAC,EAAE;IACpC,OAAOW,OAAOC,KAAK;AACrB;AAEA,OAAO,MAAMI,0BAGT;IACF,CAACjC,eAAeY,SAAS,CAAC,EAAEa,OAAOC,MAAM,CAAC;QACxCP,MAAMnB,eAAeY,SAAS;QAC9BI,WAAW,CAACY,SAAgCD,sBAAsBC;IACpE;AACF,EAAE"}