{"version":3,"file":"keyring.mock.js","sourceRoot":"","sources":["../../src/test/keyring.mock.ts"],"names":[],"mappings":";;;;;;;;AASA,MAAM,IAAI,GAAG,wBAAwB,CAAC;AAEtC,MAAM,mBAAmB;IAOvB,YAAY,UAA+C,EAAE;QAJtD,SAAI,GAAG,IAAI,CAAC;QAEnB,wCAAmB,EAAE,EAAC;QAGpB,8GAA8G;QAC9G,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,IAAI;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,CAAS;QACzB,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAA,IAAI,qCAAU,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,OAAO,CAAC,OAAO,CAAC,uBAAA,IAAI,qCAAU,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,CAAM;QACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,CAAM;QACxB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,oBAAoB,CACxB,KAAa,EACb,IAA0B;QAE1B,OAAO,OAAO,CAAC,OAAO,EAAS,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,KAAa,EACb,OAAyB;QAEzB,OAAO,OAAO,CAAC,OAAO,EAAS,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,KAAa,EACb,OAAyB;QAEzB,OAAO,OAAO,CAAC,OAAO,EAAS,CAAC;IAClC,CAAC;;;AA1DM,wBAAI,GAAG,IAAI,AAAP,CAAQ;AA6DrB,kBAAe,mBAAmB,CAAC","sourcesContent":["import type {\n  EthBaseTransaction,\n  EthBaseUserOperation,\n  EthKeyring,\n  EthUserOperation,\n  EthUserOperationPatch,\n} from '@metamask/keyring-api';\nimport type { Json, Hex } from '@metamask/utils';\n\nconst TYPE = 'Keyring Mock With Init';\n\nclass KeyringMockWithInit implements EthKeyring<Json> {\n  static type = TYPE;\n\n  public type = TYPE;\n\n  #accounts: Hex[] = [];\n\n  constructor(options: Record<string, unknown> | undefined = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises, @typescript-eslint/promise-function-async\n    this.deserialize(options);\n  }\n\n  async init() {\n    return Promise.resolve();\n  }\n\n  async addAccounts(_: number): Promise<Hex[]> {\n    return Promise.resolve(this.#accounts);\n  }\n\n  async getAccounts() {\n    return Promise.resolve(this.#accounts);\n  }\n\n  async serialize() {\n    return Promise.resolve({});\n  }\n\n  async deserialize(_: any) {\n    return Promise.resolve();\n  }\n\n  async removeAccount(_: any) {\n    return Promise.resolve();\n  }\n\n  async destroy() {\n    return Promise.resolve();\n  }\n\n  async prepareUserOperation(\n    _from: string,\n    _txs: EthBaseTransaction[],\n  ): Promise<EthBaseUserOperation> {\n    return Promise.resolve() as any;\n  }\n\n  async patchUserOperation(\n    _from: string,\n    _userOp: EthUserOperation,\n  ): Promise<EthUserOperationPatch> {\n    return Promise.resolve() as any;\n  }\n\n  async signUserOperation(\n    _from: string,\n    _userOp: EthUserOperation,\n  ): Promise<string> {\n    return Promise.resolve() as any;\n  }\n}\n\nexport default KeyringMockWithInit;\n"]}