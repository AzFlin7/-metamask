{"version":3,"file":"encryptor.mock.js","sourceRoot":"","sources":["../../src/test/encryptor.mock.ts"],"names":[],"mappings":";;;AAIa,QAAA,QAAQ,GAAG,aAAa,CAAC;AACzB,QAAA,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC;IAChD,GAAG,EAAE,SAAS;IACd,GAAG,EAAE,IAAI;IACT,CAAC,EAAE,6CAA6C;IAChD,gEAAgE;IAChE,OAAO,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;IAC/B,GAAG,EAAE,KAAK;CACX,CAAC,CAAC;AACU,QAAA,oBAAoB,GAC/B,8CAA8C,CAAC;AACpC,QAAA,kBAAkB,GAAG,KAAK,CAAC;AAC3B,QAAA,QAAQ,GAAG,oBAAoB,CAAC;AAC7C,iDAAiD;AACjD,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAClC,MAAM,sBAAsB,GAAG,qBAAqB,CAAC;AAErD,IAAI,QAAc,CAAC;AAEnB,MAAa,aAAa;IACxB,KAAK,CAAC,OAAO,CAAC,QAAgB,EAAE,OAAY;QAC1C,OAAO,IAAI,CAAC,SAAS,iCAChB,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,KACjD,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,IACzB,CAAC;IACL,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAAiB,EAAE,KAAa;QAC5C,IAAI,SAAS,IAAI,SAAS,KAAK,gBAAQ,EAAE;YACvC,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QAED,OAAO,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,IAAa,EAAE,OAAY;QAC9C,QAAQ,GAAG,OAAO,CAAC;QACnB,OAAO;YACL,IAAI,EAAE,gBAAQ;YACd,EAAE,EAAE,MAAM;SACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAW,EAAE,OAAY;QAC/C,OAAO;YACL,KAAK,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;YACvC,iBAAiB,EAAE,0BAAkB;SACtC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAW,EAAE,IAAY;QAC/C,OAAO;YACL,KAAK,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;YACpC,IAAI,EAAE,4BAAoB;YAC1B,iBAAiB,EAAE,2BAAmB;SACvC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,GAAY,EAAE,IAAY;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,GAAa,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,GAAW;QACzB,IAAI,GAAG,KAAK,IAAI,EAAE;YAChB,MAAM,IAAI,SAAS,CACjB,sIAAsI,CACvI,CAAC;SACH;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,SAAiB;QACjD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,cAAc,CAAC,MAAc;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,YAAY;QACV,OAAO,4BAAoB,CAAC;IAC9B,CAAC;CACF;AAnED,sCAmEC","sourcesContent":["import type { Json } from '@metamask/utils';\n\nimport type { ExportableKeyEncryptor } from '../types';\n\nexport const PASSWORD = 'password123';\nexport const MOCK_ENCRYPTION_KEY = JSON.stringify({\n  alg: 'A256GCM',\n  ext: true,\n  k: 'wYmxkxOOFBDP6F6VuuYFcRt_Po-tSLFHCWVolsHs4VI',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  key_ops: ['encrypt', 'decrypt'],\n  kty: 'oct',\n});\nexport const MOCK_ENCRYPTION_SALT =\n  'HQ5sfhsb8XAQRJtD+UqcImT7Ve4n3YMagrh05YTOsjk=';\nexport const MOCK_HARDCODED_KEY = 'key';\nexport const MOCK_HEX = '0xabcdef0123456789';\n// eslint-disable-next-line no-restricted-globals\nconst MOCK_KEY = Buffer.alloc(32);\nconst INVALID_PASSWORD_ERROR = 'Incorrect password.';\n\nlet cacheVal: Json;\n\nexport class MockEncryptor implements ExportableKeyEncryptor {\n  async encrypt(password: string, dataObj: any) {\n    return JSON.stringify({\n      ...(await this.encryptWithKey(password, dataObj)),\n      salt: this.generateSalt(),\n    });\n  }\n\n  async decrypt(_password: string, _text: string) {\n    if (_password && _password !== PASSWORD) {\n      throw new Error(INVALID_PASSWORD_ERROR);\n    }\n\n    return cacheVal ?? {};\n  }\n\n  async encryptWithKey(_key: unknown, dataObj: any) {\n    cacheVal = dataObj;\n    return {\n      data: MOCK_HEX,\n      iv: 'anIv',\n    };\n  }\n\n  async encryptWithDetail(key: string, dataObj: any) {\n    return {\n      vault: await this.encrypt(key, dataObj),\n      exportedKeyString: MOCK_HARDCODED_KEY,\n    };\n  }\n\n  async decryptWithDetail(key: string, text: string) {\n    return {\n      vault: await this.decrypt(key, text),\n      salt: MOCK_ENCRYPTION_SALT,\n      exportedKeyString: MOCK_ENCRYPTION_KEY,\n    };\n  }\n\n  async decryptWithKey(key: unknown, text: string) {\n    return this.decrypt(key as string, text);\n  }\n\n  async keyFromPassword(_password: string) {\n    return MOCK_KEY;\n  }\n\n  async importKey(key: string) {\n    if (key === '{}') {\n      throw new TypeError(\n        `Failed to execute 'importKey' on 'SubtleCrypto': The provided value is not of type '(ArrayBuffer or ArrayBufferView or JsonWebKey)'.`,\n      );\n    }\n    return null;\n  }\n\n  async updateVault(_vault: string, _password: string) {\n    return _vault;\n  }\n\n  isVaultUpdated(_vault: string) {\n    return true;\n  }\n\n  generateSalt() {\n    return MOCK_ENCRYPTION_SALT;\n  }\n}\n"]}