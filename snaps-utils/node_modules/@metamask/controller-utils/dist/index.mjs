import {
  detectSIWE,
  isValidSIWEOrigin,
  parseDomainParts
} from "./chunk-VDEIYYE4.mjs";
import "./chunk-RZFCNKW4.mjs";
import {
  BNToHex,
  convertHexToDecimal,
  fetchWithErrorHandling,
  fractionBN,
  fromHex,
  getBuyURL,
  gweiDecToWEIBN,
  handleFetch,
  hexToBN,
  hexToText,
  isNonEmptyArray,
  isPlainObject,
  isSafeChainId,
  isSafeDynamicKey,
  isSmartContractCode,
  isValidHexAddress,
  isValidJson,
  normalizeEnsName,
  query,
  safelyExecute,
  safelyExecuteWithTimeout,
  successfulFetch,
  timeoutFetch,
  toChecksumHexAddress,
  toHex,
  weiHexToGweiDec
} from "./chunk-UFUF4N7T.mjs";
import {
  ASSET_TYPES,
  ApprovalType,
  BUILT_IN_NETWORKS,
  CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP,
  ERC1155,
  ERC1155_INTERFACE_ID,
  ERC1155_METADATA_URI_INTERFACE_ID,
  ERC1155_TOKEN_RECEIVER_INTERFACE_ID,
  ERC20,
  ERC721,
  ERC721_ENUMERABLE_INTERFACE_ID,
  ERC721_INTERFACE_ID,
  ERC721_METADATA_INTERFACE_ID,
  FALL_BACK_VS_CURRENCY,
  GANACHE_CHAIN_ID,
  GWEI,
  IPFS_DEFAULT_GATEWAY_URL,
  MAX_SAFE_CHAIN_ID,
  NFT_API_BASE_URL,
  OPENSEA_PROXY_URL,
  ORIGIN_METAMASK,
  RPC,
  TESTNET_TICKER_SYMBOLS
} from "./chunk-XOU34P3V.mjs";
import {
  BuiltInNetworkName,
  ChainId,
  InfuraNetworkType,
  NetworkType,
  NetworksTicker,
  isInfuraNetworkType,
  isNetworkType
} from "./chunk-7IUO3U3H.mjs";
export {
  ASSET_TYPES,
  ApprovalType,
  BNToHex,
  BUILT_IN_NETWORKS,
  BuiltInNetworkName,
  CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP,
  ChainId,
  ERC1155,
  ERC1155_INTERFACE_ID,
  ERC1155_METADATA_URI_INTERFACE_ID,
  ERC1155_TOKEN_RECEIVER_INTERFACE_ID,
  ERC20,
  ERC721,
  ERC721_ENUMERABLE_INTERFACE_ID,
  ERC721_INTERFACE_ID,
  ERC721_METADATA_INTERFACE_ID,
  FALL_BACK_VS_CURRENCY,
  GANACHE_CHAIN_ID,
  GWEI,
  IPFS_DEFAULT_GATEWAY_URL,
  InfuraNetworkType,
  MAX_SAFE_CHAIN_ID,
  NFT_API_BASE_URL,
  NetworkType,
  NetworksTicker,
  OPENSEA_PROXY_URL,
  ORIGIN_METAMASK,
  RPC,
  TESTNET_TICKER_SYMBOLS,
  convertHexToDecimal,
  detectSIWE,
  fetchWithErrorHandling,
  fractionBN,
  fromHex,
  getBuyURL,
  gweiDecToWEIBN,
  handleFetch,
  hexToBN,
  hexToText,
  isInfuraNetworkType,
  isNetworkType,
  isNonEmptyArray,
  isPlainObject,
  isSafeChainId,
  isSafeDynamicKey,
  isSmartContractCode,
  isValidHexAddress,
  isValidJson,
  isValidSIWEOrigin,
  normalizeEnsName,
  parseDomainParts,
  query,
  safelyExecute,
  safelyExecuteWithTimeout,
  successfulFetch,
  timeoutFetch,
  toChecksumHexAddress,
  toHex,
  weiHexToGweiDec
};
//# sourceMappingURL=index.mjs.map