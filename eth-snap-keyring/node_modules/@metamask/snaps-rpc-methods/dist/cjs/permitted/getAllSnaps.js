"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getAllSnapsHandler", {
    enumerable: true,
    get: function() {
        return getAllSnapsHandler;
    }
});
const _rpcerrors = require("@metamask/rpc-errors");
const hookNames = {
    getAllSnaps: true
};
const getAllSnapsHandler = {
    methodNames: [
        'wallet_getAllSnaps'
    ],
    implementation: getAllSnapsImplementation,
    hookNames
};
/**
 * The `wallet_getAllSnaps` method implementation.
 * Fetches all installed snaps and adds them to the JSON-RPC response.
 *
 * @param request - The JSON-RPC request object.
 * @param response - The JSON-RPC response object.
 * @param _next - The `json-rpc-engine` "next" callback. Not used by this
 * function.
 * @param end - The `json-rpc-engine` "end" callback.
 * @param hooks - The RPC method hooks.
 * @param hooks.getAllSnaps - A function that returns all installed snaps.
 * @returns Nothing.
 */ async function getAllSnapsImplementation(request, response, _next, end, { getAllSnaps }) {
    // The origin is added by the MetaMask middleware stack.
    const { origin } = request;
    if (origin !== 'https://snaps.metamask.io') {
        return end(_rpcerrors.rpcErrors.methodNotFound());
    }
    response.result = await getAllSnaps();
    return end();
}

//# sourceMappingURL=getAllSnaps.js.map