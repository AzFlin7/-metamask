import { rpcErrors } from '@metamask/rpc-errors';
import { AuxiliaryFileEncoding, enumValue } from '@metamask/snaps-sdk';
import { assertStruct } from '@metamask/utils';
import { object, optional, string, union } from 'superstruct';
export const GetFileArgsStruct = object({
    path: string(),
    encoding: optional(union([
        enumValue(AuxiliaryFileEncoding.Base64),
        enumValue(AuxiliaryFileEncoding.Hex),
        enumValue(AuxiliaryFileEncoding.Utf8)
    ]))
});
const hookNames = {
    getSnapFile: true
};
export const getFileHandler = {
    methodNames: [
        'snap_getFile'
    ],
    implementation,
    hookNames
};
/**
 * The `snap_getFile` method implementation.
 *
 * @param req - The JSON-RPC request object.
 * @param res - The JSON-RPC response object.
 * @param _next - The `json-rpc-engine` "next" callback. Not used by this
 * function.
 * @param end - The `json-rpc-engine` "end" callback.
 * @param hooks - The RPC method hooks.
 * @param hooks.getSnapFile - The funnction to load a static snap file.
 * @returns Nothing.
 */ async function implementation(req, res, _next, end, { getSnapFile }) {
    const { params } = req;
    assertStruct(params, GetFileArgsStruct, 'Invalid "snap_getFile" parameters', rpcErrors.invalidParams);
    try {
        res.result = await getSnapFile(params.path, params.encoding ?? AuxiliaryFileEncoding.Base64);
    } catch (error) {
        return end(error);
    }
    return end();
}

//# sourceMappingURL=getFile.js.map