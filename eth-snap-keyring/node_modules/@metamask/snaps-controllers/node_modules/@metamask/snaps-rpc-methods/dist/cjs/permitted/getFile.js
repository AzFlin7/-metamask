"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GetFileArgsStruct: function() {
        return GetFileArgsStruct;
    },
    getFileHandler: function() {
        return getFileHandler;
    }
});
const _rpcerrors = require("@metamask/rpc-errors");
const _snapssdk = require("@metamask/snaps-sdk");
const _utils = require("@metamask/utils");
const _superstruct = require("superstruct");
const GetFileArgsStruct = (0, _superstruct.object)({
    path: (0, _superstruct.string)(),
    encoding: (0, _superstruct.optional)((0, _superstruct.union)([
        (0, _snapssdk.enumValue)(_snapssdk.AuxiliaryFileEncoding.Base64),
        (0, _snapssdk.enumValue)(_snapssdk.AuxiliaryFileEncoding.Hex),
        (0, _snapssdk.enumValue)(_snapssdk.AuxiliaryFileEncoding.Utf8)
    ]))
});
const hookNames = {
    getSnapFile: true
};
const getFileHandler = {
    methodNames: [
        'snap_getFile'
    ],
    implementation,
    hookNames
};
/**
 * The `snap_getFile` method implementation.
 *
 * @param req - The JSON-RPC request object.
 * @param res - The JSON-RPC response object.
 * @param _next - The `json-rpc-engine` "next" callback. Not used by this
 * function.
 * @param end - The `json-rpc-engine` "end" callback.
 * @param hooks - The RPC method hooks.
 * @param hooks.getSnapFile - The funnction to load a static snap file.
 * @returns Nothing.
 */ async function implementation(req, res, _next, end, { getSnapFile }) {
    const { params } = req;
    (0, _utils.assertStruct)(params, GetFileArgsStruct, 'Invalid "snap_getFile" parameters', _rpcerrors.rpcErrors.invalidParams);
    try {
        res.result = await getSnapFile(params.path, params.encoding ?? _snapssdk.AuxiliaryFileEncoding.Base64);
    } catch (error) {
        return end(error);
    }
    return end();
}

//# sourceMappingURL=getFile.js.map