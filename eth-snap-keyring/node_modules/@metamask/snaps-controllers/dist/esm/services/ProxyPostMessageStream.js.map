{"version":3,"sources":["../../../src/services/ProxyPostMessageStream.ts"],"sourcesContent":["import { BasePostMessageStream } from '@metamask/post-message-stream';\nimport type { JsonRpcRequest } from '@metamask/utils';\n\nexport type ProxyPostMessageStreamArgs = {\n  stream: BasePostMessageStream;\n  jobId: string;\n  extra?: Record<string, unknown>;\n};\n\nexport type ProxyPostMessage = {\n  jobId: string;\n  data: JsonRpcRequest;\n  extra?: Record<string, unknown>;\n};\n\n/**\n * A post message stream that wraps messages in a job ID, before sending them\n * over the underlying stream.\n */\nexport class ProxyPostMessageStream extends BasePostMessageStream {\n  readonly #stream: BasePostMessageStream;\n\n  readonly #jobId: string;\n\n  /**\n   * Initializes a new `ProxyPostMessageStream` instance.\n   *\n   * @param args - The constructor arguments.\n   * @param args.stream - The underlying stream to use for communication.\n   * @param args.jobId - The ID of the job this stream is associated with.\n   */\n  constructor({ stream, jobId }: ProxyPostMessageStreamArgs) {\n    super();\n\n    this.#stream = stream;\n    this.#jobId = jobId;\n\n    this.#stream.on('data', this.#onData.bind(this));\n  }\n\n  /**\n   * Handle incoming data from the underlying stream. This checks that the job\n   * ID matches the expected job ID, and pushes the data to the stream if so.\n   *\n   * @param data - The data to handle.\n   */\n  #onData(data: ProxyPostMessage) {\n    if (data.jobId !== this.#jobId) {\n      return;\n    }\n\n    this.push(data.data);\n  }\n\n  /**\n   * Write data to the underlying stream. This wraps the data in an object with\n   * the job ID.\n   *\n   * @param data - The data to write.\n   */\n  _postMessage(data: ProxyPostMessage) {\n    this.#stream.write({\n      jobId: this.#jobId,\n      data,\n    });\n  }\n}\n"],"names":["BasePostMessageStream","ProxyPostMessageStream","_postMessage","data","stream","write","jobId","constructor","on","onData","bind","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,qBAAqB,QAAQ,gCAAgC;IAoB3D,uCAEA,sCAkBT;;;;;GAKC,GACD;AA/BF;;;CAGC,GACD,OAAO,MAAMC,+BAA+BD;IAmC1C;;;;;GAKC,GACDE,aAAaC,IAAsB,EAAE;QACnC,yBAAA,IAAI,EAAEC,SAAOC,KAAK,CAAC;YACjBC,KAAK,2BAAE,IAAI,EAAEA;YACbH;QACF;IACF;IAzCA;;;;;;GAMC,GACDI,YAAY,EAAEH,MAAM,EAAEE,KAAK,EAA8B,CAAE;QACzD,KAAK;QAcP,iCAAA;QA1BA,gCAAS;;mBAAT,KAAA;;QAEA,gCAAS;;mBAAT,KAAA;;uCAYQF,SAASA;uCACTE,QAAQA;QAEd,yBAAA,IAAI,EAAEF,SAAOI,EAAE,CAAC,QAAQ,0BAAA,IAAI,EAAEC,SAAAA,QAAOC,IAAI,CAAC,IAAI;IAChD;AA4BF;AApBE,SAAA,OAAQP,IAAsB;IAC5B,IAAIA,KAAKG,KAAK,8BAAK,IAAI,EAAEA,SAAO;QAC9B;IACF;IAEA,IAAI,CAACK,IAAI,CAACR,KAAKA,IAAI;AACrB"}