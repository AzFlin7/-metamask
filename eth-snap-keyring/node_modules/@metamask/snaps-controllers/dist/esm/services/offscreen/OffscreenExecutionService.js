function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _class_private_method_get(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
}
function _class_private_method_init(obj, privateSet) {
    _check_private_redeclaration(obj, privateSet);
    privateSet.add(obj);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { BrowserRuntimePostMessageStream } from '@metamask/post-message-stream';
import { ProxyExecutionService } from '../proxy/ProxyExecutionService';
var _createDocument = /*#__PURE__*/ new WeakSet();
export class OffscreenExecutionService extends ProxyExecutionService {
    /**
   * Create a new stream for the specified job. This wraps the runtime stream
   * in a stream specific to the job.
   *
   * @param jobId - The job ID.
   */ async initEnvStream(jobId) {
        // Lazily create the offscreen document.
        await _class_private_method_get(this, _createDocument, createDocument).call(this);
        return super.initEnvStream(jobId);
    }
    /**
   * Create a new offscreen execution service.
   *
   * @param args - The constructor arguments.
   * @param args.documentUrl - The URL of the offscreen document to use as the
   * execution environment. This must be a URL relative to the location where
   * this is called. This cannot be a public (http(s)) URL.
   * @param args.messenger - The messenger to use for communication with the
   * `SnapController`.
   * @param args.setupSnapProvider - The function to use to set up the snap
   * provider.
   */ constructor({ documentUrl, messenger, setupSnapProvider }){
        super({
            messenger,
            setupSnapProvider,
            stream: new BrowserRuntimePostMessageStream({
                name: 'parent',
                target: 'child'
            })
        });
        /**
   * Creates the offscreen document to be used as the execution environment.
   *
   * If the document already exists, this does nothing.
   */ _class_private_method_init(this, _createDocument);
        _define_property(this, "documentUrl", void 0);
        this.documentUrl = documentUrl;
    }
}
async function createDocument() {
    // Extensions can only have a single offscreen document.
    if (await chrome.offscreen.hasDocument()) {
        return;
    }
    await chrome.offscreen.createDocument({
        justification: 'MetaMask Snaps Execution Environment',
        reasons: [
            'IFRAME_SCRIPTING'
        ],
        url: this.documentUrl.toString()
    });
}

//# sourceMappingURL=OffscreenExecutionService.js.map