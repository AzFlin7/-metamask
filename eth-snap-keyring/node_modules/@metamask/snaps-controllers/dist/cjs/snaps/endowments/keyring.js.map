{"version":3,"sources":["../../../../src/snaps/endowments/keyring.ts"],"sourcesContent":["import type {\n  Caveat,\n  CaveatSpecificationConstraint,\n  EndowmentGetterParams,\n  PermissionConstraint,\n  PermissionSpecificationBuilder,\n  PermissionValidatorConstraint,\n  ValidPermissionSpecification,\n} from '@metamask/permission-controller';\nimport { PermissionType, SubjectType } from '@metamask/permission-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { KeyringOrigins } from '@metamask/snaps-utils';\nimport { assertIsKeyringOrigins, SnapCaveatType } from '@metamask/snaps-utils';\nimport type { Json, NonEmptyArray } from '@metamask/utils';\nimport { assert, hasProperty, isPlainObject } from '@metamask/utils';\n\nimport { SnapEndowments } from './enum';\n\nconst permissionName = SnapEndowments.Keyring;\n\ntype KeyringEndowmentSpecification = ValidPermissionSpecification<{\n  permissionType: PermissionType.Endowment;\n  targetName: typeof permissionName;\n  endowmentGetter: (_options?: EndowmentGetterParams) => undefined;\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n  validator: PermissionValidatorConstraint;\n  subjectTypes: readonly SubjectType[];\n}>;\n\n/**\n * `endowment:keyring` returns nothing; it is intended to be used as a flag\n * by the client to detect whether the snap has keyring capabilities.\n *\n * @param _builderOptions - Optional specification builder options.\n * @returns The specification for the keyring endowment.\n */\nconst specificationBuilder: PermissionSpecificationBuilder<\n  PermissionType.Endowment,\n  any,\n  KeyringEndowmentSpecification\n> = (_builderOptions?: unknown) => {\n  return {\n    permissionType: PermissionType.Endowment,\n    targetName: permissionName,\n    allowedCaveats: [SnapCaveatType.KeyringOrigin],\n    endowmentGetter: (_getterOptions?: EndowmentGetterParams) => undefined,\n    validator: ({ caveats }) => {\n      if (\n        caveats?.length !== 1 ||\n        caveats[0].type !== SnapCaveatType.KeyringOrigin\n      ) {\n        throw rpcErrors.invalidParams({\n          message: `Expected a single \"${SnapCaveatType.KeyringOrigin}\" caveat.`,\n        });\n      }\n    },\n    subjectTypes: [SubjectType.Snap],\n  };\n};\n\nexport const keyringEndowmentBuilder = Object.freeze({\n  targetName: permissionName,\n  specificationBuilder,\n} as const);\n\n/**\n * Validate the value of a caveat. This does not validate the type of the\n * caveat itself, only the value of the caveat.\n *\n * @param caveat - The caveat to validate.\n * @throws If the caveat value is invalid.\n */\nfunction validateCaveatOrigins(caveat: Caveat<string, any>) {\n  if (!hasProperty(caveat, 'value') || !isPlainObject(caveat.value)) {\n    throw rpcErrors.invalidParams({\n      message: 'Invalid keyring origins: Expected a plain object.',\n    });\n  }\n\n  const { value } = caveat;\n  assertIsKeyringOrigins(value, rpcErrors.invalidParams);\n}\n\n/**\n * Map a raw value from the `initialPermissions` to a caveat specification.\n * Note that this function does not do any validation, that's handled by the\n * PermissionsController when the permission is requested.\n *\n * @param value - The raw value from the `initialPermissions`.\n * @returns The caveat specification.\n */\nexport function getKeyringCaveatMapper(\n  value: Json,\n): Pick<PermissionConstraint, 'caveats'> {\n  return {\n    caveats: [\n      {\n        type: SnapCaveatType.KeyringOrigin,\n        value,\n      },\n    ],\n  };\n}\n\n/**\n * Getter function to get the {@link KeyringOrigins} caveat value from a\n * permission.\n *\n * @param permission - The permission to get the caveat value from.\n * @returns The caveat value.\n * @throws If the permission does not have a valid {@link KeyringOrigins}\n * caveat.\n */\nexport function getKeyringCaveatOrigins(\n  permission?: PermissionConstraint,\n): KeyringOrigins | null {\n  assert(permission?.caveats);\n  assert(permission.caveats.length === 1);\n  assert(permission.caveats[0].type === SnapCaveatType.KeyringOrigin);\n\n  const caveat = permission.caveats[0] as Caveat<string, KeyringOrigins>;\n  return caveat.value;\n}\n\nexport const keyringCaveatSpecifications: Record<\n  SnapCaveatType.KeyringOrigin,\n  CaveatSpecificationConstraint\n> = {\n  [SnapCaveatType.KeyringOrigin]: Object.freeze({\n    type: SnapCaveatType.KeyringOrigin,\n    validator: (caveat: Caveat<string, any>) => validateCaveatOrigins(caveat),\n  }),\n};\n"],"names":["keyringEndowmentBuilder","getKeyringCaveatMapper","getKeyringCaveatOrigins","keyringCaveatSpecifications","permissionName","SnapEndowments","Keyring","specificationBuilder","_builderOptions","permissionType","PermissionType","Endowment","targetName","allowedCaveats","SnapCaveatType","KeyringOrigin","endowmentGetter","_getterOptions","undefined","validator","caveats","length","type","rpcErrors","invalidParams","message","subjectTypes","SubjectType","Snap","Object","freeze","validateCaveatOrigins","caveat","hasProperty","isPlainObject","value","assertIsKeyringOrigins","permission","assert"],"mappings":";;;;;;;;;;;IA4DaA,uBAAuB;eAAvBA;;IA+BGC,sBAAsB;eAAtBA;;IAsBAC,uBAAuB;eAAvBA;;IAWHC,2BAA2B;eAA3BA;;;sCAnH+B;2BAClB;4BAE6B;uBAEJ;sBAEpB;AAE/B,MAAMC,iBAAiBC,oBAAc,CAACC,OAAO;AAW7C;;;;;;CAMC,GACD,MAAMC,uBAIF,CAACC;IACH,OAAO;QACLC,gBAAgBC,oCAAc,CAACC,SAAS;QACxCC,YAAYR;QACZS,gBAAgB;YAACC,0BAAc,CAACC,aAAa;SAAC;QAC9CC,iBAAiB,CAACC,iBAA2CC;QAC7DC,WAAW,CAAC,EAAEC,OAAO,EAAE;YACrB,IACEA,SAASC,WAAW,KACpBD,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKR,0BAAc,CAACC,aAAa,EAChD;gBACA,MAAMQ,oBAAS,CAACC,aAAa,CAAC;oBAC5BC,SAAS,CAAC,mBAAmB,EAAEX,0BAAc,CAACC,aAAa,CAAC,SAAS,CAAC;gBACxE;YACF;QACF;QACAW,cAAc;YAACC,iCAAW,CAACC,IAAI;SAAC;IAClC;AACF;AAEO,MAAM5B,0BAA0B6B,OAAOC,MAAM,CAAC;IACnDlB,YAAYR;IACZG;AACF;AAEA;;;;;;CAMC,GACD,SAASwB,sBAAsBC,MAA2B;IACxD,IAAI,CAACC,IAAAA,kBAAW,EAACD,QAAQ,YAAY,CAACE,IAAAA,oBAAa,EAACF,OAAOG,KAAK,GAAG;QACjE,MAAMZ,oBAAS,CAACC,aAAa,CAAC;YAC5BC,SAAS;QACX;IACF;IAEA,MAAM,EAAEU,KAAK,EAAE,GAAGH;IAClBI,IAAAA,kCAAsB,EAACD,OAAOZ,oBAAS,CAACC,aAAa;AACvD;AAUO,SAASvB,uBACdkC,KAAW;IAEX,OAAO;QACLf,SAAS;YACP;gBACEE,MAAMR,0BAAc,CAACC,aAAa;gBAClCoB;YACF;SACD;IACH;AACF;AAWO,SAASjC,wBACdmC,UAAiC;IAEjCC,IAAAA,aAAM,EAACD,YAAYjB;IACnBkB,IAAAA,aAAM,EAACD,WAAWjB,OAAO,CAACC,MAAM,KAAK;IACrCiB,IAAAA,aAAM,EAACD,WAAWjB,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKR,0BAAc,CAACC,aAAa;IAElE,MAAMiB,SAASK,WAAWjB,OAAO,CAAC,EAAE;IACpC,OAAOY,OAAOG,KAAK;AACrB;AAEO,MAAMhC,8BAGT;IACF,CAACW,0BAAc,CAACC,aAAa,CAAC,EAAEc,OAAOC,MAAM,CAAC;QAC5CR,MAAMR,0BAAc,CAACC,aAAa;QAClCI,WAAW,CAACa,SAAgCD,sBAAsBC;IACpE;AACF"}