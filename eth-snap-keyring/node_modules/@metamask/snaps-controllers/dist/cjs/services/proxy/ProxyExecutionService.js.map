{"version":3,"sources":["../../../../src/services/proxy/ProxyExecutionService.ts"],"sourcesContent":["import type { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { nanoid } from 'nanoid';\n\nimport type { ExecutionServiceArgs, Job } from '../AbstractExecutionService';\nimport { AbstractExecutionService } from '../AbstractExecutionService';\nimport { ProxyPostMessageStream } from '../ProxyPostMessageStream';\n\ntype ProxyExecutionEnvironmentServiceArgs = {\n  stream: BasePostMessageStream;\n} & ExecutionServiceArgs;\n\nexport class ProxyExecutionService extends AbstractExecutionService<string> {\n  readonly #stream: BasePostMessageStream;\n\n  /**\n   * Create a new proxy execution service.\n   *\n   * @param args - The constructor arguments.\n   * @param args.messenger - The messenger to use for communication with the\n   * `SnapController`.\n   * @param args.setupSnapProvider - The function to use to set up the snap\n   * provider.\n   * @param args.stream - The stream to use for communicating with the proxy\n   * executor.\n   */\n  constructor({\n    stream,\n    messenger,\n    setupSnapProvider,\n  }: ProxyExecutionEnvironmentServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n\n    this.#stream = stream;\n  }\n\n  /**\n   * Send a termination command to the proxy stream.\n   *\n   * @param job - The job to terminate.\n   */\n  protected async terminateJob(job: Job<string>) {\n    // The `AbstractExecutionService` will have already closed the job stream,\n    // so we write to the runtime stream directly.\n    this.#stream.write({\n      jobId: job.id,\n      data: {\n        jsonrpc: '2.0',\n        method: 'terminateJob',\n        id: nanoid(),\n      },\n    });\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the root stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   */\n  protected async initEnvStream(jobId: string) {\n    const stream = new ProxyPostMessageStream({\n      stream: this.#stream,\n      jobId,\n    });\n\n    return { worker: jobId, stream };\n  }\n}\n"],"names":["ProxyExecutionService","AbstractExecutionService","terminateJob","job","stream","write","jobId","id","data","jsonrpc","method","nanoid","initEnvStream","ProxyPostMessageStream","worker","constructor","messenger","setupSnapProvider"],"mappings":";;;;+BAWaA;;;eAAAA;;;wBAVU;0CAGkB;wCACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAO5B;AADJ,MAAMA,8BAA8BC,kDAAwB;IA2BjE;;;;GAIC,GACD,MAAgBC,aAAaC,GAAgB,EAAE;QAC7C,0EAA0E;QAC1E,8CAA8C;QAC9C,yBAAA,IAAI,EAAEC,SAAOC,KAAK,CAAC;YACjBC,OAAOH,IAAII,EAAE;YACbC,MAAM;gBACJC,SAAS;gBACTC,QAAQ;gBACRH,IAAII,IAAAA,cAAM;YACZ;QACF;IACF;IAEA;;;;;GAKC,GACD,MAAgBC,cAAcN,KAAa,EAAE;QAC3C,MAAMF,SAAS,IAAIS,8CAAsB,CAAC;YACxCT,MAAM,2BAAE,IAAI,EAAEA;YACdE;QACF;QAEA,OAAO;YAAEQ,QAAQR;YAAOF;QAAO;IACjC;IAvDA;;;;;;;;;;GAUC,GACDW,YAAY,EACVX,MAAM,EACNY,SAAS,EACTC,iBAAiB,EACoB,CAAE;QACvC,KAAK,CAAC;YACJD;YACAC;QACF;QArBF,gCAAS;;mBAAT,KAAA;;uCAuBQb,SAASA;IACjB;AAkCF"}