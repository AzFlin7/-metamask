{"version":3,"sources":["../../../../src/services/offscreen/OffscreenExecutionService.ts"],"sourcesContent":["import { BrowserRuntimePostMessageStream } from '@metamask/post-message-stream';\n\nimport type { ExecutionServiceArgs } from '../AbstractExecutionService';\nimport { ProxyExecutionService } from '../proxy/ProxyExecutionService';\n\ntype OffscreenExecutionEnvironmentServiceArgs = {\n  documentUrl: URL;\n} & ExecutionServiceArgs;\n\nexport class OffscreenExecutionService extends ProxyExecutionService {\n  public readonly documentUrl: URL;\n\n  /**\n   * Create a new offscreen execution service.\n   *\n   * @param args - The constructor arguments.\n   * @param args.documentUrl - The URL of the offscreen document to use as the\n   * execution environment. This must be a URL relative to the location where\n   * this is called. This cannot be a public (http(s)) URL.\n   * @param args.messenger - The messenger to use for communication with the\n   * `SnapController`.\n   * @param args.setupSnapProvider - The function to use to set up the snap\n   * provider.\n   */\n  constructor({\n    documentUrl,\n    messenger,\n    setupSnapProvider,\n  }: OffscreenExecutionEnvironmentServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n      stream: new BrowserRuntimePostMessageStream({\n        name: 'parent',\n        target: 'child',\n      }),\n    });\n\n    this.documentUrl = documentUrl;\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Lazily create the offscreen document.\n    await this.#createDocument();\n\n    return super.initEnvStream(jobId);\n  }\n\n  /**\n   * Creates the offscreen document to be used as the execution environment.\n   *\n   * If the document already exists, this does nothing.\n   */\n  async #createDocument() {\n    // Extensions can only have a single offscreen document.\n    if (await chrome.offscreen.hasDocument()) {\n      return;\n    }\n\n    await chrome.offscreen.createDocument({\n      justification: 'MetaMask Snaps Execution Environment',\n      reasons: ['IFRAME_SCRIPTING' as chrome.offscreen.Reason],\n      url: this.documentUrl.toString(),\n    });\n  }\n}\n"],"names":["OffscreenExecutionService","ProxyExecutionService","initEnvStream","jobId","createDocument","constructor","documentUrl","messenger","setupSnapProvider","stream","BrowserRuntimePostMessageStream","name","target","chrome","offscreen","hasDocument","justification","reasons","url","toString"],"mappings":";;;;+BASaA;;;eAAAA;;;mCATmC;uCAGV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwD9B;AAlDD,MAAMA,kCAAkCC,4CAAqB;IAgClE;;;;;GAKC,GACD,MAAgBC,cAAcC,KAAa,EAAE;QAC3C,wCAAwC;QACxC,MAAM,0BAAA,IAAI,EAAEC,iBAAAA,qBAAN,IAAI;QAEV,OAAO,KAAK,CAACF,cAAcC;IAC7B;IAxCA;;;;;;;;;;;GAWC,GACDE,YAAY,EACVC,WAAW,EACXC,SAAS,EACTC,iBAAiB,EACwB,CAAE;QAC3C,KAAK,CAAC;YACJD;YACAC;YACAC,QAAQ,IAAIC,kDAA+B,CAAC;gBAC1CC,MAAM;gBACNC,QAAQ;YACV;QACF;QAkBF;;;;GAIC,GACD,iCAAM;QAjDN,uBAAgBN,eAAhB,KAAA;QA4BE,IAAI,CAACA,WAAW,GAAGA;IACrB;AAgCF;AAZE,eAAA;IACE,wDAAwD;IACxD,IAAI,MAAMO,OAAOC,SAAS,CAACC,WAAW,IAAI;QACxC;IACF;IAEA,MAAMF,OAAOC,SAAS,CAACV,cAAc,CAAC;QACpCY,eAAe;QACfC,SAAS;YAAC;SAA8C;QACxDC,KAAK,IAAI,CAACZ,WAAW,CAACa,QAAQ;IAChC;AACF"}