{"version":3,"sources":["../../../src/snaps/SnapController.ts"],"sourcesContent":["import type {\n  AddApprovalRequest,\n  UpdateRequestState,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type {\n  Caveat,\n  GetEndowments,\n  GetPermissions,\n  GetSubjectMetadata,\n  GetSubjects,\n  GrantPermissions,\n  HasPermission,\n  HasPermissions,\n  PermissionConstraint,\n  PermissionsRequest,\n  RequestedPermissions,\n  RevokeAllPermissions,\n  RevokePermissionForAllSubjects,\n  RevokePermissions,\n  SubjectPermissions,\n  UpdateCaveat,\n  ValidPermission,\n} from '@metamask/permission-controller';\nimport { SubjectType } from '@metamask/permission-controller';\nimport type {\n  MaybeUpdateState,\n  TestOrigin,\n} from '@metamask/phishing-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { BlockReason } from '@metamask/snaps-registry';\nimport { WALLET_SNAP_PERMISSION_KEY } from '@metamask/snaps-rpc-methods';\nimport type {\n  RequestSnapsParams,\n  RequestSnapsResult,\n  SnapId,\n} from '@metamask/snaps-sdk';\nimport { AuxiliaryFileEncoding, getErrorMessage } from '@metamask/snaps-sdk';\nimport type {\n  FetchedSnapFiles,\n  PersistedSnap,\n  Snap,\n  SnapRpcHook,\n  SnapRpcHookArgs,\n  StatusContext,\n  StatusEvents,\n  StatusStates,\n  TruncatedSnap,\n  TruncatedSnapFields,\n} from '@metamask/snaps-utils';\nimport {\n  validateComponentLinks,\n  assertIsSnapManifest,\n  assertIsValidSnapId,\n  DEFAULT_ENDOWMENTS,\n  DEFAULT_REQUESTED_SNAP_VERSION,\n  encodeAuxiliaryFile,\n  HandlerType,\n  isOriginAllowed,\n  logError,\n  normalizeRelative,\n  OnTransactionResponseStruct,\n  resolveVersionRange,\n  SnapCaveatType,\n  SnapStatus,\n  SnapStatusEvents,\n  validateFetchedSnap,\n  unwrapError,\n  OnHomePageResponseStruct,\n  getValidatedLocalizationFiles,\n  encodeBase64,\n} from '@metamask/snaps-utils';\nimport type { Json, NonEmptyArray, SemVerRange } from '@metamask/utils';\nimport {\n  assert,\n  assertIsJsonRpcRequest,\n  assertStruct,\n  Duration,\n  gtRange,\n  gtVersion,\n  hasProperty,\n  inMilliseconds,\n  isNonEmptyArray,\n  isValidSemVerRange,\n  satisfiesVersionRange,\n  timeSince,\n} from '@metamask/utils';\nimport type { StateMachine } from '@xstate/fsm';\nimport { createMachine, interpret } from '@xstate/fsm';\nimport type { Patch } from 'immer';\nimport { nanoid } from 'nanoid';\n\nimport { forceStrict, validateMachine } from '../fsm';\nimport { log } from '../logging';\nimport type {\n  ExecuteSnapAction,\n  ExecutionServiceEvents,\n  HandleRpcRequestAction,\n  SnapErrorJson,\n  TerminateAllSnapsAction,\n  TerminateSnapAction,\n} from '../services';\nimport { getSnapFiles, hasTimedOut, setDiff, withTimeout } from '../utils';\nimport { handlerEndowments, SnapEndowments } from './endowments';\nimport { getKeyringCaveatOrigins } from './endowments/keyring';\nimport { getRpcCaveatOrigins } from './endowments/rpc';\nimport type { SnapLocation } from './location';\nimport { detectSnapLocation } from './location';\nimport { processSnapPermissions } from './permissions';\nimport type {\n  GetMetadata,\n  GetResult,\n  ResolveVersion,\n  SnapsRegistryInfo,\n  SnapsRegistryMetadata,\n  SnapsRegistryRequest,\n  Update,\n} from './registry';\nimport { SnapsRegistryStatus } from './registry';\nimport { RequestQueue } from './RequestQueue';\nimport { Timer } from './Timer';\n\nexport const controllerName = 'SnapController';\n\n// TODO: Figure out how to name these\nexport const SNAP_APPROVAL_INSTALL = 'wallet_installSnap';\nexport const SNAP_APPROVAL_UPDATE = 'wallet_updateSnap';\nexport const SNAP_APPROVAL_RESULT = 'wallet_installSnapResult';\n\nconst TRUNCATED_SNAP_PROPERTIES = new Set<TruncatedSnapFields>([\n  'initialPermissions',\n  'id',\n  'version',\n  'enabled',\n  'blocked',\n]);\n\nexport type PendingRequest = {\n  requestId: unknown;\n  timer: Timer;\n};\n\n/**\n * A wrapper type for any data stored during runtime of Snaps.\n * It is not persisted in state as it contains non-serializable data and is only relevant for the\n * current session.\n */\nexport interface SnapRuntimeData {\n  /**\n   * A promise that resolves when the Snap has finished installing\n   */\n  installPromise: null | Promise<PersistedSnap>;\n\n  /**\n   * A Unix timestamp for the last time the Snap received an RPC request\n   */\n  lastRequest: null | number;\n\n  /**\n   * The current number of active references where this Snap is being used\n   */\n  activeReferences: number;\n\n  /**\n   * The current pending inbound requests, meaning requests that are processed by snaps.\n   */\n  pendingInboundRequests: PendingRequest[];\n\n  /**\n   * The current pending outbound requests, meaning requests made from snaps towards the MetaMask\n   * extension.\n   */\n  pendingOutboundRequests: number;\n\n  /**\n   * RPC handler designated for the Snap\n   */\n  rpcHandler: null | SnapRpcHook;\n\n  /**\n   * The finite state machine interpreter for possible states that the Snap can be in such as\n   * stopped, running, blocked\n   *\n   * @see {@link SnapController:constructor}\n   */\n  interpreter: StateMachine.Service<StatusContext, StatusEvents, StatusStates>;\n}\n\nexport type SnapError = {\n  message: string;\n  code: number;\n  data?: Json;\n};\n\n/**\n * The return type of {@link SnapController.#fetchSnap} and its sibling methods.\n */\ntype FetchSnapResult = {\n  /**\n   * All files referenced in the manifest, including the manifest itself.\n   */\n  files: FetchedSnapFiles;\n\n  /**\n   * Location that was used to fetch the snap.\n   *\n   * Helpful if you want to pass it forward since files will be still cached.\n   */\n  location: SnapLocation;\n};\n\n// Types that probably should be defined elsewhere in prod\ntype CloseAllConnectionsFunction = (origin: string) => void;\ntype StoredSnaps = Record<SnapId, Snap>;\n\nexport type SnapControllerState = {\n  snaps: StoredSnaps;\n  snapStates: Record<SnapId, string | null>;\n  unencryptedSnapStates: Record<SnapId, string | null>;\n};\n\nexport type PersistedSnapControllerState = SnapControllerState & {\n  snaps: Record<SnapId, PersistedSnap>;\n  snapStates: Record<SnapId, string>;\n};\n\ntype RollbackSnapshot = {\n  statePatches: Patch[];\n  permissions: {\n    revoked: unknown;\n    granted: unknown[];\n    requestData: unknown;\n  };\n  newVersion: string;\n};\n\ntype PendingApproval = {\n  id: string;\n  promise: Promise<unknown>;\n};\n\n// Controller Messenger Actions\n\n/**\n * Gets the specified Snap from state.\n */\nexport type GetSnap = {\n  type: `${typeof controllerName}:get`;\n  handler: SnapController['get'];\n};\n\n/**\n * Handles sending an inbound request to a snap and returns its result.\n */\nexport type HandleSnapRequest = {\n  type: `${typeof controllerName}:handleRequest`;\n  handler: SnapController['handleRequest'];\n};\n\n/**\n * Gets the specified Snap's persisted state.\n */\nexport type GetSnapState = {\n  type: `${typeof controllerName}:getSnapState`;\n  handler: SnapController['getSnapState'];\n};\n\n/**\n * Checks if the specified snap exists in state.\n */\nexport type HasSnap = {\n  type: `${typeof controllerName}:has`;\n  handler: SnapController['has'];\n};\n\n/**\n * Updates the specified Snap's persisted state.\n */\nexport type UpdateSnapState = {\n  type: `${typeof controllerName}:updateSnapState`;\n  handler: SnapController['updateSnapState'];\n};\n\n/**\n * Clears the specified Snap's persisted state.\n */\nexport type ClearSnapState = {\n  type: `${typeof controllerName}:clearSnapState`;\n  handler: SnapController['clearSnapState'];\n};\n\n/**\n * Checks all installed snaps against the blocklist.\n */\nexport type UpdateBlockedSnaps = {\n  type: `${typeof controllerName}:updateBlockedSnaps`;\n  handler: SnapController['updateBlockedSnaps'];\n};\n\nexport type EnableSnap = {\n  type: `${typeof controllerName}:enable`;\n  handler: SnapController['enableSnap'];\n};\n\nexport type DisableSnap = {\n  type: `${typeof controllerName}:disable`;\n  handler: SnapController['disableSnap'];\n};\n\nexport type RemoveSnap = {\n  type: `${typeof controllerName}:remove`;\n  handler: SnapController['removeSnap'];\n};\n\nexport type GetPermittedSnaps = {\n  type: `${typeof controllerName}:getPermitted`;\n  handler: SnapController['getPermittedSnaps'];\n};\n\nexport type GetAllSnaps = {\n  type: `${typeof controllerName}:getAll`;\n  handler: SnapController['getAllSnaps'];\n};\n\nexport type IncrementActiveReferences = {\n  type: `${typeof controllerName}:incrementActiveReferences`;\n  handler: SnapController['incrementActiveReferences'];\n};\n\nexport type DecrementActiveReferences = {\n  type: `${typeof controllerName}:decrementActiveReferences`;\n  handler: SnapController['decrementActiveReferences'];\n};\n\nexport type InstallSnaps = {\n  type: `${typeof controllerName}:install`;\n  handler: SnapController['installSnaps'];\n};\n\nexport type GetRegistryMetadata = {\n  type: `${typeof controllerName}:getRegistryMetadata`;\n  handler: SnapController['getRegistryMetadata'];\n};\n\nexport type DisconnectOrigin = {\n  type: `${typeof controllerName}:disconnectOrigin`;\n  handler: SnapController['removeSnapFromSubject'];\n};\n\nexport type RevokeDynamicPermissions = {\n  type: `${typeof controllerName}:revokeDynamicPermissions`;\n  handler: SnapController['revokeDynamicSnapPermissions'];\n};\n\nexport type GetSnapFile = {\n  type: `${typeof controllerName}:getFile`;\n  handler: SnapController['getSnapFile'];\n};\n\nexport type SnapControllerActions =\n  | ClearSnapState\n  | GetSnap\n  | GetSnapState\n  | HandleSnapRequest\n  | HasSnap\n  | UpdateBlockedSnaps\n  | UpdateSnapState\n  | EnableSnap\n  | DisableSnap\n  | RemoveSnap\n  | GetPermittedSnaps\n  | InstallSnaps\n  | GetAllSnaps\n  | IncrementActiveReferences\n  | DecrementActiveReferences\n  | GetRegistryMetadata\n  | DisconnectOrigin\n  | RevokeDynamicPermissions\n  | GetSnapFile;\n\n// Controller Messenger Events\n\nexport type SnapStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [SnapControllerState, Patch[]];\n};\n\n/**\n * Emitted when a Snap has been added to state during installation.\n */\nexport type SnapAdded = {\n  type: `${typeof controllerName}:snapAdded`;\n  payload: [snap: Snap, svgIcon: string | undefined];\n};\n\n/**\n * Emitted when an installed snap has been blocked.\n */\nexport type SnapBlocked = {\n  type: `${typeof controllerName}:snapBlocked`;\n  payload: [snapId: string, blockedSnapInfo?: BlockReason];\n};\n\n/**\n * Emitted when a snap has been started after being added and authorized during\n * installation.\n */\nexport type SnapInstalled = {\n  type: `${typeof controllerName}:snapInstalled`;\n  payload: [snap: TruncatedSnap, origin: string];\n};\n\n/**\n * Emitted when a snap that has previously been fully installed, is uninstalled.\n */\nexport type SnapUninstalled = {\n  type: `${typeof controllerName}:snapUninstalled`;\n  payload: [snap: TruncatedSnap];\n};\n\n/**\n * Emitted when a snap is removed from state, this may happen even\n * if a snap has not fully completed installation.\n */\nexport type SnapRemoved = {\n  type: `${typeof controllerName}:snapRemoved`;\n  payload: [snap: TruncatedSnap];\n};\n\n/**\n * Emitted when an installed snap has been unblocked.\n */\nexport type SnapUnblocked = {\n  type: `${typeof controllerName}:snapUnblocked`;\n  payload: [snapId: string];\n};\n\n/**\n * Emitted when a snap is updated.\n */\nexport type SnapUpdated = {\n  type: `${typeof controllerName}:snapUpdated`;\n  payload: [snap: TruncatedSnap, oldVersion: string, origin: string];\n};\n\n/**\n * Emitted when a snap is rolled back.\n */\nexport type SnapRolledback = {\n  type: `${typeof controllerName}:snapRolledback`;\n  payload: [snap: TruncatedSnap, failedVersion: string];\n};\n\n/**\n * Emitted when a Snap is terminated. This is different from the snap being\n * stopped as it can also be triggered when a snap fails initialization.\n */\nexport type SnapTerminated = {\n  type: `${typeof controllerName}:snapTerminated`;\n  payload: [snap: TruncatedSnap];\n};\n\n/**\n * Emitted when a Snap is enabled by a user.\n * This is not emitted by default when installing a snap.\n */\nexport type SnapEnabled = {\n  type: `${typeof controllerName}:snapEnabled`;\n  payload: [snap: TruncatedSnap];\n};\n\n/**\n * Emitted when a Snap is disabled by a user.\n */\nexport type SnapDisabled = {\n  type: `${typeof controllerName}:snapDisabled`;\n  payload: [snap: TruncatedSnap];\n};\n\nexport type SnapControllerEvents =\n  | SnapAdded\n  | SnapBlocked\n  | SnapInstalled\n  | SnapUninstalled\n  | SnapRemoved\n  | SnapStateChange\n  | SnapUnblocked\n  | SnapUpdated\n  | SnapRolledback\n  | SnapTerminated\n  | SnapEnabled\n  | SnapDisabled;\n\nexport type AllowedActions =\n  | GetEndowments\n  | GetPermissions\n  | GetSubjects\n  | GetSubjectMetadata\n  | HasPermission\n  | HasPermissions\n  | RevokePermissions\n  | RevokeAllPermissions\n  | RevokePermissionForAllSubjects\n  | GrantPermissions\n  | AddApprovalRequest\n  | HandleRpcRequestAction\n  | ExecuteSnapAction\n  | TerminateAllSnapsAction\n  | TerminateSnapAction\n  | UpdateCaveat\n  | UpdateRequestState\n  | GetResult\n  | GetMetadata\n  | Update\n  | ResolveVersion\n  | TestOrigin\n  | MaybeUpdateState;\n\nexport type AllowedEvents =\n  | ExecutionServiceEvents\n  | SnapInstalled\n  | SnapUpdated;\n\ntype SnapControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SnapControllerActions | AllowedActions,\n  SnapControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\ntype FeatureFlags = {\n  requireAllowlist?: boolean;\n  allowLocalSnaps?: boolean;\n};\n\ntype SnapControllerArgs = {\n  /**\n   * A teardown function that allows the host to clean up its instrumentation\n   * for a running snap.\n   */\n  closeAllConnections?: CloseAllConnectionsFunction;\n\n  /**\n   * A list of permissions that are allowed to be dynamic, meaning they can be revoked from the snap whenever.\n   */\n  dynamicPermissions?: string[];\n\n  /**\n   * The names of endowment permissions whose values are the names of JavaScript\n   * APIs that will be added to the snap execution environment at runtime.\n   */\n  environmentEndowmentPermissions?: string[];\n\n  /**\n   * Excluded permissions with its associated error message used to forbid certain permssions.\n   */\n  excludedPermissions?: Record<string, string>;\n\n  /**\n   * The function that will be used by the controller fo make network requests.\n   * Should be compatible with {@link fetch}.\n   */\n  fetchFunction?: typeof fetch;\n\n  /**\n   * Flags that enable or disable features in the controller.\n   * See {@link FeatureFlags}.\n   */\n  featureFlags: FeatureFlags;\n\n  /**\n   * How frequently to check whether a snap is idle.\n   */\n  idleTimeCheckInterval?: number;\n\n  /**\n   * The maximum amount of time that a snap may be idle.\n   */\n  maxIdleTime?: number;\n\n  /**\n   * The controller messenger.\n   */\n  messenger: SnapControllerMessenger;\n\n  /**\n   * The maximum amount of time a snap may take to process an RPC request,\n   * unless it is permitted to take longer.\n   */\n  maxRequestTime?: number;\n\n  /**\n   * The npm registry URL that will be used to fetch published snaps.\n   */\n  npmRegistryUrl?: string;\n\n  /**\n   * Persisted state that will be used for rehydration.\n   */\n  state?: PersistedSnapControllerState;\n\n  /**\n   * A function that takes Snap Id and converts it into a class that fetches files.\n   *\n   * Used for test overrides.\n   */\n  detectSnapLocation?: typeof detectSnapLocation;\n};\ntype AddSnapArgs = {\n  id: SnapId;\n  origin: string;\n  location: SnapLocation;\n  versionRange: SemVerRange;\n};\n\n// When we set a snap, we need all required properties to be present and\n// validated.\ntype SetSnapArgs = Omit<AddSnapArgs, 'location' | 'versionRange'> & {\n  files: FetchedSnapFiles;\n  isUpdate?: boolean;\n};\n\nconst defaultState: SnapControllerState = {\n  snaps: {},\n  snapStates: {},\n  unencryptedSnapStates: {},\n};\n\n/**\n * Truncates the properties of a snap to only ones that are easily serializable.\n *\n * @param snap - The snap to truncate.\n * @returns Object with serializable snap properties.\n */\nfunction truncateSnap(snap: Snap): TruncatedSnap {\n  const truncatedSnap = Object.keys(snap).reduce<Partial<TruncatedSnap>>(\n    (serialized, key) => {\n      if (TRUNCATED_SNAP_PROPERTIES.has(key as any)) {\n        serialized[key as keyof TruncatedSnap] = snap[\n          key as keyof TruncatedSnap\n        ] as any;\n      }\n\n      return serialized;\n    },\n    {},\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return truncatedSnap as TruncatedSnap;\n}\n\nconst name = 'SnapController';\n\n/*\n * A snap is initialized in three phases:\n * - Add: Loads the snap from a remote source and parses it.\n * - Authorize: Requests the snap's required permissions from the user.\n * - Start: Initializes the snap in its SES realm with the authorized permissions.\n */\n\nexport class SnapController extends BaseController<\n  string,\n  SnapControllerState,\n  SnapControllerMessenger\n> {\n  #closeAllConnections?: CloseAllConnectionsFunction;\n\n  #dynamicPermissions: string[];\n\n  #environmentEndowmentPermissions: string[];\n\n  #excludedPermissions: Record<string, string>;\n\n  #featureFlags: FeatureFlags;\n\n  #fetchFunction: typeof fetch;\n\n  #idleTimeCheckInterval: number;\n\n  #maxIdleTime: number;\n\n  // This property cannot be hash private yet because of tests.\n  private readonly maxRequestTime: number;\n\n  #detectSnapLocation: typeof detectSnapLocation;\n\n  #snapsRuntimeData: Map<SnapId, SnapRuntimeData>;\n\n  #rollbackSnapshots: Map<string, RollbackSnapshot>;\n\n  #timeoutForLastRequestStatus?: number;\n\n  #statusMachine!: StateMachine.Machine<\n    StatusContext,\n    StatusEvents,\n    StatusStates\n  >;\n\n  constructor({\n    closeAllConnections,\n    messenger,\n    state,\n    dynamicPermissions = ['eth_accounts'],\n    environmentEndowmentPermissions = [],\n    excludedPermissions = {},\n    idleTimeCheckInterval = inMilliseconds(5, Duration.Second),\n    maxIdleTime = inMilliseconds(30, Duration.Second),\n    maxRequestTime = inMilliseconds(60, Duration.Second),\n    fetchFunction = globalThis.fetch.bind(globalThis),\n    featureFlags = {},\n    detectSnapLocation: detectSnapLocationFunction = detectSnapLocation,\n  }: SnapControllerArgs) {\n    super({\n      messenger,\n      metadata: {\n        snapStates: {\n          persist: true,\n          anonymous: false,\n        },\n        unencryptedSnapStates: {\n          persist: true,\n          anonymous: false,\n        },\n        snaps: {\n          persist: (snaps) => {\n            return (\n              Object.values(snaps)\n                // We should not persist snaps that are in the installing state,\n                // since they haven't completed installation and would be unusable\n                .filter((snap) => snap.status !== SnapStatus.Installing)\n                .map((snap) => {\n                  return {\n                    ...snap,\n                    // At the time state is rehydrated, no snap will be running.\n                    status: SnapStatus.Stopped,\n                  };\n                })\n                .reduce((memo: Record<SnapId, Snap>, snap) => {\n                  memo[snap.id] = snap;\n                  return memo;\n                }, {})\n            );\n          },\n          anonymous: false,\n        },\n      },\n      name,\n      state: {\n        ...defaultState,\n        ...state,\n      },\n    });\n\n    this.#closeAllConnections = closeAllConnections;\n    this.#dynamicPermissions = dynamicPermissions;\n    this.#environmentEndowmentPermissions = environmentEndowmentPermissions;\n    this.#excludedPermissions = excludedPermissions;\n    this.#featureFlags = featureFlags;\n    this.#fetchFunction = fetchFunction;\n    this.#idleTimeCheckInterval = idleTimeCheckInterval;\n    this.#maxIdleTime = maxIdleTime;\n    this.maxRequestTime = maxRequestTime;\n    this.#detectSnapLocation = detectSnapLocationFunction;\n    this._onUnhandledSnapError = this._onUnhandledSnapError.bind(this);\n    this._onOutboundRequest = this._onOutboundRequest.bind(this);\n    this._onOutboundResponse = this._onOutboundResponse.bind(this);\n    this.#rollbackSnapshots = new Map();\n    this.#snapsRuntimeData = new Map();\n    this.#pollForLastRequestStatus();\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    this.messagingSystem.subscribe(\n      'ExecutionService:unhandledError',\n      this._onUnhandledSnapError,\n    );\n\n    this.messagingSystem.subscribe(\n      'ExecutionService:outboundRequest',\n      this._onOutboundRequest,\n    );\n\n    this.messagingSystem.subscribe(\n      'ExecutionService:outboundResponse',\n      this._onOutboundResponse,\n    );\n    /* eslint-enable @typescript-eslint/unbound-method */\n\n    this.messagingSystem.subscribe('SnapController:snapInstalled', ({ id }) => {\n      this.#callLifecycleHook(id, HandlerType.OnInstall).catch((error) => {\n        logError(\n          `Error when calling \\`onInstall\\` lifecycle hook for snap \"${id}\": ${getErrorMessage(\n            error,\n          )}`,\n        );\n      });\n    });\n\n    this.messagingSystem.subscribe('SnapController:snapUpdated', ({ id }) => {\n      this.#callLifecycleHook(id, HandlerType.OnUpdate).catch((error) => {\n        logError(\n          `Error when calling \\`onUpdate\\` lifecycle hook for snap \"${id}\": ${getErrorMessage(\n            error,\n          )}`,\n        );\n      });\n    });\n\n    this.#initializeStateMachine();\n    this.#registerMessageHandlers();\n\n    Object.values(state?.snaps ?? {}).forEach((snap) =>\n      this.#setupRuntime(snap.id),\n    );\n  }\n\n  /**\n   * We track status of a Snap using a finite-state-machine.\n   * It keeps track of whether the snap is started / stopped / etc.\n   *\n   * @see {@link SnapController.transition} for interacting with the machine.\n   */\n  // We initialize the machine in the instance because the status is currently tightly coupled\n  // with the SnapController - the guard checks for enabled status inside the SnapController state.\n  // In the future, side-effects could be added to the machine during transitions.\n  #initializeStateMachine() {\n    const disableGuard = ({ snapId }: StatusContext) => {\n      return this.getExpect(snapId).enabled;\n    };\n\n    const statusConfig: StateMachine.Config<\n      StatusContext,\n      StatusEvents,\n      StatusStates\n    > = {\n      initial: SnapStatus.Installing,\n      states: {\n        [SnapStatus.Installing]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n          },\n        },\n        [SnapStatus.Updating]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n            [SnapStatusEvents.Stop]: SnapStatus.Stopped,\n          },\n        },\n        [SnapStatus.Running]: {\n          on: {\n            [SnapStatusEvents.Stop]: SnapStatus.Stopped,\n            [SnapStatusEvents.Crash]: SnapStatus.Crashed,\n          },\n        },\n        [SnapStatus.Stopped]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n            [SnapStatusEvents.Update]: SnapStatus.Updating,\n          },\n        },\n        [SnapStatus.Crashed]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n            [SnapStatusEvents.Update]: SnapStatus.Updating,\n          },\n        },\n      },\n    };\n    this.#statusMachine = createMachine(statusConfig);\n    validateMachine(this.#statusMachine);\n  }\n\n  /**\n   * Constructor helper for registering the controller's messaging system\n   * actions.\n   */\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearSnapState`,\n      (...args) => this.clearSnapState(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:get`,\n      (...args) => this.get(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getSnapState`,\n      (...args) => this.getSnapState(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:handleRequest`,\n      async (...args) => this.handleRequest(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:has`,\n      (...args) => this.has(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateBlockedSnaps`,\n      async () => this.updateBlockedSnaps(),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateSnapState`,\n      (...args) => this.updateSnapState(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:enable`,\n      (...args) => this.enableSnap(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:disable`,\n      async (...args) => this.disableSnap(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:remove`,\n      async (...args) => this.removeSnap(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getPermitted`,\n      (...args) => this.getPermittedSnaps(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:install`,\n      async (...args) => this.installSnaps(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getAll`,\n      (...args) => this.getAllSnaps(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:incrementActiveReferences`,\n      (...args) => this.incrementActiveReferences(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:decrementActiveReferences`,\n      (...args) => this.decrementActiveReferences(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getRegistryMetadata`,\n      async (...args) => this.getRegistryMetadata(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:disconnectOrigin`,\n      (...args) => this.removeSnapFromSubject(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokeDynamicPermissions`,\n      (...args) => this.revokeDynamicSnapPermissions(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getFile`,\n      async (...args) => this.getSnapFile(...args),\n    );\n  }\n\n  #pollForLastRequestStatus() {\n    this.#timeoutForLastRequestStatus = setTimeout(() => {\n      this.#stopSnapsLastRequestPastMax().catch((error) => {\n        // TODO: Decide how to handle errors.\n        logError(error);\n      });\n\n      this.#pollForLastRequestStatus();\n    }, this.#idleTimeCheckInterval) as unknown as number;\n  }\n\n  /**\n   * Checks all installed snaps against the block list and\n   * blocks/unblocks snaps as appropriate. See {@link SnapController.blockSnap}\n   * for more information.\n   */\n  async updateBlockedSnaps(): Promise<void> {\n    await this.messagingSystem.call('SnapsRegistry:update');\n\n    const blockedSnaps = await this.messagingSystem.call(\n      'SnapsRegistry:get',\n      Object.values(this.state.snaps).reduce<SnapsRegistryRequest>(\n        (blockListArg, snap) => {\n          blockListArg[snap.id] = {\n            version: snap.version,\n            checksum: snap.manifest.source.shasum,\n          };\n          return blockListArg;\n        },\n        {},\n      ),\n    );\n\n    await Promise.all(\n      Object.entries(blockedSnaps).map(async ([snapId, { status, reason }]) => {\n        if (status === SnapsRegistryStatus.Blocked) {\n          return this.#blockSnap(snapId as SnapId, reason);\n        }\n\n        return this.#unblockSnap(snapId as SnapId);\n      }),\n    );\n  }\n\n  /**\n   * Blocks an installed snap and prevents it from being started again. Emits\n   * {@link SnapBlocked}. Does nothing if the snap is not installed.\n   *\n   * @param snapId - The snap to block.\n   * @param blockedSnapInfo - Information detailing why the snap is blocked.\n   */\n  async #blockSnap(\n    snapId: SnapId,\n    blockedSnapInfo?: BlockReason,\n  ): Promise<void> {\n    if (!this.has(snapId)) {\n      return;\n    }\n\n    try {\n      this.update((state: any) => {\n        state.snaps[snapId].blocked = true;\n        state.snaps[snapId].blockInformation = blockedSnapInfo;\n      });\n\n      await this.disableSnap(snapId);\n    } catch (error) {\n      logError(\n        `Encountered error when stopping blocked snap \"${snapId}\".`,\n        error,\n      );\n    }\n\n    this.messagingSystem.publish(\n      `${controllerName}:snapBlocked`,\n      snapId,\n      blockedSnapInfo,\n    );\n  }\n\n  /**\n   * Unblocks a snap so that it can be enabled and started again. Emits\n   * {@link SnapUnblocked}. Does nothing if the snap is not installed or already\n   * unblocked.\n   *\n   * @param snapId - The id of the snap to unblock.\n   */\n  #unblockSnap(snapId: SnapId) {\n    if (!this.has(snapId) || !this.state.snaps[snapId].blocked) {\n      return;\n    }\n\n    this.update((state: any) => {\n      state.snaps[snapId].blocked = false;\n      delete state.snaps[snapId].blockInformation;\n    });\n\n    this.messagingSystem.publish(`${controllerName}:snapUnblocked`, snapId);\n  }\n\n  async #assertIsInstallAllowed(snapId: SnapId, snapInfo: SnapsRegistryInfo) {\n    const results = await this.messagingSystem.call('SnapsRegistry:get', {\n      [snapId]: snapInfo,\n    });\n    const result = results[snapId];\n    if (result.status === SnapsRegistryStatus.Blocked) {\n      throw new Error(\n        `Cannot install version \"${\n          snapInfo.version\n        }\" of snap \"${snapId}\": The version is blocked. ${\n          result.reason?.explanation ?? ''\n        }`,\n      );\n    } else if (\n      this.#featureFlags.requireAllowlist &&\n      result.status !== SnapsRegistryStatus.Verified\n    ) {\n      throw new Error(\n        `Cannot install version \"${snapInfo.version}\" of snap \"${snapId}\": The snap is not on the allowlist.`,\n      );\n    }\n  }\n\n  async #stopSnapsLastRequestPastMax() {\n    const entries = [...this.#snapsRuntimeData.entries()];\n    return Promise.all(\n      entries\n        .filter(\n          ([_snapId, runtime]) =>\n            runtime.activeReferences === 0 &&\n            runtime.pendingInboundRequests.length === 0 &&\n            runtime.lastRequest &&\n            this.#maxIdleTime &&\n            timeSince(runtime.lastRequest) > this.#maxIdleTime,\n        )\n        .map(async ([snapId]) => this.stopSnap(snapId, SnapStatusEvents.Stop)),\n    );\n  }\n\n  _onUnhandledSnapError(snapId: string, _error: SnapErrorJson) {\n    this.stopSnap(snapId as SnapId, SnapStatusEvents.Crash).catch(\n      (stopSnapError) => {\n        // TODO: Decide how to handle errors.\n        logError(stopSnapError);\n      },\n    );\n  }\n\n  _onOutboundRequest(snapId: string) {\n    const runtime = this.#getRuntimeExpect(snapId as SnapId);\n    // Ideally we would only pause the pending request that is making the outbound request\n    // but right now we don't have a way to know which request initiated the outbound request\n    runtime.pendingInboundRequests\n      .filter((pendingRequest) => pendingRequest.timer.status === 'running')\n      .forEach((pendingRequest) => pendingRequest.timer.pause());\n    runtime.pendingOutboundRequests += 1;\n  }\n\n  _onOutboundResponse(snapId: string) {\n    const runtime = this.#getRuntimeExpect(snapId as SnapId);\n    runtime.pendingOutboundRequests -= 1;\n    if (runtime.pendingOutboundRequests === 0) {\n      runtime.pendingInboundRequests\n        .filter((pendingRequest) => pendingRequest.timer.status === 'paused')\n        .forEach((pendingRequest) => pendingRequest.timer.resume());\n    }\n  }\n\n  /**\n   * Transitions between states using `snapStatusStateMachineConfig` as the template to figure out\n   * the next state. This transition function uses a very minimal subset of XState conventions:\n   * - supports initial state\n   * - .on supports raw event target string\n   * - .on supports {target, cond} object\n   * - the arguments for `cond` is the `SerializedSnap` instead of Xstate convention of `(event,\n   * context) => boolean`\n   *\n   * @param snapId - The id of the snap to transition.\n   * @param event - The event enum to use to transition.\n   */\n  #transition(snapId: SnapId, event: StatusEvents | StatusEvents['type']) {\n    const { interpreter } = this.#getRuntimeExpect(snapId);\n    interpreter.send(event);\n    this.update((state: any) => {\n      state.snaps[snapId].status = interpreter.state.value;\n    });\n  }\n\n  /**\n   * Starts the given snap. Throws an error if no such snap exists\n   * or if it is already running.\n   *\n   * @param snapId - The id of the Snap to start.\n   */\n  async startSnap(snapId: SnapId): Promise<void> {\n    const snap = this.state.snaps[snapId];\n\n    if (snap.enabled === false) {\n      throw new Error(`Snap \"${snapId}\" is disabled.`);\n    }\n\n    await this.#startSnap({\n      snapId,\n      sourceCode: snap.sourceCode,\n    });\n  }\n\n  /**\n   * Enables the given snap. A snap can only be started if it is enabled. A snap\n   * can only be enabled if it isn't blocked.\n   *\n   * @param snapId - The id of the Snap to enable.\n   */\n  enableSnap(snapId: SnapId): void {\n    this.getExpect(snapId);\n\n    if (this.state.snaps[snapId].blocked) {\n      throw new Error(`Snap \"${snapId}\" is blocked and cannot be enabled.`);\n    }\n\n    this.update((state: any) => {\n      state.snaps[snapId].enabled = true;\n    });\n\n    this.messagingSystem.publish(\n      'SnapController:snapEnabled',\n      this.getTruncatedExpect(snapId),\n    );\n  }\n\n  /**\n   * Disables the given snap. A snap can only be started if it is enabled.\n   *\n   * @param snapId - The id of the Snap to disable.\n   * @returns A promise that resolves once the snap has been disabled.\n   */\n  async disableSnap(snapId: SnapId): Promise<void> {\n    if (!this.has(snapId)) {\n      throw new Error(`Snap \"${snapId}\" not found.`);\n    }\n\n    this.update((state: any) => {\n      state.snaps[snapId].enabled = false;\n    });\n\n    if (this.isRunning(snapId)) {\n      await this.stopSnap(snapId, SnapStatusEvents.Stop);\n    }\n\n    this.messagingSystem.publish(\n      'SnapController:snapDisabled',\n      this.getTruncatedExpect(snapId),\n    );\n  }\n\n  /**\n   * Stops the given snap, removes all hooks, closes all connections, and\n   * terminates its worker.\n   *\n   * @param snapId - The id of the Snap to stop.\n   * @param statusEvent - The Snap status event that caused the snap to be\n   * stopped.\n   */\n  public async stopSnap(\n    snapId: SnapId,\n    statusEvent:\n      | SnapStatusEvents.Stop\n      | SnapStatusEvents.Crash = SnapStatusEvents.Stop,\n  ): Promise<void> {\n    const runtime = this.#getRuntime(snapId);\n    if (!runtime) {\n      throw new Error(`The snap \"${snapId}\" is not running.`);\n    }\n\n    // Reset request tracking\n    runtime.lastRequest = null;\n    runtime.pendingInboundRequests = [];\n    runtime.pendingOutboundRequests = 0;\n    try {\n      if (this.isRunning(snapId)) {\n        this.#closeAllConnections?.(snapId);\n        await this.#terminateSnap(snapId);\n      }\n    } finally {\n      if (this.isRunning(snapId)) {\n        this.#transition(snapId, statusEvent);\n      }\n    }\n  }\n\n  /**\n   * Terminates the specified snap and emits the `snapTerminated` event.\n   *\n   * @param snapId - The snap to terminate.\n   */\n  async #terminateSnap(snapId: SnapId) {\n    await this.messagingSystem.call('ExecutionService:terminateSnap', snapId);\n    this.messagingSystem.publish(\n      'SnapController:snapTerminated',\n      this.getTruncatedExpect(snapId),\n    );\n  }\n\n  /**\n   * Returns whether the given snap is running.\n   * Throws an error if the snap doesn't exist.\n   *\n   * @param snapId - The id of the Snap to check.\n   * @returns `true` if the snap is running, otherwise `false`.\n   */\n  isRunning(snapId: SnapId): boolean {\n    return this.getExpect(snapId).status === 'running';\n  }\n\n  /**\n   * Returns whether the given snap has been added to state.\n   *\n   * @param snapId - The id of the Snap to check for.\n   * @returns `true` if the snap exists in the controller state, otherwise `false`.\n   */\n  has(snapId: SnapId): boolean {\n    return Boolean(this.get(snapId));\n  }\n\n  /**\n   * Gets the snap with the given id if it exists, including all data.\n   * This should not be used if the snap is to be serializable, as e.g.\n   * the snap sourceCode may be quite large.\n   *\n   * @param snapId - The id of the Snap to get.\n   * @returns The entire snap object from the controller state.\n   */\n  get(snapId: string): Snap | undefined {\n    return this.state.snaps[snapId as SnapId];\n  }\n\n  /**\n   * Gets the snap with the given id, throws if doesn't.\n   * This should not be used if the snap is to be serializable, as e.g.\n   * the snap sourceCode may be quite large.\n   *\n   * @see {@link SnapController.get}\n   * @throws {@link Error}. If the snap doesn't exist\n   * @param snapId - The id of the snap to get.\n   * @returns The entire snap object.\n   */\n  getExpect(snapId: SnapId): Snap {\n    const snap = this.get(snapId);\n    assert(snap !== undefined, new Error(`Snap \"${snapId}\" not found.`));\n    return snap;\n  }\n\n  /**\n   * Gets the snap with the given id if it exists, excluding any\n   * non-serializable or expensive-to-serialize data.\n   *\n   * @param snapId - The id of the Snap to get.\n   * @returns A truncated version of the snap state, that is less expensive to serialize.\n   */\n  // TODO(ritave): this.get returns undefined, this.getTruncated returns null\n  getTruncated(snapId: SnapId): TruncatedSnap | null {\n    const snap = this.get(snapId);\n\n    return snap ? truncateSnap(snap) : null;\n  }\n\n  /**\n   * Gets the snap with the given id, throw if it doesn't exist.\n   *\n   * @throws {@link Error}. If snap doesn't exist\n   * @param snapId - The id of the snap to get.\n   * @returns A truncated version of the snap state, that is less expensive to serialize.\n   */\n  getTruncatedExpect(snapId: SnapId): TruncatedSnap {\n    return truncateSnap(this.getExpect(snapId));\n  }\n\n  /**\n   * Updates the own state of the snap with the given id.\n   * This is distinct from the state MetaMask uses to manage snaps.\n   *\n   * @param snapId - The id of the Snap whose state should be updated.\n   * @param newSnapState - The new state of the snap.\n   * @param encrypted - A flag to indicate whether to use encrypted storage or not.\n   */\n  updateSnapState(snapId: SnapId, newSnapState: string, encrypted: boolean) {\n    this.update((state) => {\n      if (encrypted) {\n        state.snapStates[snapId] = newSnapState;\n      } else {\n        state.unencryptedSnapStates[snapId] = newSnapState;\n      }\n    });\n  }\n\n  /**\n   * Clears the state of the snap with the given id.\n   * This is distinct from the state MetaMask uses to manage snaps.\n   *\n   * @param snapId - The id of the Snap whose state should be cleared.\n   * @param encrypted - A flag to indicate whether to use encrypted storage or not.\n   */\n  clearSnapState(snapId: SnapId, encrypted: boolean) {\n    this.update((state) => {\n      if (encrypted) {\n        state.snapStates[snapId] = null;\n      } else {\n        state.unencryptedSnapStates[snapId] = null;\n      }\n    });\n  }\n\n  /**\n   * Gets the own state of the snap with the given id.\n   * This is distinct from the state MetaMask uses to manage snaps.\n   *\n   * @param snapId - The id of the Snap whose state to get.\n   * @param encrypted - A flag to indicate whether to use encrypted storage or not.\n   * @returns The requested snap state or null if no state exists.\n   */\n  getSnapState(snapId: SnapId, encrypted: boolean): Json {\n    const state = encrypted\n      ? this.state.snapStates[snapId]\n      : this.state.unencryptedSnapStates[snapId];\n    return state ?? null;\n  }\n\n  /**\n   * Gets a static auxiliary snap file in a chosen file encoding.\n   *\n   * @param snapId - The id of the Snap whose state to get.\n   * @param path - The path to the requested file.\n   * @param encoding - An optional requested file encoding.\n   * @returns The file requested in the chosen file encoding or null if the file is not found.\n   */\n  async getSnapFile(\n    snapId: SnapId,\n    path: string,\n    encoding: AuxiliaryFileEncoding = AuxiliaryFileEncoding.Base64,\n  ): Promise<string | null> {\n    const snap = this.getExpect(snapId);\n    const normalizedPath = normalizeRelative(path);\n    const value = snap.auxiliaryFiles?.find(\n      (file) => file.path === normalizedPath,\n    )?.value;\n\n    if (!value) {\n      return null;\n    }\n\n    return encodeAuxiliaryFile(value, encoding);\n  }\n\n  /**\n   * Completely clear the controller's state: delete all associated data,\n   * handlers, event listeners, and permissions; tear down all snap providers.\n   */\n  async clearState() {\n    const snapIds = Object.keys(this.state.snaps);\n    if (this.#closeAllConnections) {\n      snapIds.forEach((snapId) => {\n        this.#closeAllConnections?.(snapId);\n      });\n    }\n\n    await this.messagingSystem.call('ExecutionService:terminateAllSnaps');\n    snapIds.forEach((snapId) => this.#revokeAllSnapPermissions(snapId));\n\n    this.update((state: any) => {\n      state.snaps = {};\n      state.snapStates = {};\n    });\n  }\n\n  /**\n   * Removes the given snap from state, and clears all associated handlers\n   * and listeners.\n   *\n   * @param snapId - The id of the Snap.\n   * @returns A promise that resolves once the snap has been removed.\n   */\n  async removeSnap(snapId: SnapId): Promise<void> {\n    return this.removeSnaps([snapId]);\n  }\n\n  /**\n   * Stops the given snaps, removes them from state, and clears all associated\n   * permissions, handlers, and listeners.\n   *\n   * @param snapIds - The ids of the Snaps.\n   */\n  async removeSnaps(snapIds: SnapId[]): Promise<void> {\n    if (!Array.isArray(snapIds)) {\n      throw new Error('Expected array of snap ids.');\n    }\n\n    await Promise.all(\n      snapIds.map(async (snapId) => {\n        const snap = this.getExpect(snapId);\n        const truncated = this.getTruncatedExpect(snapId);\n        // Disable the snap and revoke all of its permissions before deleting\n        // it. This ensures that the snap will not be restarted or otherwise\n        // affect the host environment while we are deleting it.\n        await this.disableSnap(snapId);\n        this.#revokeAllSnapPermissions(snapId);\n\n        this.#removeSnapFromSubjects(snapId);\n\n        this.#snapsRuntimeData.delete(snapId);\n\n        this.update((state: any) => {\n          delete state.snaps[snapId];\n          delete state.snapStates[snapId];\n        });\n\n        this.messagingSystem.publish(`SnapController:snapRemoved`, truncated);\n\n        // If the snap has been fully installed before, also emit snapUninstalled.\n        if (snap.status !== SnapStatus.Installing) {\n          this.messagingSystem.publish(\n            `SnapController:snapUninstalled`,\n            truncated,\n          );\n        }\n      }),\n    );\n  }\n\n  /**\n   * Removes a snap's permission (caveat) from the specified subject.\n   *\n   * @param origin - The origin from which to remove the snap.\n   * @param snapId - The id of the snap to remove.\n   */\n  removeSnapFromSubject(origin: string, snapId: SnapId) {\n    const subjectPermissions = this.messagingSystem.call(\n      'PermissionController:getPermissions',\n      origin,\n    ) as SubjectPermissions<PermissionConstraint>;\n\n    const snapIdsCaveat = subjectPermissions?.[\n      WALLET_SNAP_PERMISSION_KEY\n    ]?.caveats?.find((caveat) => caveat.type === SnapCaveatType.SnapIds) as\n      | Caveat<string, Json>\n      | undefined;\n\n    if (!snapIdsCaveat) {\n      return;\n    }\n\n    const caveatHasSnap = Boolean(\n      (snapIdsCaveat.value as Record<string, Json>)?.[snapId],\n    );\n    if (caveatHasSnap) {\n      const newCaveatValue = {\n        ...(snapIdsCaveat.value as Record<string, Json>),\n      };\n      delete newCaveatValue[snapId];\n      if (Object.keys(newCaveatValue).length > 0) {\n        this.messagingSystem.call(\n          'PermissionController:updateCaveat',\n          origin,\n          WALLET_SNAP_PERMISSION_KEY,\n          SnapCaveatType.SnapIds,\n          newCaveatValue,\n        );\n      } else {\n        this.messagingSystem.call('PermissionController:revokePermissions', {\n          [origin]: [WALLET_SNAP_PERMISSION_KEY],\n        });\n      }\n    }\n  }\n\n  /**\n   * Checks if a list of permissions are dynamic and allowed to be revoked, if they are they will all be revoked.\n   *\n   * @param snapId - The snap ID.\n   * @param permissionNames - The names of the permissions.\n   * @throws If non-dynamic permissions are passed.\n   */\n  revokeDynamicSnapPermissions(\n    snapId: string,\n    permissionNames: NonEmptyArray<string>,\n  ) {\n    assert(\n      permissionNames.every((permissionName) =>\n        this.#dynamicPermissions.includes(permissionName),\n      ),\n      'Non-dynamic permissions cannot be revoked',\n    );\n    this.messagingSystem.call('PermissionController:revokePermissions', {\n      [snapId]: permissionNames,\n    });\n  }\n\n  /**\n   * Removes a snap's permission (caveat) from all subjects.\n   *\n   * @param snapId - The id of the Snap.\n   */\n  #removeSnapFromSubjects(snapId: SnapId) {\n    const subjects = this.messagingSystem.call(\n      'PermissionController:getSubjectNames',\n    );\n    for (const subject of subjects) {\n      this.removeSnapFromSubject(subject, snapId);\n    }\n  }\n\n  /**\n   * Safely revokes all permissions granted to a Snap.\n   *\n   * @param snapId - The snap ID.\n   */\n  #revokeAllSnapPermissions(snapId: string) {\n    if (\n      this.messagingSystem.call('PermissionController:hasPermissions', snapId)\n    ) {\n      this.messagingSystem.call(\n        'PermissionController:revokeAllPermissions',\n        snapId,\n      );\n    }\n  }\n\n  /**\n   * Handles incrementing the activeReferences counter.\n   *\n   * @param snapId - The snap id of the snap that was referenced.\n   */\n  incrementActiveReferences(snapId: SnapId) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.activeReferences += 1;\n  }\n\n  /**\n   * Handles decrement the activeReferences counter.\n   *\n   * @param snapId - The snap id of the snap that was referenced..\n   */\n  decrementActiveReferences(snapId: SnapId) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    assert(\n      runtime.activeReferences > 0,\n      'SnapController reference management is in an invalid state.',\n    );\n    runtime.activeReferences -= 1;\n  }\n\n  /**\n   * Gets all snaps in their truncated format.\n   *\n   * @returns All installed snaps in their truncated format.\n   */\n  getAllSnaps(): TruncatedSnap[] {\n    return Object.values(this.state.snaps).map(truncateSnap);\n  }\n\n  /**\n   * Gets the serialized permitted snaps of the given origin, if any.\n   *\n   * @param origin - The origin whose permitted snaps to retrieve.\n   * @returns The serialized permitted snaps for the origin.\n   */\n  getPermittedSnaps(origin: string): RequestSnapsResult {\n    const permissions =\n      this.messagingSystem.call(\n        'PermissionController:getPermissions',\n        origin,\n      ) ?? {};\n    const snaps =\n      permissions[WALLET_SNAP_PERMISSION_KEY]?.caveats?.find(\n        (caveat) => caveat.type === SnapCaveatType.SnapIds,\n      )?.value ?? {};\n    return Object.keys(snaps).reduce<RequestSnapsResult>(\n      (permittedSnaps, snapId) => {\n        const snap = this.get(snapId);\n        const truncatedSnap = this.getTruncated(snapId as SnapId);\n\n        if (truncatedSnap && snap?.status !== SnapStatus.Installing) {\n          permittedSnaps[snapId] = truncatedSnap;\n        }\n        return permittedSnaps;\n      },\n      {},\n    );\n  }\n\n  /**\n   * Installs the snaps requested by the given origin, returning the snap\n   * object if the origin is permitted to install it, and an authorization error\n   * otherwise.\n   *\n   * @param origin - The origin that requested to install the snaps.\n   * @param requestedSnaps - The snaps to install.\n   * @returns An object of snap ids and snap objects, or errors if a\n   * snap couldn't be installed.\n   */\n  async installSnaps(\n    origin: string,\n    requestedSnaps: RequestSnapsParams,\n  ): Promise<RequestSnapsResult> {\n    const result: RequestSnapsResult = {};\n\n    const snapIds = Object.keys(requestedSnaps);\n\n    const pendingUpdates = [];\n    const pendingInstalls = [];\n\n    try {\n      for (const [snapId, { version: rawVersion }] of Object.entries(\n        requestedSnaps,\n      )) {\n        assertIsValidSnapId(snapId);\n\n        const [error, version] = resolveVersionRange(rawVersion);\n\n        if (error) {\n          throw rpcErrors.invalidParams(\n            `The \"version\" field must be a valid SemVer version range if specified. Received: \"${\n              rawVersion as string\n            }\".`,\n          );\n        }\n\n        const location = this.#detectSnapLocation(snapId, {\n          versionRange: version,\n          fetch: this.#fetchFunction,\n          allowLocal: this.#featureFlags.allowLocalSnaps,\n          resolveVersion: async (range) =>\n            this.#featureFlags.requireAllowlist\n              ? await this.#resolveAllowlistVersion(snapId, range)\n              : range,\n        });\n\n        // Existing snaps may need to be updated, unless they should be re-installed (e.g. local snaps)\n        // Everything else is treated as an install\n        const isUpdate = this.has(snapId) && !location.shouldAlwaysReload;\n\n        if (isUpdate && this.#isValidUpdate(snapId, version)) {\n          const existingSnap = this.getExpect(snapId);\n          pendingUpdates.push({ snapId, oldVersion: existingSnap.version });\n          let rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n          if (rollbackSnapshot === undefined) {\n            rollbackSnapshot = this.#createRollbackSnapshot(snapId);\n            rollbackSnapshot.newVersion = version;\n          } else {\n            throw new Error('This snap is already being updated.');\n          }\n        } else if (!isUpdate) {\n          pendingInstalls.push(snapId);\n        }\n\n        result[snapId] = await this.processRequestedSnap(\n          origin,\n          snapId,\n          location,\n          version,\n        );\n      }\n\n      // Once we finish all installs / updates, emit events.\n      pendingInstalls.forEach((snapId) =>\n        this.messagingSystem.publish(\n          `SnapController:snapInstalled`,\n          this.getTruncatedExpect(snapId),\n          origin,\n        ),\n      );\n\n      pendingUpdates.forEach(({ snapId, oldVersion }) =>\n        this.messagingSystem.publish(\n          `SnapController:snapUpdated`,\n          this.getTruncatedExpect(snapId),\n          oldVersion,\n          origin,\n        ),\n      );\n\n      snapIds.forEach((snapId) => this.#rollbackSnapshots.delete(snapId));\n    } catch (error) {\n      const installed = pendingInstalls.filter((snapId) => this.has(snapId));\n      await this.removeSnaps(installed);\n      const snapshottedSnaps = [...this.#rollbackSnapshots.keys()];\n      const snapsToRollback = pendingUpdates\n        .map(({ snapId }) => snapId)\n        .filter((snapId) => snapshottedSnaps.includes(snapId));\n      await this.#rollbackSnaps(snapsToRollback);\n\n      throw error;\n    }\n\n    return result;\n  }\n\n  /**\n   * Adds, authorizes, and runs the given snap with a snap provider.\n   * Results from this method should be efficiently serializable.\n   *\n   * @param origin - The origin requesting the snap.\n   * @param snapId - The id of the snap.\n   * @param location - The location implementation of the snap.\n   * @param versionRange - The semver range of the snap to install.\n   * @returns The resulting snap object, or an error if something went wrong.\n   */\n  private async processRequestedSnap(\n    origin: string,\n    snapId: SnapId,\n    location: SnapLocation,\n    versionRange: SemVerRange,\n  ): Promise<TruncatedSnap> {\n    const existingSnap = this.getTruncated(snapId);\n\n    // For devX we always re-install local snaps.\n    if (existingSnap && !location.shouldAlwaysReload) {\n      if (satisfiesVersionRange(existingSnap.version, versionRange)) {\n        return existingSnap;\n      }\n\n      return await this.updateSnap(\n        origin,\n        snapId,\n        location,\n        versionRange,\n        // Since we are requesting an update from within processRequestedSnap,\n        // we disable the emitting of the snapUpdated event and rely on the caller\n        // to publish this event after the update is complete.\n        // This is necessary as installSnaps may be installing multiple snaps\n        // and we don't want to emit events prematurely.\n        false,\n      );\n    }\n\n    let pendingApproval = this.#createApproval({\n      origin,\n      snapId,\n      type: SNAP_APPROVAL_INSTALL,\n    });\n\n    // Existing snaps must be stopped before overwriting\n    if (existingSnap && this.isRunning(snapId)) {\n      await this.stopSnap(snapId, SnapStatusEvents.Stop);\n    }\n\n    // Existing snaps that should be re-installed should not maintain their existing permissions\n    if (existingSnap && location.shouldAlwaysReload) {\n      this.#revokeAllSnapPermissions(snapId);\n    }\n\n    try {\n      const { sourceCode } = await this.#add({\n        origin,\n        id: snapId,\n        location,\n        versionRange,\n      });\n\n      await this.authorize(snapId, pendingApproval);\n\n      pendingApproval = this.#createApproval({\n        origin,\n        snapId,\n        type: SNAP_APPROVAL_RESULT,\n      });\n\n      await this.#startSnap({\n        snapId,\n        sourceCode,\n      });\n\n      const truncated = this.getTruncatedExpect(snapId);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        type: SNAP_APPROVAL_INSTALL,\n      });\n\n      return truncated;\n    } catch (error) {\n      logError(`Error when adding ${snapId}.`, error);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        type: SNAP_APPROVAL_INSTALL,\n        error: error instanceof Error ? error.message : error.toString(),\n      });\n\n      throw error;\n    }\n  }\n\n  #createApproval({\n    origin,\n    snapId,\n    type,\n  }: {\n    origin: string;\n    snapId: SnapId;\n    type: string;\n  }): PendingApproval {\n    const id = nanoid();\n    const promise = this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        origin,\n        id,\n        type,\n        requestData: {\n          // Mirror previous installation metadata\n          metadata: { id, origin: snapId, dappOrigin: origin },\n          snapId,\n        },\n        requestState: {\n          loading: true,\n        },\n      },\n      true,\n    );\n\n    return { id, promise };\n  }\n\n  #updateApproval(id: string, requestState: Record<string, Json>) {\n    try {\n      this.messagingSystem.call('ApprovalController:updateRequestState', {\n        id,\n        requestState,\n      });\n    } catch {\n      // Do nothing\n    }\n  }\n\n  /**\n   * Updates an installed snap. The flow is similar to\n   * {@link SnapController.installSnaps}. The user will be asked if they want\n   * to update, then approve any permission changes, and finally the snap will\n   * be restarted.\n   *\n   * The update will fail if the user rejects any prompt or if the new version\n   * of the snap is blocked.\n   *\n   * If the original version of the snap was blocked and the update succeeded,\n   * the snap will be unblocked and enabled before it is restarted.\n   *\n   * @param origin - The origin requesting the snap update.\n   * @param snapId - The id of the Snap to be updated.\n   * @param location - The location implementation of the snap.\n   * @param newVersionRange - A semver version range in which the maximum version will be chosen.\n   * @param emitEvent - An optional boolean flag to indicate whether this update should emit an event.\n   * @returns The snap metadata if updated, `null` otherwise.\n   */\n  async updateSnap(\n    origin: string,\n    snapId: SnapId,\n    location: SnapLocation,\n    newVersionRange: string = DEFAULT_REQUESTED_SNAP_VERSION,\n    emitEvent = true,\n  ): Promise<TruncatedSnap> {\n    if (!isValidSemVerRange(newVersionRange)) {\n      throw new Error(\n        `Received invalid snap version range: \"${newVersionRange}\".`,\n      );\n    }\n\n    let pendingApproval = this.#createApproval({\n      origin,\n      snapId,\n      type: SNAP_APPROVAL_UPDATE,\n    });\n\n    try {\n      const snap = this.getExpect(snapId);\n\n      const newSnap = await this.#fetchSnap(snapId, location);\n\n      const { sourceCode: sourceCodeFile, manifest: manifestFile } =\n        newSnap.files;\n\n      const manifest = manifestFile.result;\n\n      const newVersion = manifest.version;\n      if (!gtVersion(newVersion, snap.version)) {\n        throw rpcErrors.invalidParams(\n          `Snap \"${snapId}@${snap.version}\" is already installed. Couldn't update to a version inside requested \"${newVersionRange}\" range.`,\n        );\n      }\n\n      if (!satisfiesVersionRange(newVersion, newVersionRange)) {\n        throw new Error(\n          `Version mismatch. Manifest for \"${snapId}\" specifies version \"${newVersion}\" which doesn't satisfy requested version range \"${newVersionRange}\".`,\n        );\n      }\n\n      await this.#assertIsInstallAllowed(snapId, {\n        version: newVersion,\n        checksum: manifest.source.shasum,\n      });\n\n      const processedPermissions = processSnapPermissions(\n        manifest.initialPermissions,\n      );\n\n      this.#validateSnapPermissions(processedPermissions);\n\n      const { newPermissions, unusedPermissions, approvedPermissions } =\n        this.#calculatePermissionsChange(snapId, processedPermissions);\n\n      this.#updateApproval(pendingApproval.id, {\n        permissions: newPermissions,\n        newVersion: manifest.version,\n        newPermissions,\n        approvedPermissions,\n        unusedPermissions,\n        loading: false,\n      });\n\n      const { permissions: approvedNewPermissions, ...requestData } =\n        (await pendingApproval.promise) as PermissionsRequest;\n\n      pendingApproval = this.#createApproval({\n        origin,\n        snapId,\n        type: SNAP_APPROVAL_RESULT,\n      });\n\n      if (this.isRunning(snapId)) {\n        await this.stopSnap(snapId, SnapStatusEvents.Stop);\n      }\n\n      this.#transition(snapId, SnapStatusEvents.Update);\n\n      this.#set({\n        origin,\n        id: snapId,\n        files: newSnap.files,\n        isUpdate: true,\n      });\n\n      const unusedPermissionsKeys = Object.keys(unusedPermissions);\n      if (isNonEmptyArray(unusedPermissionsKeys)) {\n        this.messagingSystem.call('PermissionController:revokePermissions', {\n          [snapId]: unusedPermissionsKeys,\n        });\n      }\n\n      if (isNonEmptyArray(Object.keys(approvedNewPermissions))) {\n        this.messagingSystem.call('PermissionController:grantPermissions', {\n          approvedPermissions: approvedNewPermissions,\n          subject: { origin: snapId },\n          requestData,\n        });\n      }\n\n      const rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n      if (rollbackSnapshot !== undefined) {\n        rollbackSnapshot.permissions.revoked = unusedPermissions;\n        rollbackSnapshot.permissions.granted = Object.keys(\n          approvedNewPermissions,\n        );\n        rollbackSnapshot.permissions.requestData = requestData;\n      }\n\n      const sourceCode = sourceCodeFile.toString();\n\n      assert(\n        typeof sourceCode === 'string' && sourceCode.length > 0,\n        `Invalid source code for snap \"${snapId}\".`,\n      );\n\n      try {\n        await this.#startSnap({ snapId, sourceCode });\n      } catch {\n        throw new Error(`Snap ${snapId} crashed with updated source code.`);\n      }\n\n      const truncatedSnap = this.getTruncatedExpect(snapId);\n\n      if (emitEvent) {\n        this.messagingSystem.publish(\n          'SnapController:snapUpdated',\n          truncatedSnap,\n          snap.version,\n          origin,\n        );\n      }\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        type: SNAP_APPROVAL_UPDATE,\n      });\n\n      return truncatedSnap;\n    } catch (error) {\n      logError(`Error when updating ${snapId},`, error);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        error: error instanceof Error ? error.message : error.toString(),\n        type: SNAP_APPROVAL_UPDATE,\n      });\n      throw error;\n    }\n  }\n\n  async #resolveAllowlistVersion(\n    snapId: SnapId,\n    versionRange: SemVerRange,\n  ): Promise<SemVerRange> {\n    return await this.messagingSystem.call(\n      'SnapsRegistry:resolveVersion',\n      snapId,\n      versionRange,\n    );\n  }\n\n  /**\n   * Get metadata for the given snap ID.\n   *\n   * @param snapId - The ID of the snap to get metadata for.\n   * @returns The metadata for the given snap ID, or `null` if the snap is not\n   * verified.\n   */\n  async getRegistryMetadata(\n    snapId: SnapId,\n  ): Promise<SnapsRegistryMetadata | null> {\n    return await this.messagingSystem.call('SnapsRegistry:getMetadata', snapId);\n  }\n\n  /**\n   * Returns a promise representing the complete installation of the requested snap.\n   * If the snap is already being installed, the previously pending promise will be returned.\n   *\n   * @param args - Object containing the snap id and either the URL of the snap's manifest,\n   * or the snap's manifest and source code. The object may also optionally contain a target\n   * version.\n   * @returns The resulting snap object.\n   */\n  async #add(args: AddSnapArgs): Promise<PersistedSnap> {\n    const { id: snapId, location, versionRange } = args;\n\n    this.#setupRuntime(snapId);\n    const runtime = this.#getRuntimeExpect(snapId);\n    if (!runtime.installPromise) {\n      log(`Adding snap: ${snapId}`);\n\n      // If fetching and setting the snap succeeds, this property will be set\n      // to null in the authorize() method.\n      runtime.installPromise = (async () => {\n        const fetchedSnap = await this.#fetchSnap(snapId, location);\n        const manifest = fetchedSnap.files.manifest.result;\n        if (!satisfiesVersionRange(manifest.version, versionRange)) {\n          throw new Error(\n            `Version mismatch. Manifest for \"${snapId}\" specifies version \"${manifest.version}\" which doesn't satisfy requested version range \"${versionRange}\".`,\n          );\n        }\n\n        await this.#assertIsInstallAllowed(snapId, {\n          version: manifest.version,\n          checksum: manifest.source.shasum,\n        });\n\n        return this.#set({\n          ...args,\n          ...fetchedSnap,\n          id: snapId,\n        });\n      })();\n    }\n\n    try {\n      return await runtime.installPromise;\n    } catch (error) {\n      // Reset promise so users can retry installation in case the problem is\n      // temporary.\n      runtime.installPromise = null;\n      throw error;\n    }\n  }\n\n  async #startSnap(snapData: { snapId: SnapId; sourceCode: string }) {\n    const { snapId } = snapData;\n    if (this.isRunning(snapId)) {\n      throw new Error(`Snap \"${snapId}\" is already started.`);\n    }\n\n    try {\n      const runtime = this.#getRuntimeExpect(snapId);\n      const result = await this.#executeWithTimeout(\n        this.messagingSystem.call('ExecutionService:executeSnap', {\n          ...snapData,\n          endowments: await this.#getEndowments(snapId),\n        }),\n      );\n      this.#transition(snapId, SnapStatusEvents.Start);\n      // We treat the initialization of the snap as the first request, for idle timing purposes.\n      runtime.lastRequest = Date.now();\n      return result;\n    } catch (error) {\n      await this.#terminateSnap(snapId);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the names of all endowments that will be added to the Snap's\n   * Compartment when it executes. These should be the names of global\n   * JavaScript APIs accessible in the root realm of the execution environment.\n   *\n   * Throws an error if the endowment getter for a permission returns a truthy\n   * value that is not an array of strings.\n   *\n   * @param snapId - The id of the snap whose SES endowments to get.\n   * @returns An array of the names of the endowments.\n   */\n  async #getEndowments(snapId: string): Promise<string[]> {\n    let allEndowments: string[] = [];\n\n    for (const permissionName of this.#environmentEndowmentPermissions) {\n      if (\n        this.messagingSystem.call(\n          'PermissionController:hasPermission',\n          snapId,\n          permissionName,\n        )\n      ) {\n        const endowments = await this.messagingSystem.call(\n          'PermissionController:getEndowments',\n          snapId,\n          permissionName,\n        );\n\n        if (endowments) {\n          // We don't have any guarantees about the type of the endowments\n          // value, so we have to guard at runtime.\n          if (\n            !Array.isArray(endowments) ||\n            endowments.some((value) => typeof value !== 'string')\n          ) {\n            throw new Error('Expected an array of string endowment names.');\n          }\n\n          allEndowments = allEndowments.concat(endowments as string[]);\n        }\n      }\n    }\n\n    const dedupedEndowments = [\n      ...new Set([...DEFAULT_ENDOWMENTS, ...allEndowments]),\n    ];\n\n    if (\n      dedupedEndowments.length <\n      // This is a bug in TypeScript: https://github.com/microsoft/TypeScript/issues/48313\n      // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      DEFAULT_ENDOWMENTS.length + allEndowments.length\n    ) {\n      logError(\n        `Duplicate endowments found for ${snapId}. Default endowments should not be requested.`,\n        allEndowments,\n      );\n    }\n    return dedupedEndowments;\n  }\n\n  /**\n   * Sets a snap in state. Called when a snap is installed or updated. Performs\n   * various validation checks on the received arguments, and will throw if\n   * validation fails.\n   *\n   * The snap will be enabled and unblocked by the time this method returns,\n   * regardless of its previous state.\n   *\n   * See {@link SnapController.add} and {@link SnapController.updateSnap} for\n   * usage.\n   *\n   * @param args - The add snap args.\n   * @returns The resulting snap object.\n   */\n  #set(args: SetSnapArgs): PersistedSnap {\n    const { id: snapId, origin, files, isUpdate = false } = args;\n\n    const {\n      manifest,\n      sourceCode: sourceCodeFile,\n      svgIcon,\n      auxiliaryFiles: rawAuxiliaryFiles,\n      localizationFiles,\n    } = files;\n\n    assertIsSnapManifest(manifest.result);\n    const { version } = manifest.result;\n\n    const sourceCode = sourceCodeFile.toString();\n\n    assert(\n      typeof sourceCode === 'string' && sourceCode.length > 0,\n      `Invalid source code for snap \"${snapId}\".`,\n    );\n\n    const auxiliaryFiles = rawAuxiliaryFiles.map((file) => {\n      assert(typeof file.data.base64 === 'string');\n      return {\n        path: file.path,\n        value: file.data.base64,\n      };\n    });\n\n    const snapsState = this.state.snaps;\n\n    const existingSnap = snapsState[snapId];\n\n    const previousVersionHistory = existingSnap?.versionHistory ?? [];\n    const versionHistory = [\n      ...previousVersionHistory,\n      {\n        version,\n        date: Date.now(),\n        origin,\n      },\n    ];\n\n    const snap: Snap = {\n      // Restore relevant snap state if it exists\n      ...existingSnap,\n\n      // Note that the snap will be unblocked and enabled, regardless of its\n      // previous state.\n      blocked: false,\n      enabled: true,\n\n      id: snapId,\n      initialPermissions: manifest.result.initialPermissions,\n      manifest: manifest.result,\n      status: this.#statusMachine.config.initial as StatusStates['value'],\n      sourceCode,\n      version,\n      versionHistory,\n      auxiliaryFiles,\n      localizationFiles: localizationFiles.map((file) => file.result),\n    };\n\n    // If the snap was blocked, it isn't any longer\n    delete snap.blockInformation;\n\n    // store the snap back in state\n    const { inversePatches } = this.update((state: any) => {\n      state.snaps[snapId] = snap;\n    });\n\n    // checking for isUpdate here as this function is also used in\n    // the install flow, we do not care to create snapshots for installs\n    if (isUpdate) {\n      const rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n      if (rollbackSnapshot !== undefined) {\n        rollbackSnapshot.statePatches = inversePatches;\n      }\n    }\n\n    this.messagingSystem.publish(\n      `SnapController:snapAdded`,\n      snap,\n      svgIcon?.toString(),\n    );\n\n    return { ...snap, sourceCode };\n  }\n\n  /**\n   * Fetches the manifest and source code of a snap.\n   *\n   * @param snapId - The id of the Snap.\n   * @param location - Source from which snap will be fetched.\n   * @returns A tuple of the Snap manifest object and the Snap source code.\n   */\n  async #fetchSnap(\n    snapId: SnapId,\n    location: SnapLocation,\n  ): Promise<FetchSnapResult> {\n    try {\n      const manifest = await location.manifest();\n      const sourceCode = await location.fetch(\n        manifest.result.source.location.npm.filePath,\n      );\n      const { iconPath } = manifest.result.source.location.npm;\n      const svgIcon = iconPath ? await location.fetch(iconPath) : undefined;\n\n      const auxiliaryFiles = await getSnapFiles(\n        location,\n        manifest.result.source.files,\n      );\n\n      await Promise.all(\n        auxiliaryFiles.map(async (file) => {\n          // This should still be safe\n          // eslint-disable-next-line require-atomic-updates\n          file.data.base64 = await encodeBase64(file);\n        }),\n      );\n\n      const localizationFiles = await getSnapFiles(\n        location,\n        manifest.result.source.locales,\n      );\n\n      const validatedLocalizationFiles =\n        getValidatedLocalizationFiles(localizationFiles);\n\n      const files = {\n        manifest,\n        sourceCode,\n        svgIcon,\n        auxiliaryFiles,\n        localizationFiles: validatedLocalizationFiles,\n      };\n\n      await validateFetchedSnap(files);\n\n      return { files, location };\n    } catch (error) {\n      throw new Error(\n        `Failed to fetch snap \"${snapId}\": ${getErrorMessage(error)}.`,\n      );\n    }\n  }\n\n  #validateSnapPermissions(\n    processedPermissions: Record<string, Pick<PermissionConstraint, 'caveats'>>,\n  ) {\n    const permissionKeys = Object.keys(processedPermissions);\n    const handlerPermissions = Array.from(\n      new Set(Object.values(handlerEndowments)),\n    );\n\n    assert(\n      permissionKeys.some((key) => handlerPermissions.includes(key)),\n      `A snap must request at least one of the following permissions: ${handlerPermissions.join(\n        ', ',\n      )}.`,\n    );\n\n    const excludedPermissionErrors = permissionKeys.reduce<string[]>(\n      (errors, permission) => {\n        if (hasProperty(this.#excludedPermissions, permission)) {\n          errors.push(this.#excludedPermissions[permission]);\n        }\n\n        return errors;\n      },\n      [],\n    );\n\n    assert(\n      excludedPermissionErrors.length === 0,\n      `One or more permissions are not allowed:\\n${excludedPermissionErrors.join(\n        '\\n',\n      )}`,\n    );\n  }\n\n  /**\n   * Initiates a request for the given snap's initial permissions.\n   * Must be called in order. See processRequestedSnap.\n   *\n   * This function is not hash private yet because of tests.\n   *\n   * @param snapId - The id of the Snap.\n   * @param pendingApproval - Pending approval to update.\n   * @returns The snap's approvedPermissions.\n   */\n  private async authorize(\n    snapId: SnapId,\n    pendingApproval: PendingApproval,\n  ): Promise<void> {\n    log(`Authorizing snap: ${snapId}`);\n    const snapsState = this.state.snaps;\n    const snap = snapsState[snapId];\n    const { initialPermissions } = snap;\n\n    try {\n      const processedPermissions = processSnapPermissions(initialPermissions);\n\n      this.#validateSnapPermissions(processedPermissions);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        permissions: processedPermissions,\n      });\n\n      const { permissions: approvedPermissions, ...requestData } =\n        (await pendingApproval.promise) as PermissionsRequest;\n\n      if (isNonEmptyArray(Object.keys(approvedPermissions))) {\n        this.messagingSystem.call('PermissionController:grantPermissions', {\n          approvedPermissions,\n          subject: { origin: snapId },\n          requestData,\n        });\n      }\n    } finally {\n      const runtime = this.#getRuntimeExpect(snapId);\n      runtime.installPromise = null;\n    }\n  }\n\n  destroy() {\n    super.destroy();\n\n    if (this.#timeoutForLastRequestStatus) {\n      clearTimeout(this.#timeoutForLastRequestStatus);\n    }\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    this.messagingSystem.unsubscribe(\n      'ExecutionService:unhandledError',\n      this._onUnhandledSnapError,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'ExecutionService:outboundRequest',\n      this._onOutboundRequest,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'ExecutionService:outboundResponse',\n      this._onOutboundResponse,\n    );\n\n    this.messagingSystem.clearEventSubscriptions(\n      'SnapController:snapInstalled',\n    );\n\n    this.messagingSystem.clearEventSubscriptions('SnapController:snapUpdated');\n    /* eslint-enable @typescript-eslint/unbound-method */\n  }\n\n  /**\n   * Passes a JSON-RPC request object to the RPC handler function of a snap.\n   *\n   * @param options - A bag of options.\n   * @param options.snapId - The ID of the recipient snap.\n   * @param options.origin - The origin of the RPC request.\n   * @param options.handler - The handler to trigger on the snap for the request.\n   * @param options.request - The JSON-RPC request object.\n   * @returns The result of the JSON-RPC request.\n   */\n  async handleRequest({\n    snapId,\n    origin,\n    handler: handlerType,\n    request: rawRequest,\n  }: SnapRpcHookArgs & { snapId: SnapId }): Promise<unknown> {\n    const request = {\n      jsonrpc: '2.0',\n      id: nanoid(),\n      ...rawRequest,\n    };\n\n    assertIsJsonRpcRequest(request);\n\n    const permissionName = handlerEndowments[handlerType];\n    const hasPermission = this.messagingSystem.call(\n      'PermissionController:hasPermission',\n      snapId,\n      permissionName,\n    );\n\n    if (!hasPermission) {\n      throw new Error(\n        `Snap \"${snapId}\" is not permitted to use \"${permissionName}\".`,\n      );\n    }\n\n    if (\n      permissionName === SnapEndowments.Rpc ||\n      permissionName === SnapEndowments.Keyring\n    ) {\n      const subject = this.messagingSystem.call(\n        'SubjectMetadataController:getSubjectMetadata',\n        origin,\n      );\n\n      const permissions = this.messagingSystem.call(\n        'PermissionController:getPermissions',\n        snapId,\n      );\n\n      const handlerPermissions = permissions?.[permissionName];\n      assert(handlerPermissions);\n\n      const origins =\n        permissionName === SnapEndowments.Rpc\n          ? getRpcCaveatOrigins(handlerPermissions)\n          : getKeyringCaveatOrigins(handlerPermissions);\n      assert(origins);\n\n      if (\n        !isOriginAllowed(\n          origins,\n          subject?.subjectType ?? SubjectType.Website,\n          origin,\n        )\n      ) {\n        throw new Error(\n          `Snap \"${snapId}\" is not permitted to handle requests from \"${origin}\".`,\n        );\n      }\n    }\n\n    const handler = await this.#getRpcRequestHandler(snapId);\n    if (!handler) {\n      throw new Error(\n        `Snap RPC message handler not found for snap \"${snapId}\".`,\n      );\n    }\n\n    return handler({ origin, handler: handlerType, request });\n  }\n\n  /**\n   * Gets the RPC message handler for the given snap.\n   *\n   * @param snapId - The id of the Snap whose message handler to get.\n   * @returns The RPC handler for the given snap.\n   */\n  #getRpcRequestHandler(snapId: SnapId): SnapRpcHook {\n    const runtime = this.#getRuntimeExpect(snapId);\n    const existingHandler = runtime.rpcHandler;\n    if (existingHandler) {\n      return existingHandler;\n    }\n\n    const requestQueue = new RequestQueue(5);\n    // We need to set up this promise map to map snapIds to their respective startPromises,\n    // because otherwise we would lose context on the correct startPromise.\n    const startPromises = new Map<string, Promise<void>>();\n\n    const rpcHandler = async ({\n      origin,\n      handler: handlerType,\n      request,\n    }: SnapRpcHookArgs) => {\n      if (this.state.snaps[snapId].enabled === false) {\n        throw new Error(`Snap \"${snapId}\" is disabled.`);\n      }\n\n      if (this.state.snaps[snapId].status === SnapStatus.Installing) {\n        throw new Error(\n          `Snap \"${snapId}\" is currently being installed. Please try again later.`,\n        );\n      }\n\n      if (!this.isRunning(snapId)) {\n        let localStartPromise = startPromises.get(snapId);\n        if (!localStartPromise) {\n          localStartPromise = this.startSnap(snapId);\n          startPromises.set(snapId, localStartPromise);\n        } else if (requestQueue.get(origin) >= requestQueue.maxQueueSize) {\n          throw new Error(\n            'Exceeds maximum number of requests waiting to be resolved, please try again.',\n          );\n        }\n\n        requestQueue.increment(origin);\n        try {\n          await localStartPromise;\n        } finally {\n          requestQueue.decrement(origin);\n          // Only delete startPromise for a snap if its value hasn't changed\n          if (startPromises.get(snapId) === localStartPromise) {\n            startPromises.delete(snapId);\n          }\n        }\n      }\n\n      const timer = new Timer(this.maxRequestTime);\n      this.#recordSnapRpcRequestStart(snapId, request.id, timer);\n\n      const handleRpcRequestPromise = this.messagingSystem.call(\n        'ExecutionService:handleRpcRequest',\n        snapId,\n        { origin, handler: handlerType, request },\n      );\n\n      // This will either get the result or reject due to the timeout.\n      try {\n        const result = await this.#executeWithTimeout(\n          handleRpcRequestPromise,\n          timer,\n        );\n\n        await this.#assertSnapRpcRequestResult(handlerType, result);\n\n        return result;\n      } catch (error) {\n        const [jsonRpcError, handled] = unwrapError(error);\n\n        if (!handled) {\n          await this.stopSnap(snapId, SnapStatusEvents.Crash);\n        }\n\n        throw jsonRpcError;\n      } finally {\n        this.#recordSnapRpcRequestFinish(snapId, request.id);\n      }\n    };\n\n    runtime.rpcHandler = rpcHandler;\n    return rpcHandler;\n  }\n\n  async #triggerPhishingListUpdate() {\n    return this.messagingSystem.call('PhishingController:maybeUpdateState');\n  }\n\n  #checkPhishingList(origin: string) {\n    return this.messagingSystem.call('PhishingController:testOrigin', origin)\n      .result;\n  }\n\n  /**\n   * Asserts that the returned result of a Snap RPC call is the expected shape.\n   *\n   * @param handlerType - The handler type of the RPC Request.\n   * @param result - The result of the RPC request.\n   */\n  async #assertSnapRpcRequestResult(handlerType: HandlerType, result: unknown) {\n    switch (handlerType) {\n      case HandlerType.OnTransaction: {\n        assertStruct(result, OnTransactionResponseStruct);\n        // Null is an allowed return value here\n        if (result === null) {\n          return;\n        }\n\n        await this.#triggerPhishingListUpdate();\n\n        validateComponentLinks(\n          result.content,\n          this.#checkPhishingList.bind(this),\n        );\n        break;\n      }\n      case HandlerType.OnHomePage:\n        assertStruct(result, OnHomePageResponseStruct);\n\n        await this.#triggerPhishingListUpdate();\n\n        validateComponentLinks(\n          result.content,\n          this.#checkPhishingList.bind(this),\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Awaits the specified promise and rejects if the promise doesn't resolve\n   * before the timeout.\n   *\n   * @param promise - The promise to await.\n   * @param timer - An optional timer object to control the timeout.\n   * @returns The result of the promise or rejects if the promise times out.\n   * @template PromiseValue - The value of the Promise.\n   */\n  async #executeWithTimeout<PromiseValue>(\n    promise: Promise<PromiseValue>,\n    timer?: Timer,\n  ): Promise<PromiseValue> {\n    const result = await withTimeout(promise, timer ?? this.maxRequestTime);\n    if (result === hasTimedOut) {\n      throw new Error('The request timed out.');\n    }\n    return result;\n  }\n\n  #recordSnapRpcRequestStart(snapId: SnapId, requestId: unknown, timer: Timer) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.pendingInboundRequests.push({ requestId, timer });\n    runtime.lastRequest = null;\n  }\n\n  #recordSnapRpcRequestFinish(snapId: SnapId, requestId: unknown) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.pendingInboundRequests = runtime.pendingInboundRequests.filter(\n      (request) => request.requestId !== requestId,\n    );\n\n    if (runtime.pendingInboundRequests.length === 0) {\n      runtime.lastRequest = Date.now();\n    }\n  }\n\n  /**\n   * Retrieves the rollback snapshot of a snap.\n   *\n   * @param snapId - The snap id.\n   * @returns A `RollbackSnapshot` or `undefined` if one doesn't exist.\n   */\n  #getRollbackSnapshot(snapId: SnapId): RollbackSnapshot | undefined {\n    return this.#rollbackSnapshots.get(snapId);\n  }\n\n  /**\n   * Creates a `RollbackSnapshot` that is used to help ensure\n   * atomicity in multiple snap updates.\n   *\n   * @param snapId - The snap id.\n   * @throws {@link Error}. If the snap exists before creation or if creation fails.\n   * @returns A `RollbackSnapshot`.\n   */\n  #createRollbackSnapshot(snapId: SnapId): RollbackSnapshot {\n    assert(\n      this.#rollbackSnapshots.get(snapId) === undefined,\n      new Error(`Snap \"${snapId}\" rollback snapshot already exists.`),\n    );\n\n    this.#rollbackSnapshots.set(snapId, {\n      statePatches: [],\n      permissions: { revoked: null, granted: [], requestData: null },\n      newVersion: '',\n    });\n\n    const newRollbackSnapshot = this.#rollbackSnapshots.get(snapId);\n\n    assert(\n      newRollbackSnapshot !== undefined,\n      new Error(`Snapshot creation failed for ${snapId}.`),\n    );\n    return newRollbackSnapshot;\n  }\n\n  /**\n   * Rolls back a snap to its previous state, permissions\n   * and source code based on the `RollbackSnapshot` that\n   * is captured during the update process. After rolling back,\n   * the function also emits an event indicating that the\n   * snap has been rolled back and it clears the snapshot\n   * for that snap.\n   *\n   * @param snapId - The snap id.\n   * @throws {@link Error}. If a snapshot does not exist.\n   */\n  async #rollbackSnap(snapId: SnapId) {\n    const rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n    if (!rollbackSnapshot) {\n      throw new Error('A snapshot does not exist for this snap.');\n    }\n\n    await this.stopSnap(snapId, SnapStatusEvents.Stop);\n    // Always set to stopped even if it wasn't running initially\n    if (this.get(snapId)?.status !== SnapStatus.Stopped) {\n      this.#transition(snapId, SnapStatusEvents.Stop);\n    }\n\n    const { statePatches, permissions } = rollbackSnapshot;\n\n    if (statePatches?.length) {\n      this.applyPatches(statePatches);\n    }\n\n    // Reset snap status, as we may have been in another state when we stored state patches\n    // But now we are 100% in a stopped state\n    if (this.get(snapId)?.status !== SnapStatus.Stopped) {\n      this.update((state) => {\n        state.snaps[snapId].status = SnapStatus.Stopped;\n      });\n    }\n\n    if (permissions.revoked && Object.keys(permissions.revoked).length) {\n      this.messagingSystem.call('PermissionController:grantPermissions', {\n        approvedPermissions: permissions.revoked as RequestedPermissions,\n        subject: { origin: snapId },\n        requestData: permissions.requestData as Record<string, unknown>,\n      });\n    }\n\n    if (permissions.granted?.length) {\n      this.messagingSystem.call('PermissionController:revokePermissions', {\n        [snapId]: permissions.granted as NonEmptyArray<string>,\n      });\n    }\n\n    const truncatedSnap = this.getTruncatedExpect(snapId);\n\n    this.messagingSystem.publish(\n      'SnapController:snapRolledback',\n      truncatedSnap,\n      rollbackSnapshot.newVersion,\n    );\n\n    this.#rollbackSnapshots.delete(snapId);\n  }\n\n  /**\n   * Iterates through an array of snap ids\n   * and calls `rollbackSnap` on them.\n   *\n   * @param snapIds - An array of snap ids.\n   */\n  async #rollbackSnaps(snapIds: SnapId[]) {\n    for (const snapId of snapIds) {\n      await this.#rollbackSnap(snapId);\n    }\n  }\n\n  #getRuntime(snapId: SnapId): SnapRuntimeData | undefined {\n    return this.#snapsRuntimeData.get(snapId);\n  }\n\n  #getRuntimeExpect(snapId: SnapId): SnapRuntimeData {\n    const runtime = this.#getRuntime(snapId);\n    assert(\n      runtime !== undefined,\n      new Error(`Snap \"${snapId}\" runtime data not found`),\n    );\n    return runtime;\n  }\n\n  #setupRuntime(snapId: SnapId) {\n    if (this.#snapsRuntimeData.has(snapId)) {\n      return;\n    }\n\n    const snap = this.get(snapId);\n    const interpreter = interpret(this.#statusMachine);\n    interpreter.start({\n      context: { snapId },\n      value:\n        snap?.status ??\n        (this.#statusMachine.config.initial as StatusStates['value']),\n    });\n\n    forceStrict(interpreter);\n\n    this.#snapsRuntimeData.set(snapId, {\n      lastRequest: null,\n      rpcHandler: null,\n      installPromise: null,\n      activeReferences: 0,\n      pendingInboundRequests: [],\n      pendingOutboundRequests: 0,\n      interpreter,\n    });\n  }\n\n  #calculatePermissionsChange(\n    snapId: SnapId,\n    desiredPermissionsSet: Record<\n      string,\n      Pick<PermissionConstraint, 'caveats'>\n    >,\n  ): {\n    newPermissions: Record<string, Pick<PermissionConstraint, 'caveats'>>;\n    unusedPermissions: SubjectPermissions<\n      ValidPermission<string, Caveat<string, any>>\n    >;\n    approvedPermissions: SubjectPermissions<\n      ValidPermission<string, Caveat<string, any>>\n    >;\n  } {\n    const oldPermissions =\n      this.messagingSystem.call(\n        'PermissionController:getPermissions',\n        snapId,\n      ) ?? {};\n\n    const newPermissions = setDiff(desiredPermissionsSet, oldPermissions);\n    // TODO(ritave): The assumption that these are unused only holds so long as we do not\n    //               permit dynamic permission requests.\n    const unusedPermissions = setDiff(oldPermissions, desiredPermissionsSet);\n\n    // It's a Set Intersection of oldPermissions and desiredPermissionsSet\n    // oldPermissions ∖ (oldPermissions ∖ desiredPermissionsSet) ⟺ oldPermissions ∩ desiredPermissionsSet\n    const approvedPermissions = setDiff(oldPermissions, unusedPermissions);\n\n    return { newPermissions, unusedPermissions, approvedPermissions };\n  }\n\n  /**\n   * Checks if a snap will pass version validation checks\n   * with the new version range that is requested. The first\n   * check that is done is to check if the existing snap version\n   * falls inside the requested range. If it does, we want to return\n   * false because we do not care to create a rollback snapshot in\n   * that scenario. The second check is to ensure that the current\n   * snap version is not greater than all possible versions in\n   * the requested version range. If it is, then we also want\n   * to return false in that scenario.\n   *\n   * @param snapId - The snap id.\n   * @param newVersionRange - The new version range being requsted.\n   * @returns `true` if validation checks pass and `false` if they do not.\n   */\n  #isValidUpdate(snapId: SnapId, newVersionRange: SemVerRange): boolean {\n    const existingSnap = this.getExpect(snapId);\n\n    if (satisfiesVersionRange(existingSnap.version, newVersionRange)) {\n      return false;\n    }\n\n    if (gtRange(existingSnap.version, newVersionRange)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Call a lifecycle hook on a snap, if the snap has the\n   * `endowment:lifecycle-hooks` permission. If the snap does not have the\n   * permission, nothing happens.\n   *\n   * @param snapId - The snap ID.\n   * @param handler - The lifecycle hook to call. This should be one of the\n   * supported lifecycle hooks.\n   * @private\n   */\n  async #callLifecycleHook(snapId: SnapId, handler: HandlerType) {\n    const permissionName = handlerEndowments[handler];\n    const hasPermission = this.messagingSystem.call(\n      'PermissionController:hasPermission',\n      snapId,\n      permissionName,\n    );\n\n    if (!hasPermission) {\n      return;\n    }\n\n    await this.handleRequest({\n      snapId,\n      handler,\n      origin: '',\n      request: {\n        jsonrpc: '2.0',\n        method: handler,\n      },\n    });\n  }\n}\n"],"names":["controllerName","SNAP_APPROVAL_INSTALL","SNAP_APPROVAL_UPDATE","SNAP_APPROVAL_RESULT","SnapController","TRUNCATED_SNAP_PROPERTIES","Set","defaultState","snaps","snapStates","unencryptedSnapStates","truncateSnap","snap","truncatedSnap","Object","keys","reduce","serialized","key","has","name","BaseController","updateBlockedSnaps","messagingSystem","call","blockedSnaps","values","state","blockListArg","id","version","checksum","manifest","source","shasum","Promise","all","entries","map","snapId","status","reason","SnapsRegistryStatus","Blocked","blockSnap","unblockSnap","_onUnhandledSnapError","_error","stopSnap","SnapStatusEvents","Crash","catch","stopSnapError","logError","_onOutboundRequest","runtime","getRuntimeExpect","pendingInboundRequests","filter","pendingRequest","timer","forEach","pause","pendingOutboundRequests","_onOutboundResponse","resume","startSnap","enabled","Error","sourceCode","enableSnap","getExpect","blocked","update","publish","getTruncatedExpect","disableSnap","isRunning","Stop","statusEvent","getRuntime","lastRequest","closeAllConnections","terminateSnap","transition","Boolean","get","assert","undefined","getTruncated","updateSnapState","newSnapState","encrypted","clearSnapState","getSnapState","getSnapFile","path","encoding","AuxiliaryFileEncoding","Base64","normalizedPath","normalizeRelative","value","auxiliaryFiles","find","file","encodeAuxiliaryFile","clearState","snapIds","revokeAllSnapPermissions","removeSnap","removeSnaps","Array","isArray","truncated","removeSnapFromSubjects","snapsRuntimeData","delete","SnapStatus","Installing","removeSnapFromSubject","origin","subjectPermissions","snapIdsCaveat","WALLET_SNAP_PERMISSION_KEY","caveats","caveat","type","SnapCaveatType","SnapIds","caveatHasSnap","newCaveatValue","length","revokeDynamicSnapPermissions","permissionNames","every","permissionName","dynamicPermissions","includes","incrementActiveReferences","activeReferences","decrementActiveReferences","getAllSnaps","getPermittedSnaps","permissions","permittedSnaps","installSnaps","requestedSnaps","result","pendingUpdates","pendingInstalls","rawVersion","assertIsValidSnapId","error","resolveVersionRange","rpcErrors","invalidParams","location","detectSnapLocation","versionRange","fetch","fetchFunction","allowLocal","featureFlags","allowLocalSnaps","resolveVersion","range","requireAllowlist","resolveAllowlistVersion","isUpdate","shouldAlwaysReload","isValidUpdate","existingSnap","push","oldVersion","rollbackSnapshot","getRollbackSnapshot","createRollbackSnapshot","newVersion","processRequestedSnap","rollbackSnapshots","installed","snapshottedSnaps","snapsToRollback","rollbackSnaps","satisfiesVersionRange","updateSnap","pendingApproval","createApproval","add","authorize","updateApproval","loading","message","toString","newVersionRange","DEFAULT_REQUESTED_SNAP_VERSION","emitEvent","isValidSemVerRange","newSnap","fetchSnap","sourceCodeFile","manifestFile","files","gtVersion","assertIsInstallAllowed","processedPermissions","processSnapPermissions","initialPermissions","validateSnapPermissions","newPermissions","unusedPermissions","approvedPermissions","calculatePermissionsChange","approvedNewPermissions","requestData","promise","Update","set","unusedPermissionsKeys","isNonEmptyArray","subject","revoked","granted","getRegistryMetadata","log","snapsState","installPromise","destroy","timeoutForLastRequestStatus","clearTimeout","unsubscribe","clearEventSubscriptions","handleRequest","handler","handlerType","request","rawRequest","jsonrpc","nanoid","assertIsJsonRpcRequest","handlerEndowments","hasPermission","SnapEndowments","Rpc","Keyring","handlerPermissions","origins","getRpcCaveatOrigins","getKeyringCaveatOrigins","isOriginAllowed","subjectType","SubjectType","Website","getRpcRequestHandler","constructor","messenger","environmentEndowmentPermissions","excludedPermissions","idleTimeCheckInterval","inMilliseconds","Duration","Second","maxIdleTime","maxRequestTime","globalThis","bind","detectSnapLocationFunction","metadata","persist","anonymous","Stopped","memo","Map","pollForLastRequestStatus","subscribe","callLifecycleHook","HandlerType","OnInstall","getErrorMessage","OnUpdate","initializeStateMachine","registerMessageHandlers","setupRuntime","disableGuard","statusConfig","initial","states","on","Start","target","Running","cond","Updating","Crashed","statusMachine","createMachine","validateMachine","registerActionHandler","args","setTimeout","stopSnapsLastRequestPastMax","blockedSnapInfo","blockInformation","snapInfo","results","explanation","Verified","_snapId","timeSince","event","interpreter","send","subjects","dappOrigin","requestState","fetchedSnap","snapData","executeWithTimeout","endowments","getEndowments","Date","now","allEndowments","some","concat","dedupedEndowments","DEFAULT_ENDOWMENTS","svgIcon","rawAuxiliaryFiles","localizationFiles","assertIsSnapManifest","data","base64","previousVersionHistory","versionHistory","date","config","inversePatches","statePatches","npm","filePath","iconPath","getSnapFiles","encodeBase64","locales","validatedLocalizationFiles","getValidatedLocalizationFiles","validateFetchedSnap","permissionKeys","from","join","excludedPermissionErrors","errors","permission","hasProperty","existingHandler","rpcHandler","requestQueue","RequestQueue","startPromises","localStartPromise","maxQueueSize","increment","decrement","Timer","recordSnapRpcRequestStart","handleRpcRequestPromise","assertSnapRpcRequestResult","jsonRpcError","handled","unwrapError","recordSnapRpcRequestFinish","OnTransaction","assertStruct","OnTransactionResponseStruct","triggerPhishingListUpdate","validateComponentLinks","content","checkPhishingList","OnHomePage","OnHomePageResponseStruct","withTimeout","hasTimedOut","requestId","newRollbackSnapshot","applyPatches","rollbackSnap","interpret","start","context","forceStrict","desiredPermissionsSet","oldPermissions","setDiff","gtRange","method"],"mappings":"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"}