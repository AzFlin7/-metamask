{"version":3,"file":"SnapIdMap.js","sourceRoot":"","sources":["../src/SnapIdMap.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,6DAA0D;AAE1D;;GAEG;AACH,MAAa,kBAAmB,SAAQ,KAAK;IAW3C;;;;;OAKG;IACH,YAAY,MAAc,EAAE,GAAW;QACrC,KAAK,CAAC,SAAS,MAAM,4BAA4B,GAAG,GAAG,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,GAAG,oBAAoB,CAAC;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;CACF;AAvBD,gDAuBC;AAED;;;;;;GAMG;AACH,MAAa,SAAS;IAGpB;;;;;;;;;;;;;;;OAeG;IACH,YAAY,QAA6C;QAlBzD,iCAAgC;QAmB9B,uBAAA,IAAI,kBAAQ,IAAI,uCAAkB,CAAC,QAAQ,CAAC,MAAA,CAAC;IAC/C,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,QAAQ;QACN,OAAO,uBAAA,IAAI,sBAAK,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,MAAM,CAAC,UAAU,CACf,GAA0B;QAE1B,OAAO,IAAI,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,GAAG,CAAC,MAAc,EAAE,GAAW;QAC7B,MAAM,KAAK,GAAG,uBAAA,IAAI,sBAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,KAAK,EAAE,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;IACtD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,GAAG,CAAC,MAAc,EAAE,GAAW;QAC7B,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,SAAS,CAAC;IAC7C,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,MAAM,CAAC,MAAc,EAAE,GAAW;QAChC,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,uBAAA,IAAI,sBAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACxD,CAAC;IAED,4CAA4C;IAC5C;;;;;;;;;;;;;;;;;OAiBG;IACH,2CAA2C;IAC3C,GAAG,CAAC,GAAW,EAAE,KAAY;QAC3B,uEAAuE;QACvE,sEAAsE;QACtE,sCAAsC;QACtC,IAAI,uBAAA,IAAI,sBAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;YACtD,MAAM,IAAI,kBAAkB,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACjD;QACD,uBAAA,IAAI,sBAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC1B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM;QACJ,OAAO,uBAAA,IAAI,sBAAK,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,IAAI,IAAI;QACN,OAAO,uBAAA,IAAI,sBAAK,CAAC,IAAI,CAAC;IACxB,CAAC;CACF;AAhND,8BAgNC","sourcesContent":["import type { SnapId } from '@metamask/snaps-sdk';\n\nimport { CaseInsensitiveMap } from './CaseInsensitiveMap';\n\n/**\n * Error thrown when an invalid Snap ID is encountered.\n */\nexport class InvalidSnapIdError extends Error {\n  /**\n   * The ID of the Snap that caused the error.\n   */\n  snapId: SnapId;\n\n  /**\n   * The key of the element that caused the error.\n   */\n  key: string;\n\n  /**\n   * Creates an instance of `InvalidSnapIdError`.\n   *\n   * @param snapId - The invalid Snap ID.\n   * @param key - The key associated with the invalid Snap ID.\n   */\n  constructor(snapId: SnapId, key: string) {\n    super(`Snap \"${snapId}\" is not allowed to set \"${key}\"`);\n    this.name = 'InvalidSnapIdError';\n    this.snapId = snapId;\n    this.key = key;\n  }\n}\n\n/**\n * A map that associates a string key with a value that has a `snapId`\n * property. Note that the key is case-insensitive.\n *\n * The `snapId` property is used to ensure that only the Snap that added an\n * item to the map can modify or delete it.\n */\nexport class SnapIdMap<Value extends { snapId: SnapId }> {\n  #map: CaseInsensitiveMap<Value>;\n\n  /**\n   * Creates a new `SnapIdMap` object.\n   *\n   * Example:\n   *\n   * ```ts\n   * const items = [\n   *   ['foo', { snapId: '1', name: 'foo' }],\n   *   ['bar', { snapId: '1', name: 'bar' }],\n   * ];\n   * const map = new SnapIdMap(items);\n   * ```\n   *\n   * @param iterable - An iterable object whose elements are key-value pairs.\n   * Each key-value pair will be added to the new map.\n   */\n  constructor(iterable?: Iterable<readonly [string, Value]>) {\n    this.#map = new CaseInsensitiveMap(iterable);\n  }\n\n  /**\n   * Returns a plain object with the same key-value pairs as this map.\n   *\n   * Example:\n   *\n   * ```ts\n   * const items = [\n   *   ['foo', { snapId: '1', name: 'foo' }],\n   *   ['bar', { snapId: '1', name: 'bar' }],\n   * ];\n   * const map = new SnapIdMap(items);\n   * map.toObject();\n   * // Returns\n   * // {\n   * //   foo: { snapId: '1', name: 'foo' },\n   * //   bar: { snapId: '1', name: 'bar' },\n   * // }\n   * ```\n   *\n   * @returns A plain object with the same key-value pairs as this map.\n   */\n  toObject(): Record<string, Value> {\n    return this.#map.toObject();\n  }\n\n  /**\n   * Returns a new `SnapIdMap` object from an plain object.\n   *\n   * Example:\n   *\n   * ```ts\n   * const obj = {\n   *   foo: { snapId: '1', name: 'foo' },\n   *   bar: { snapId: '1', name: 'bar' },\n   * };\n   * const map = SnapIdMap.fromObject(obj);\n   * ```\n   *\n   * @param obj - A plain object whose elements will be added to the new map.\n   * @returns A new `SnapIdMap` containing the elements of the given object.\n   */\n  static fromObject<Value extends { snapId: SnapId }>(\n    obj: Record<string, Value>,\n  ): SnapIdMap<Value> {\n    return new SnapIdMap(Object.entries(obj));\n  }\n\n  /**\n   * Gets a value from the map.\n   *\n   * If the given key is not present in the map or the Snap ID of the value is\n   * different from the given Snap ID, returns `undefined`.\n   *\n   * Example:\n   *\n   * ```ts\n   * const map = new SnapIdMap();\n   * map.set('foo', { snapId: '1', name: 'foo' });\n   * map.get('1', 'foo'); // Returns { snapId: '1', name: 'foo' }\n   * map.get('2', 'foo'); // Returns `undefined`\n   * map.get('1', 'bar'); // Returns `undefined`\n   * ```\n   *\n   * @param snapId - Snap ID present in the value to get.\n   * @param key - Key of the element to get.\n   * @returns The value associated with the given key and Snap ID.\n   */\n  get(snapId: SnapId, key: string): Value | undefined {\n    const value = this.#map.get(key);\n    return value?.snapId === snapId ? value : undefined;\n  }\n\n  /**\n   * Checks if a key is present in the map.\n   *\n   * If the given key is not present in the map or the Snap ID of the value is\n   * different from the given Snap ID, returns `false`.\n   *\n   * Example:\n   *\n   * ```ts\n   * const map = new SnapIdMap();\n   * map.set('foo', { snapId: '1', name: 'foo' });\n   * map.has('1', 'foo'); // Returns `true`\n   * map.has('2', 'foo'); // Returns `false`\n   * map.has('1', 'bar'); // Returns `false`\n   * ```\n   *\n   * @param snapId - Snap ID present in the value to check.\n   * @param key - Key of the element to check.\n   * @returns `true` if the key is present in the map and the Snap ID of the\n   * value is equal to the given Snap ID, `false` otherwise.\n   */\n  has(snapId: SnapId, key: string): boolean {\n    return this.get(snapId, key) !== undefined;\n  }\n\n  /**\n   * Deletes a key from the map.\n   *\n   * If the given key is not present in the map or the Snap IDs don't match,\n   * returns `false` and does nothing.\n   *\n   * Example:\n   *\n   * ```ts\n   * const map = new SnapIdMap();\n   * map.set('foo', { snapId: '1', name: 'foo' });\n   * map.delete('2', 'foo'); // Returns `false`\n   * map.delete('1', 'bar'); // Returns `false`\n   * map.delete('1', 'foo'); // Returns `true`\n   * ```\n   *\n   * @param snapId - Snap ID present in the value to delete.\n   * @param key - Key of the element to delete.\n   * @returns `true` if the key was present in the map and the Snap ID of the\n   * value was equal to the given Snap ID, `false` otherwise.\n   */\n  delete(snapId: SnapId, key: string): boolean {\n    return this.has(snapId, key) && this.#map.delete(key);\n  }\n\n  /* eslint-disable jsdoc/check-indentation */\n  /**\n   * Adds or updates a key-value pair in the map.\n   *\n   * Note that this method has a different behavior from the `Map.set`.\n   *\n   * - If the given key is not already present in the map, this method adds the\n   *   key-value pair to the map.\n   *\n   * - If the given key is already present in the map and the Snap IDs match,\n   *   this method updates the value associated with the key.\n   *\n   * - However, if the given key is already present in the map but the Snap IDs\n   *   do not match, this method throws an error.\n   *\n   * @param key - Key of the element to add or update.\n   * @param value - Value of the element to add or update.\n   * @returns The map itself.\n   */\n  /* eslint-enable jsdoc/check-indentation */\n  set(key: string, value: Value): this {\n    // If the key is present in the map but isn't associated with the given\n    // Snap ID, it means that the item was added to the map by a different\n    // Snap. In this case, throw an error.\n    if (this.#map.has(key) && !this.has(value.snapId, key)) {\n      throw new InvalidSnapIdError(value.snapId, key);\n    }\n    this.#map.set(key, value);\n    return this;\n  }\n\n  /**\n   * Returns an iterable of the values in the map.\n   *\n   * Example:\n   *\n   * ```ts\n   * const map = new SnapIdMap([\n   *   ['foo', { snapId: '1', name: 'foo' }],\n   *   ['bar', { snapId: '1', name: 'bar' }],\n   * ]);\n   * const values = [...map.values()];\n   * // Returns\n   * // [\n   * //   { snapId: '1', name: 'foo' },\n   * //   { snapId: '1', name: 'bar' },\n   * // ]\n   * ```\n   *\n   * @returns An iterable of the values in the map.\n   */\n  values(): IterableIterator<Value> {\n    return this.#map.values();\n  }\n\n  /**\n   * Returns the number of key-value pairs in the map.\n   *\n   * @returns The number of key-value pairs in the map.\n   */\n  get size(): number {\n    return this.#map.size;\n  }\n}\n"]}