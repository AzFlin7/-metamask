{"version":3,"file":"CaseInsensitiveMap.js","sourceRoot":"","sources":["../src/CaseInsensitiveMap.ts"],"names":[],"mappings":";;;AAAA,iCAAoC;AAEpC;;GAEG;AACH,MAAa,kBAA0B,SAAQ,GAAkB;IAC/D;;;;;OAKG;IACH,MAAM,CAAC,UAAU,CACf,GAA0B;QAE1B,OAAO,IAAI,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IAED;;;;OAIG;IACH,QAAQ;QACN,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;;OAOG;IACH,GAAG,CAAC,GAAW;QACb,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;OAOG;IACH,UAAU,CAAC,GAAW,EAAE,IAAI,GAAG,KAAK;QAClC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,IAAA,iBAAU,EAAC,GAAG,IAAI,KAAK,GAAG,aAAa,CAAC,CAAC;IACnE,CAAC;IAED;;;;;OAKG;IACH,GAAG,CAAC,GAAW;QACb,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;;;;;;;OAUG;IACH,GAAG,CAAC,GAAW,EAAE,KAAY;QAC3B,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,GAAW;QAChB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IACzC,CAAC;CACF;AAhFD,gDAgFC","sourcesContent":["import { throwError } from './util';\n\n/**\n * A case-insensitive map that stores key-value pairs.\n */\nexport class CaseInsensitiveMap<Value> extends Map<string, Value> {\n  /**\n   * Create a new case-insensitive map from a plain object.\n   *\n   * @param obj - An object with entries to initialize the map with.\n   * @returns A new case-insensitive map with all entries from `obj`.\n   */\n  static fromObject<Value>(\n    obj: Record<string, Value>,\n  ): CaseInsensitiveMap<Value> {\n    return new CaseInsensitiveMap(Object.entries(obj));\n  }\n\n  /**\n   * Return a plain object with all entries from this map.\n   *\n   * @returns A plain object with all entries from this map.\n   */\n  toObject(): Record<string, Value> {\n    return Object.fromEntries(this.entries());\n  }\n\n  /**\n   * Return the value associated to the given key, or `undefined` if the key is\n   * not found.\n   *\n   * @param key - The key to get the value for.\n   * @returns The value associated to the given key, or `undefined` if the key\n   * is not found.\n   */\n  get(key: string): Value | undefined {\n    return super.get(key.toLowerCase());\n  }\n\n  /**\n   * Return the value associated with the given key, or throw an error if the\n   * key is not found.\n   *\n   * @param key - The key to look up in the map.\n   * @param name - Optional name of the key to include in the error message.\n   * @returns The value associated with the given key.\n   */\n  getOrThrow(key: string, name = 'Key'): Value {\n    return this.get(key) ?? throwError(`${name} '${key}' not found`);\n  }\n\n  /**\n   * Check whether the given key is present in the map.\n   *\n   * @param key - The key to check for.\n   * @returns `true` if the key is present in the map, `false` otherwise.\n   */\n  has(key: string): boolean {\n    return super.has(key.toLowerCase());\n  }\n\n  /**\n   * Set the value for the given key. If the key already exists in the map, its\n   * value will be updated.\n   *\n   * The key is converted to lowercase before being stored in the map to ensure\n   * case-insensitivity.\n   *\n   * @param key - The key to set the value for.\n   * @param value - The value to set.\n   * @returns The map instance.\n   */\n  set(key: string, value: Value): this {\n    return super.set(key.toLowerCase(), value);\n  }\n\n  /**\n   * Delete the entry for the given key.\n   *\n   * @param key - The key to delete the entry for.\n   * @returns `true` if the entry was present in the map, `false` otherwise.\n   */\n  delete(key: string): boolean {\n    return super.delete(key.toLowerCase());\n  }\n}\n"]}