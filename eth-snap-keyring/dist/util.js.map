{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":";;;AAEA,6CAAqC;AAErC;;;;;;;;;;GAUG;AACH,SAAgB,UAAU,CACxB,KAAc,EACd,MAA4B,EAC5B,OAAgB;IAEhB,IAAA,oBAAM,EAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAC/B,OAAO,KAAK,CAAC;AACf,CAAC;AAPD,gCAOC;AAED;;;;;GAKG;AACH,SAAgB,MAAM,CAAO,KAA8B;IACzD,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC7B,CAAC;AAFD,wBAEC;AAED;;;;;;;;;GASG;AACH,SAAgB,MAAM,CAA2B,KAAU;IACzD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAS,CAAC;AACnD,CAAC;AAFD,wBAEC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAC3B,KAAuB;IAEvB,IAAI,KAAK,KAAK,SAAS,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;AACH,CAAC;AAND,sCAMC;AAED;;;;GAIG;AACH,SAAgB,UAAU,CAAC,OAAe;IACxC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AAC3B,CAAC;AAFD,gCAEC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,CAAS,EAAE,CAAS;IACnD,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;AAC7C,CAAC;AAFD,4CAEC","sourcesContent":["import type { Json } from '@metamask/utils';\nimport type { Struct } from 'superstruct';\nimport { assert } from 'superstruct';\n\n/**\n * Assert that a value is valid according to a struct.\n *\n * It is similar to superstruct's mask function, but it does not ignore extra\n * properties.\n *\n * @param value - Value to check.\n * @param struct - Struct to validate the value against.\n * @param message - Error message to throw if the value is not valid.\n * @returns The value if it is valid.\n */\nexport function strictMask<Type, Schema>(\n  value: unknown,\n  struct: Struct<Type, Schema>,\n  message?: string,\n): Type {\n  assert(value, struct, message);\n  return value;\n}\n\n/**\n * Remove duplicate entries from an array.\n *\n * @param array - Array to remove duplicates from.\n * @returns Array with duplicates removed.\n */\nexport function unique<Type>(array: Type[] | Iterable<Type>): Type[] {\n  return [...new Set(array)];\n}\n\n/**\n * Convert a value to a valid JSON object.\n *\n * The function chains JSON.stringify and JSON.parse to ensure that the result\n * is a valid JSON object. In objects, undefined values are removed, and in\n * arrays, they are replaced with null.\n *\n * @param value - Value to convert to JSON.\n * @returns JSON representation of the value.\n */\nexport function toJson<Type extends Json = Json>(value: any): Type {\n  return JSON.parse(JSON.stringify(value)) as Type;\n}\n\n/**\n * Asserts that the given value is defined.\n *\n * @param value - Value to check.\n */\nexport function ensureDefined<Type>(\n  value: Type | undefined,\n): asserts value is Type {\n  if (value === undefined) {\n    throw new Error('Argument is undefined');\n  }\n}\n\n/**\n * Helper function that throws an error.\n *\n * @param message - Error message to throw.\n */\nexport function throwError(message: string): never {\n  throw new Error(message);\n}\n\n/**\n * Compares two strings for equality, ignoring case.\n *\n * @param a - The first string to compare.\n * @param b - The second string to compare.\n * @returns `true` if the strings are equal, ignoring case. `false` otherwise.\n */\nexport function equalsIgnoreCase(a: string, b: string): boolean {\n  return a.toLowerCase() === b.toLowerCase();\n}\n"]}