{"version":3,"sources":["../src/utils/gas.ts"],"sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  query,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type { Hex } from '@metamask/utils';\nimport { add0x, createModuleLogger } from '@metamask/utils';\n\nimport { GAS_BUFFER_CHAIN_OVERRIDES } from '../constants';\nimport { projectLogger } from '../logger';\nimport type { TransactionMeta, TransactionParams } from '../types';\n\nexport type UpdateGasRequest = {\n  ethQuery: EthQuery;\n  isCustomNetwork: boolean;\n  chainId: Hex;\n  txMeta: TransactionMeta;\n};\n\nexport const log = createModuleLogger(projectLogger, 'gas');\n\nexport const FIXED_GAS = '0x5208';\nexport const DEFAULT_GAS_MULTIPLIER = 1.5;\n\nexport async function updateGas(request: UpdateGasRequest) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n\n  const [gas, simulationFails] = await getGas(request);\n\n  txMeta.txParams.gas = gas;\n  txMeta.simulationFails = simulationFails;\n\n  if (!initialParams.gas) {\n    txMeta.originalGasEstimate = txMeta.txParams.gas;\n  }\n\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n\n  txMeta.defaultGasEstimates.gas = txMeta.txParams.gas;\n}\n\nexport async function estimateGas(\n  txParams: TransactionParams,\n  ethQuery: EthQuery,\n) {\n  const request = { ...txParams };\n  const { data, value } = request;\n\n  const { gasLimit: gasLimitHex, number: blockNumber } = await getLatestBlock(\n    ethQuery,\n  );\n\n  const gasLimitBN = hexToBN(gasLimitHex);\n\n  request.data = data ? add0x(data) : data;\n  request.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n  request.value = value || '0x0';\n\n  let estimatedGas = request.gas;\n  let simulationFails;\n\n  try {\n    estimatedGas = await query(ethQuery, 'estimateGas', [request]);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    simulationFails = {\n      reason: error.message,\n      errorKey: error.errorKey,\n      debug: {\n        blockNumber,\n        blockGasLimit: gasLimitHex,\n      },\n    };\n\n    log('Estimation failed', { ...simulationFails, fallback: estimateGas });\n  }\n\n  return {\n    blockGasLimit: gasLimitHex,\n    estimatedGas,\n    simulationFails,\n  };\n}\n\nexport function addGasBuffer(\n  estimatedGas: string,\n  blockGasLimit: string,\n  multiplier: number,\n) {\n  const estimatedGasBN = hexToBN(estimatedGas);\n  const maxGasBN = hexToBN(blockGasLimit).muln(0.9);\n  const paddedGasBN = estimatedGasBN.muln(multiplier);\n\n  if (estimatedGasBN.gt(maxGasBN)) {\n    const estimatedGasHex = add0x(estimatedGas);\n    log('Using estimated value', estimatedGasHex);\n    return estimatedGasHex;\n  }\n\n  if (paddedGasBN.lt(maxGasBN)) {\n    const paddedHex = add0x(BNToHex(paddedGasBN));\n    log('Using padded estimate', paddedHex, multiplier);\n    return paddedHex;\n  }\n\n  const maxHex = add0x(BNToHex(maxGasBN));\n  log('Using 90% of block gas limit', maxHex);\n  return maxHex;\n}\n\nasync function getGas(\n  request: UpdateGasRequest,\n): Promise<[string, TransactionMeta['simulationFails']?]> {\n  const { isCustomNetwork, chainId, txMeta } = request;\n\n  if (txMeta.txParams.gas) {\n    log('Using value from request', txMeta.txParams.gas);\n    return [txMeta.txParams.gas];\n  }\n\n  if (await requiresFixedGas(request)) {\n    log('Using fixed value', FIXED_GAS);\n    return [FIXED_GAS];\n  }\n\n  const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n    txMeta.txParams,\n    request.ethQuery,\n  );\n\n  if (isCustomNetwork) {\n    log('Using original estimate as custom network');\n    return [estimatedGas, simulationFails];\n  }\n\n  const bufferMultiplier =\n    GAS_BUFFER_CHAIN_OVERRIDES[\n      chainId as keyof typeof GAS_BUFFER_CHAIN_OVERRIDES\n    ] ?? DEFAULT_GAS_MULTIPLIER;\n\n  const bufferedGas = addGasBuffer(\n    estimatedGas,\n    blockGasLimit,\n    bufferMultiplier,\n  );\n\n  return [bufferedGas, simulationFails];\n}\n\nasync function requiresFixedGas({\n  ethQuery,\n  txMeta,\n  isCustomNetwork,\n}: UpdateGasRequest): Promise<boolean> {\n  const {\n    txParams: { to, data },\n  } = txMeta;\n\n  if (isCustomNetwork || !to || data) {\n    return false;\n  }\n\n  const code = await getCode(ethQuery, to);\n\n  return !code || code === '0x';\n}\n\nasync function getCode(\n  ethQuery: EthQuery,\n  address: string,\n): Promise<string | undefined> {\n  return await query(ethQuery, 'getCode', [address]);\n}\n\nasync function getLatestBlock(\n  ethQuery: EthQuery,\n): Promise<{ gasLimit: string; number: string }> {\n  return await query(ethQuery, 'getBlockByNumber', ['latest', false]);\n}\n"],"mappings":";;;;;;;;AAEA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAGP,SAAS,OAAO,0BAA0B;AAanC,IAAM,MAAM,mBAAmB,eAAe,KAAK;AAEnD,IAAM,YAAY;AAClB,IAAM,yBAAyB;AAEtC,eAAsB,UAAU,SAA2B;AACzD,QAAM,EAAE,OAAO,IAAI;AACnB,QAAM,gBAAgB,EAAE,GAAG,OAAO,SAAS;AAE3C,QAAM,CAAC,KAAK,eAAe,IAAI,MAAM,OAAO,OAAO;AAEnD,SAAO,SAAS,MAAM;AACtB,SAAO,kBAAkB;AAEzB,MAAI,CAAC,cAAc,KAAK;AACtB,WAAO,sBAAsB,OAAO,SAAS;AAAA,EAC/C;AAEA,MAAI,CAAC,OAAO,qBAAqB;AAC/B,WAAO,sBAAsB,CAAC;AAAA,EAChC;AAEA,SAAO,oBAAoB,MAAM,OAAO,SAAS;AACnD;AAEA,eAAsB,YACpB,UACA,UACA;AACA,QAAM,UAAU,EAAE,GAAG,SAAS;AAC9B,QAAM,EAAE,MAAM,MAAM,IAAI;AAExB,QAAM,EAAE,UAAU,aAAa,QAAQ,YAAY,IAAI,MAAM;AAAA,IAC3D;AAAA,EACF;AAEA,QAAM,aAAa,QAAQ,WAAW;AAEtC,UAAQ,OAAO,OAAO,MAAM,IAAI,IAAI;AACpC,UAAQ,MAAM,QAAQ,WAAW,YAAY,IAAI,EAAE,CAAC;AACpD,UAAQ,QAAQ,SAAS;AAEzB,MAAI,eAAe,QAAQ;AAC3B,MAAI;AAEJ,MAAI;AACF,mBAAe,MAAM,MAAM,UAAU,eAAe,CAAC,OAAO,CAAC;AAAA,EAG/D,SAAS,OAAY;AACnB,sBAAkB;AAAA,MAChB,QAAQ,MAAM;AAAA,MACd,UAAU,MAAM;AAAA,MAChB,OAAO;AAAA,QACL;AAAA,QACA,eAAe;AAAA,MACjB;AAAA,IACF;AAEA,QAAI,qBAAqB,EAAE,GAAG,iBAAiB,UAAU,YAAY,CAAC;AAAA,EACxE;AAEA,SAAO;AAAA,IACL,eAAe;AAAA,IACf;AAAA,IACA;AAAA,EACF;AACF;AAEO,SAAS,aACd,cACA,eACA,YACA;AACA,QAAM,iBAAiB,QAAQ,YAAY;AAC3C,QAAM,WAAW,QAAQ,aAAa,EAAE,KAAK,GAAG;AAChD,QAAM,cAAc,eAAe,KAAK,UAAU;AAElD,MAAI,eAAe,GAAG,QAAQ,GAAG;AAC/B,UAAM,kBAAkB,MAAM,YAAY;AAC1C,QAAI,yBAAyB,eAAe;AAC5C,WAAO;AAAA,EACT;AAEA,MAAI,YAAY,GAAG,QAAQ,GAAG;AAC5B,UAAM,YAAY,MAAM,QAAQ,WAAW,CAAC;AAC5C,QAAI,yBAAyB,WAAW,UAAU;AAClD,WAAO;AAAA,EACT;AAEA,QAAM,SAAS,MAAM,QAAQ,QAAQ,CAAC;AACtC,MAAI,gCAAgC,MAAM;AAC1C,SAAO;AACT;AAEA,eAAe,OACb,SACwD;AACxD,QAAM,EAAE,iBAAiB,SAAS,OAAO,IAAI;AAE7C,MAAI,OAAO,SAAS,KAAK;AACvB,QAAI,4BAA4B,OAAO,SAAS,GAAG;AACnD,WAAO,CAAC,OAAO,SAAS,GAAG;AAAA,EAC7B;AAEA,MAAI,MAAM,iBAAiB,OAAO,GAAG;AACnC,QAAI,qBAAqB,SAAS;AAClC,WAAO,CAAC,SAAS;AAAA,EACnB;AAEA,QAAM,EAAE,eAAe,cAAc,gBAAgB,IAAI,MAAM;AAAA,IAC7D,OAAO;AAAA,IACP,QAAQ;AAAA,EACV;AAEA,MAAI,iBAAiB;AACnB,QAAI,2CAA2C;AAC/C,WAAO,CAAC,cAAc,eAAe;AAAA,EACvC;AAEA,QAAM,mBACJ,2BACE,OACF,KAAK;AAEP,QAAM,cAAc;AAAA,IAClB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO,CAAC,aAAa,eAAe;AACtC;AAEA,eAAe,iBAAiB;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AACF,GAAuC;AACrC,QAAM;AAAA,IACJ,UAAU,EAAE,IAAI,KAAK;AAAA,EACvB,IAAI;AAEJ,MAAI,mBAAmB,CAAC,MAAM,MAAM;AAClC,WAAO;AAAA,EACT;AAEA,QAAM,OAAO,MAAM,QAAQ,UAAU,EAAE;AAEvC,SAAO,CAAC,QAAQ,SAAS;AAC3B;AAEA,eAAe,QACb,UACA,SAC6B;AAC7B,SAAO,MAAM,MAAM,UAAU,WAAW,CAAC,OAAO,CAAC;AACnD;AAEA,eAAe,eACb,UAC+C;AAC/C,SAAO,MAAM,MAAM,UAAU,oBAAoB,CAAC,UAAU,KAAK,CAAC;AACpE;","names":[]}