{"version":3,"sources":["../src/gas-flows/OracleLayer1GasFeeFlow.ts"],"sourcesContent":["import { Common, Hardfork } from '@ethereumjs/common';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { Contract } from '@ethersproject/contracts';\nimport { Web3Provider, type ExternalProvider } from '@ethersproject/providers';\nimport type { Hex } from '@metamask/utils';\nimport { createModuleLogger } from '@metamask/utils';\nimport { omit } from 'lodash';\n\nimport { projectLogger } from '../logger';\nimport type {\n  Layer1GasFeeFlow,\n  Layer1GasFeeFlowRequest,\n  Layer1GasFeeFlowResponse,\n  TransactionMeta,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'oracle-layer1-gas-fee-flow');\n\nconst DUMMY_KEY =\n  'abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789';\n\nconst GAS_PRICE_ORACLE_ABI = [\n  {\n    inputs: [{ internalType: 'bytes', name: '_data', type: 'bytes' }],\n    name: 'getL1Fee',\n    outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n    stateMutability: 'view',\n    type: 'function',\n  },\n];\n\n/**\n * Layer 1 gas fee flow that obtains gas fee estimate using an oracle smart contract.\n */\nexport abstract class OracleLayer1GasFeeFlow implements Layer1GasFeeFlow {\n  #oracleAddress: Hex;\n\n  #signTransaction: boolean;\n\n  constructor(oracleAddress: Hex, signTransaction?: boolean) {\n    this.#oracleAddress = oracleAddress;\n    this.#signTransaction = signTransaction ?? false;\n  }\n\n  abstract matchesTransaction(transactionMeta: TransactionMeta): boolean;\n\n  async getLayer1Fee(\n    request: Layer1GasFeeFlowRequest,\n  ): Promise<Layer1GasFeeFlowResponse> {\n    try {\n      return await this.#getOracleLayer1GasFee(request);\n    } catch (error) {\n      log('Failed to get oracle layer 1 gas fee', error);\n      throw new Error(`Failed to get oracle layer 1 gas fee`);\n    }\n  }\n\n  async #getOracleLayer1GasFee(\n    request: Layer1GasFeeFlowRequest,\n  ): Promise<Layer1GasFeeFlowResponse> {\n    const { provider, transactionMeta } = request;\n\n    const contract = new Contract(\n      this.#oracleAddress,\n      GAS_PRICE_ORACLE_ABI,\n      // Network controller provider type is incompatible with ethers provider\n      new Web3Provider(provider as unknown as ExternalProvider),\n    );\n\n    const serializedTransaction = this.#buildUnserializedTransaction(\n      transactionMeta,\n      this.#signTransaction,\n    ).serialize();\n\n    const result = await contract.getL1Fee(serializedTransaction);\n\n    if (result === undefined) {\n      throw new Error('No value returned from oracle contract');\n    }\n\n    return {\n      layer1Fee: result.toHexString(),\n    };\n  }\n\n  #buildUnserializedTransaction(\n    transactionMeta: TransactionMeta,\n    sign: boolean,\n  ) {\n    const txParams = this.#buildTransactionParams(transactionMeta);\n    const common = this.#buildTransactionCommon(transactionMeta);\n\n    let unserializedTransaction = TransactionFactory.fromTxData(txParams, {\n      common,\n    });\n\n    if (sign) {\n      const keyBuffer = Buffer.from(DUMMY_KEY, 'hex');\n      unserializedTransaction = unserializedTransaction.sign(keyBuffer);\n    }\n\n    return unserializedTransaction;\n  }\n\n  #buildTransactionParams(\n    transactionMeta: TransactionMeta,\n  ): TransactionMeta['txParams'] {\n    return {\n      ...omit(transactionMeta.txParams, 'gas'),\n      gasLimit: transactionMeta.txParams.gas,\n    };\n  }\n\n  #buildTransactionCommon(transactionMeta: TransactionMeta) {\n    const chainId = Number(transactionMeta.chainId);\n\n    return Common.custom({\n      chainId,\n      defaultHardfork: Hardfork.London,\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,SAAS,QAAQ,gBAAgB;AACjC,SAAS,0BAA0B;AACnC,SAAS,gBAAgB;AACzB,SAAS,oBAA2C;AAEpD,SAAS,0BAA0B;AACnC,SAAS,YAAY;AAUrB,IAAM,MAAM,mBAAmB,eAAe,4BAA4B;AAE1E,IAAM,YACJ;AAEF,IAAM,uBAAuB;AAAA,EAC3B;AAAA,IACE,QAAQ,CAAC,EAAE,cAAc,SAAS,MAAM,SAAS,MAAM,QAAQ,CAAC;AAAA,IAChE,MAAM;AAAA,IACN,SAAS,CAAC,EAAE,cAAc,WAAW,MAAM,IAAI,MAAM,UAAU,CAAC;AAAA,IAChE,iBAAiB;AAAA,IACjB,MAAM;AAAA,EACR;AACF;AA7BA;AAkCO,IAAe,yBAAf,MAAkE;AAAA,EAKvE,YAAY,eAAoB,iBAA2B;AAkB3D,uBAAM;AA4BN;AAmBA;AASA;AA9EA;AAEA;AAGE,uBAAK,gBAAiB;AACtB,uBAAK,kBAAmB,mBAAmB;AAAA,EAC7C;AAAA,EAIA,MAAM,aACJ,SACmC;AACnC,QAAI;AACF,aAAO,MAAM,sBAAK,kDAAL,WAA4B;AAAA,IAC3C,SAAS,OAAO;AACd,UAAI,wCAAwC,KAAK;AACjD,YAAM,IAAI,MAAM,sCAAsC;AAAA,IACxD;AAAA,EACF;AAkEF;AAtFE;AAEA;AAoBM;AAAA,2BAAsB,eAC1B,SACmC;AACnC,QAAM,EAAE,UAAU,gBAAgB,IAAI;AAEtC,QAAM,WAAW,IAAI;AAAA,IACnB,mBAAK;AAAA,IACL;AAAA;AAAA,IAEA,IAAI,aAAa,QAAuC;AAAA,EAC1D;AAEA,QAAM,wBAAwB,sBAAK,gEAAL,WAC5B,iBACA,mBAAK,mBACL,UAAU;AAEZ,QAAM,SAAS,MAAM,SAAS,SAAS,qBAAqB;AAE5D,MAAI,WAAW,QAAW;AACxB,UAAM,IAAI,MAAM,wCAAwC;AAAA,EAC1D;AAEA,SAAO;AAAA,IACL,WAAW,OAAO,YAAY;AAAA,EAChC;AACF;AAEA;AAAA,kCAA6B,SAC3B,iBACA,MACA;AACA,QAAM,WAAW,sBAAK,oDAAL,WAA6B;AAC9C,QAAM,SAAS,sBAAK,oDAAL,WAA6B;AAE5C,MAAI,0BAA0B,mBAAmB,WAAW,UAAU;AAAA,IACpE;AAAA,EACF,CAAC;AAED,MAAI,MAAM;AACR,UAAM,YAAY,OAAO,KAAK,WAAW,KAAK;AAC9C,8BAA0B,wBAAwB,KAAK,SAAS;AAAA,EAClE;AAEA,SAAO;AACT;AAEA;AAAA,4BAAuB,SACrB,iBAC6B;AAC7B,SAAO;AAAA,IACL,GAAG,KAAK,gBAAgB,UAAU,KAAK;AAAA,IACvC,UAAU,gBAAgB,SAAS;AAAA,EACrC;AACF;AAEA;AAAA,4BAAuB,SAAC,iBAAkC;AACxD,QAAM,UAAU,OAAO,gBAAgB,OAAO;AAE9C,SAAO,OAAO,OAAO;AAAA,IACnB;AAAA,IACA,iBAAiB,SAAS;AAAA,EAC5B,CAAC;AACH;","names":[]}