{"version":3,"sources":["../src/utils/gas-fees.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport {\n  ORIGIN_METAMASK,\n  gweiDecToWEIBN,\n  query,\n  toHex,\n} from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport type {\n  FetchGasFeeEstimateOptions,\n  GasFeeState,\n} from '@metamask/gas-fee-controller';\nimport type { Hex } from '@metamask/utils';\nimport { add0x, createModuleLogger } from '@metamask/utils';\n\nimport { projectLogger } from '../logger';\nimport type {\n  SavedGasFees,\n  TransactionParams,\n  TransactionMeta,\n  TransactionType,\n  GasFeeFlow,\n} from '../types';\nimport { UserFeeLevel } from '../types';\nimport { getGasFeeFlow } from './gas-flow';\nimport { SWAP_TRANSACTION_TYPES } from './swaps';\n\nexport type UpdateGasFeesRequest = {\n  eip1559: boolean;\n  ethQuery: EthQuery;\n  gasFeeFlows: GasFeeFlow[];\n  getGasFeeEstimates: (\n    options: FetchGasFeeEstimateOptions,\n  ) => Promise<GasFeeState>;\n  getSavedGasFees: (chainId: Hex) => SavedGasFees | undefined;\n  txMeta: TransactionMeta;\n};\n\nexport type GetGasFeeRequest = UpdateGasFeesRequest & {\n  initialParams: TransactionParams;\n  savedGasFees?: SavedGasFees;\n  suggestedGasFees: SuggestedGasFees;\n};\n\ntype SuggestedGasFees = {\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n  gasPrice?: string;\n};\n\nconst log = createModuleLogger(projectLogger, 'gas-fees');\n\nexport async function updateGasFees(request: UpdateGasFeesRequest) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n\n  const isSwap = SWAP_TRANSACTION_TYPES.includes(\n    txMeta.type as TransactionType,\n  );\n  const savedGasFees = isSwap\n    ? undefined\n    : request.getSavedGasFees(txMeta.chainId);\n\n  const suggestedGasFees = await getSuggestedGasFees(request);\n\n  log('Suggested gas fees', suggestedGasFees);\n\n  const getGasFeeRequest: GetGasFeeRequest = {\n    ...request,\n    initialParams,\n    savedGasFees,\n    suggestedGasFees,\n  };\n\n  txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);\n\n  txMeta.txParams.maxPriorityFeePerGas =\n    getMaxPriorityFeePerGas(getGasFeeRequest);\n\n  txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);\n  txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);\n\n  log('Updated gas fee properties', {\n    maxFeePerGas: txMeta.txParams.maxFeePerGas,\n    maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,\n    gasPrice: txMeta.txParams.gasPrice,\n  });\n\n  if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {\n    delete txMeta.txParams.gasPrice;\n  }\n\n  if (txMeta.txParams.gasPrice) {\n    delete txMeta.txParams.maxFeePerGas;\n    delete txMeta.txParams.maxPriorityFeePerGas;\n  }\n\n  updateDefaultGasEstimates(txMeta);\n}\n\nexport function gweiDecimalToWeiHex(value: string) {\n  return toHex(gweiDecToWEIBN(value));\n}\n\nfunction getMaxFeePerGas(request: GetGasFeeRequest): string | undefined {\n  const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee as string);\n    log('Using maxFeePerGas from savedGasFees', maxFeePerGas);\n    return maxFeePerGas;\n  }\n\n  if (initialParams.maxFeePerGas) {\n    log('Using maxFeePerGas from request', initialParams.maxFeePerGas);\n    return initialParams.maxFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {\n    log(\n      'Setting maxFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxFeePerGas) {\n    log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n\n  if (suggestedGasFees.gasPrice) {\n    log(\n      'Setting maxFeePerGas to suggested gasPrice',\n      suggestedGasFees.gasPrice,\n    );\n    return suggestedGasFees.gasPrice;\n  }\n\n  log('maxFeePerGas not set');\n  return undefined;\n}\n\nfunction getMaxPriorityFeePerGas(\n  request: GetGasFeeRequest,\n): string | undefined {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } =\n    request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);\n    log(\n      'Using maxPriorityFeePerGas from savedGasFees.priorityFee',\n      maxPriorityFeePerGas,\n    );\n    return maxPriorityFeePerGas;\n  }\n\n  if (initialParams.maxPriorityFeePerGas) {\n    log(\n      'Using maxPriorityFeePerGas from request',\n      initialParams.maxPriorityFeePerGas,\n    );\n    return initialParams.maxPriorityFeePerGas;\n  }\n\n  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to gasPrice from request',\n      initialParams.gasPrice,\n    );\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxPriorityFeePerGas) {\n    log(\n      'Using suggested maxPriorityFeePerGas',\n      suggestedGasFees.maxPriorityFeePerGas,\n    );\n    return suggestedGasFees.maxPriorityFeePerGas;\n  }\n\n  if (txMeta.txParams.maxFeePerGas) {\n    log(\n      'Setting maxPriorityFeePerGas to maxFeePerGas',\n      txMeta.txParams.maxFeePerGas,\n    );\n    return txMeta.txParams.maxFeePerGas;\n  }\n\n  log('maxPriorityFeePerGas not set');\n  return undefined;\n}\n\nfunction getGasPrice(request: GetGasFeeRequest): string | undefined {\n  const { eip1559, initialParams, suggestedGasFees } = request;\n\n  if (eip1559) {\n    return undefined;\n  }\n\n  if (initialParams.gasPrice) {\n    log('Using gasPrice from request', initialParams.gasPrice);\n    return initialParams.gasPrice;\n  }\n\n  if (suggestedGasFees.maxFeePerGas) {\n    log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n\n  if (suggestedGasFees.gasPrice) {\n    log('Using suggested gasPrice', suggestedGasFees.gasPrice);\n    return suggestedGasFees.gasPrice;\n  }\n\n  log('gasPrice not set');\n  return undefined;\n}\n\nfunction getUserFeeLevel(request: GetGasFeeRequest): UserFeeLevel | undefined {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } =\n    request;\n\n  if (!eip1559) {\n    return undefined;\n  }\n\n  if (savedGasFees) {\n    return UserFeeLevel.CUSTOM;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    initialParams.gasPrice\n  ) {\n    return txMeta.origin === ORIGIN_METAMASK\n      ? UserFeeLevel.CUSTOM\n      : UserFeeLevel.DAPP_SUGGESTED;\n  }\n\n  if (\n    !initialParams.maxFeePerGas &&\n    !initialParams.maxPriorityFeePerGas &&\n    suggestedGasFees.maxFeePerGas &&\n    suggestedGasFees.maxPriorityFeePerGas\n  ) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  if (txMeta.origin === ORIGIN_METAMASK) {\n    return UserFeeLevel.MEDIUM;\n  }\n\n  return UserFeeLevel.DAPP_SUGGESTED;\n}\n\nfunction updateDefaultGasEstimates(txMeta: TransactionMeta) {\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n\n  txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;\n\n  txMeta.defaultGasEstimates.maxPriorityFeePerGas =\n    txMeta.txParams.maxPriorityFeePerGas;\n\n  txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;\n  txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;\n}\n\nasync function getSuggestedGasFees(\n  request: UpdateGasFeesRequest,\n): Promise<SuggestedGasFees> {\n  const { eip1559, ethQuery, gasFeeFlows, getGasFeeEstimates, txMeta } =\n    request;\n\n  if (\n    (!eip1559 && txMeta.txParams.gasPrice) ||\n    (eip1559 &&\n      txMeta.txParams.maxFeePerGas &&\n      txMeta.txParams.maxPriorityFeePerGas)\n  ) {\n    return {};\n  }\n\n  const gasFeeFlow = getGasFeeFlow(txMeta, gasFeeFlows) as GasFeeFlow;\n\n  try {\n    const response = await gasFeeFlow.getGasFees({\n      ethQuery,\n      getGasFeeControllerEstimates: getGasFeeEstimates,\n      transactionMeta: txMeta,\n    });\n\n    return response.estimates.medium;\n  } catch (error) {\n    log('Failed to get suggested gas fees', error);\n  }\n\n  const gasPriceDecimal = (await query(ethQuery, 'gasPrice')) as number;\n\n  const gasPrice = gasPriceDecimal\n    ? add0x(gasPriceDecimal.toString(16))\n    : undefined;\n\n  return { gasPrice };\n}\n"]}