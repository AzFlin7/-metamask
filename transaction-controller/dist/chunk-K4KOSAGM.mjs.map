{"version":3,"sources":["../src/utils/simulation-api.ts"],"sourcesContent":["import { convertHexToDecimal } from '@metamask/controller-utils';\nimport { createModuleLogger, type Hex } from '@metamask/utils';\n\nimport { SimulationChainNotSupportedError, SimulationError } from '../errors';\nimport { projectLogger } from '../logger';\n\nconst log = createModuleLogger(projectLogger, 'simulation-api');\n\nconst RPC_METHOD = 'infura_simulateTransactions';\nconst BASE_URL = 'https://tx-sentinel-{0}.api.cx.metamask.io/';\nconst ENDPOINT_NETWORKS = 'networks';\n\n/** Single transaction to simulate in a simulation API request.  */\nexport type SimulationRequestTransaction = {\n  /** Data to send with the transaction. */\n  data?: Hex;\n\n  /** Sender of the transaction. */\n  from: Hex;\n\n  /** Gas limit for the transaction. */\n  gas?: Hex;\n\n  /** Maximum fee per gas for the transaction. */\n  maxFeePerGas?: Hex;\n\n  /** Maximum priority fee per gas for the transaction. */\n  maxPriorityFeePerGas?: Hex;\n\n  /** Recipient of the transaction. */\n  to?: Hex;\n\n  /** Value to send with the transaction. */\n  value?: Hex;\n};\n\n/** Request to the simulation API to simulate transactions. */\nexport type SimulationRequest = {\n  /**\n   * Transactions to be sequentially simulated.\n   * State changes impact subsequent transactions in the list.\n   */\n  transactions: SimulationRequestTransaction[];\n\n  /**\n   * Overrides to the state of the blockchain, keyed by smart contract address.\n   */\n  overrides?: {\n    [address: Hex]: {\n      /** Overrides to the storage slots for a smart contract account. */\n      stateDiff: {\n        [slot: Hex]: Hex;\n      };\n    };\n  };\n\n  /**\n   * Whether to include call traces in the response.\n   * Defaults to false.\n   */\n  withCallTrace?: boolean;\n\n  /**\n   * Whether to include event logs in the response.\n   * Defaults to false.\n   */\n  withLogs?: boolean;\n};\n\n/** Raw event log emitted by a simulated transaction. */\nexport type SimulationResponseLog = {\n  /** Address of the account that created the event. */\n  address: Hex;\n\n  /** Raw data in the event that is not indexed. */\n  data: Hex;\n\n  /** Raw indexed data from the event. */\n  topics: Hex[];\n};\n\n/** Call trace of a single simulated transaction. */\nexport type SimulationResponseCallTrace = {\n  /** Nested calls. */\n  calls: SimulationResponseCallTrace[];\n\n  /** Raw event logs created by the call. */\n  logs: SimulationResponseLog[];\n};\n\n/**\n * Changes to the blockchain state.\n * Keyed by account address.\n */\nexport type SimulationResponseStateDiff = {\n  [address: Hex]: {\n    /** Native balance of the account. */\n    balance?: Hex;\n\n    /** Nonce of the account. */\n    nonce?: Hex;\n\n    /** Storage values per slot. */\n    storage?: {\n      [slot: Hex]: Hex;\n    };\n  };\n};\n\n/** Response from the simulation API for a single transaction. */\nexport type SimulationResponseTransaction = {\n  /** An error message indicating the transaction could not be simulated. */\n  error?: string;\n\n  /** Return value of the transaction, such as the balance if calling balanceOf. */\n  return: Hex;\n\n  /** Hierarchy of call data including nested calls and logs. */\n  callTrace?: SimulationResponseCallTrace;\n\n  /** Changes to the blockchain state. */\n  stateDiff?: {\n    /** Initial blockchain state before the transaction. */\n    pre?: SimulationResponseStateDiff;\n\n    /** Updated blockchain state after the transaction. */\n    post?: SimulationResponseStateDiff;\n  };\n};\n\n/** Response from the simulation API. */\nexport type SimulationResponse = {\n  /** Simulation data for each transaction in the request. */\n  transactions: SimulationResponseTransaction[];\n};\n\n/** Data for a network supported by the Simulation API. */\ntype SimulationNetwork = {\n  /** Subdomain of the API for the network.  */\n  network: string;\n\n  /** Whether the network supports confirmation simulations. */\n  confirmations: boolean;\n};\n\n/** Response from the simulation API containing supported networks. */\ntype SimulationNetworkResponse = {\n  [chainIdDecimal: string]: SimulationNetwork;\n};\n\nlet requestIdCounter = 0;\n\n/**\n * Simulate transactions using the transaction simulation API.\n * @param chainId - The chain ID to simulate transactions on.\n * @param request - The request to simulate transactions.\n */\nexport async function simulateTransactions(\n  chainId: Hex,\n  request: SimulationRequest,\n): Promise<SimulationResponse> {\n  const url = await getSimulationUrl(chainId);\n\n  log('Sending request', url, request);\n\n  const requestId = requestIdCounter;\n  requestIdCounter += 1;\n\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      id: String(requestId),\n      jsonrpc: '2.0',\n      method: RPC_METHOD,\n      params: [request],\n    }),\n  });\n\n  const responseJson = await response.json();\n\n  log('Received response', responseJson);\n\n  if (responseJson.error) {\n    const { code, message } = responseJson.error;\n    throw new SimulationError(message, code);\n  }\n\n  return responseJson?.result;\n}\n\n/**\n * Get the URL for the transaction simulation API.\n * @param chainId - The chain ID to get the URL for.\n * @returns The URL for the transaction simulation API.\n */\nasync function getSimulationUrl(chainId: Hex): Promise<string> {\n  const networkData = await getNetworkData();\n  const chainIdDecimal = convertHexToDecimal(chainId);\n  const network = networkData[chainIdDecimal];\n\n  if (!network?.confirmations) {\n    log('Chain is not supported', chainId);\n    throw new SimulationChainNotSupportedError(chainId);\n  }\n\n  return getUrl(network.network);\n}\n\n/**\n * Retrieve the supported network data from the simulation API.\n */\nasync function getNetworkData(): Promise<SimulationNetworkResponse> {\n  const url = `${getUrl('ethereum-mainnet')}${ENDPOINT_NETWORKS}`;\n  const response = await fetch(url);\n  return response.json();\n}\n\n/**\n * Generate the URL for the specified subdomain in the simulation API.\n * @param subdomain - The subdomain to generate the URL for.\n * @returns The URL for the transaction simulation API.\n */\nfunction getUrl(subdomain: string): string {\n  return BASE_URL.replace('{0}', subdomain);\n}\n"],"mappings":";;;;;;;;;AAAA,SAAS,2BAA2B;AACpC,SAAS,0BAAoC;AAK7C,IAAM,MAAM,mBAAmB,eAAe,gBAAgB;AAE9D,IAAM,aAAa;AACnB,IAAM,WAAW;AACjB,IAAM,oBAAoB;AA4I1B,IAAI,mBAAmB;AAOvB,eAAsB,qBACpB,SACA,SAC6B;AAC7B,QAAM,MAAM,MAAM,iBAAiB,OAAO;AAE1C,MAAI,mBAAmB,KAAK,OAAO;AAEnC,QAAM,YAAY;AAClB,sBAAoB;AAEpB,QAAM,WAAW,MAAM,MAAM,KAAK;AAAA,IAChC,QAAQ;AAAA,IACR,MAAM,KAAK,UAAU;AAAA,MACnB,IAAI,OAAO,SAAS;AAAA,MACpB,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ,CAAC,OAAO;AAAA,IAClB,CAAC;AAAA,EACH,CAAC;AAED,QAAM,eAAe,MAAM,SAAS,KAAK;AAEzC,MAAI,qBAAqB,YAAY;AAErC,MAAI,aAAa,OAAO;AACtB,UAAM,EAAE,MAAM,QAAQ,IAAI,aAAa;AACvC,UAAM,IAAI,gBAAgB,SAAS,IAAI;AAAA,EACzC;AAEA,SAAO,cAAc;AACvB;AAOA,eAAe,iBAAiB,SAA+B;AAC7D,QAAM,cAAc,MAAM,eAAe;AACzC,QAAM,iBAAiB,oBAAoB,OAAO;AAClD,QAAM,UAAU,YAAY,cAAc;AAE1C,MAAI,CAAC,SAAS,eAAe;AAC3B,QAAI,0BAA0B,OAAO;AACrC,UAAM,IAAI,iCAAiC,OAAO;AAAA,EACpD;AAEA,SAAO,OAAO,QAAQ,OAAO;AAC/B;AAKA,eAAe,iBAAqD;AAClE,QAAM,MAAM,GAAG,OAAO,kBAAkB,CAAC,GAAG,iBAAiB;AAC7D,QAAM,WAAW,MAAM,MAAM,GAAG;AAChC,SAAO,SAAS,KAAK;AACvB;AAOA,SAAS,OAAO,WAA2B;AACzC,SAAO,SAAS,QAAQ,OAAO,SAAS;AAC1C;","names":[]}