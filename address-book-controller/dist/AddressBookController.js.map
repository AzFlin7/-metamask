{"version":3,"file":"AddressBookController.js","sourceRoot":"","sources":["../src/AddressBookController.ts"],"names":[],"mappings":";;;AACA,+DAA6D;AAC7D,iEAKoC;AAoBpC,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,oEAAqD,CAAA;IACrD,qDAAsC,CAAA;IACtC,2CAA4B,CAAA;AAC9B,CAAC,EAJW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAItB;AAsCD;;GAEG;AACH,MAAa,qBAAsB,SAAQ,kCAG1C;IAMC;;;;;OAKG;IACH,YAAY,MAA4B,EAAE,KAAiC;QACzE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAZvB;;WAEG;QACM,SAAI,GAAG,uBAAuB,CAAC;QAWtC,IAAI,CAAC,YAAY,GAAG,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC;QAExC,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,OAAY,EAAE,OAAe;QAClC,OAAO,GAAG,IAAA,uCAAoB,EAAC,OAAO,CAAC,CAAC;QACxC,IACE,CAAC,IAAA,oCAAiB,EAAC,OAAO,CAAC;YAC3B,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;YAChC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EACzC;YACA,OAAO,KAAK,CAAC;SACd;QAED,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAC9D,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC;QAErC,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YAClD,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;SAC7B;QAED,IAAI,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;OASG;IACH,GAAG,CACD,OAAe,EACf,IAAY,EACZ,OAAO,GAAG,IAAA,wBAAK,EAAC,CAAC,CAAC,EAClB,IAAI,GAAG,EAAE,EACT,WAAyB;QAEzB,OAAO,GAAG,IAAA,uCAAoB,EAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,IAAA,oCAAiB,EAAC,OAAO,CAAC,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,MAAM,KAAK,GAAG;YACZ,OAAO;YACP,OAAO;YACP,KAAK,EAAE,KAAK;YACZ,IAAI;YACJ,IAAI;YACJ,WAAW;SACZ,CAAC;QAEF,MAAM,OAAO,GAAG,IAAA,mCAAgB,EAAC,IAAI,CAAC,CAAC;QACvC,IAAI,OAAO,EAAE;YACX,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YACrB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;SACpB;QAED,IAAI,CAAC,MAAM,CAAC;YACV,WAAW,kCACN,IAAI,CAAC,KAAK,CAAC,WAAW,KACzB,CAAC,OAAO,CAAC,kCACJ,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,KAClC,CAAC,OAAO,CAAC,EAAE,KAAK,MAEnB;SACF,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA3GD,sDA2GC;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["import type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport {\n  normalizeEnsName,\n  isValidHexAddress,\n  toChecksumHexAddress,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\n/**\n * @type ContactEntry\n *\n * ContactEntry representation\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property importTime - Data time when an account as created/imported\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface ContactEntry {\n  address: string;\n  name: string;\n  importTime?: number;\n}\n\nexport enum AddressType {\n  externallyOwnedAccounts = 'EXTERNALLY_OWNED_ACCOUNTS',\n  contractAccounts = 'CONTRACT_ACCOUNTS',\n  nonAccounts = 'NON_ACCOUNTS',\n}\n\n/**\n * @type AddressBookEntry\n *\n * AddressBookEntry representation\n * @property address - Hex address of a recipient account\n * @property name - Nickname associated with this address\n * @property chainId - Chain id identifies the current chain\n * @property memo - User's note about address\n * @property isEns - is the entry an ENS name\n * @property addressType - is the type of this address\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AddressBookEntry {\n  address: string;\n  name: string;\n  chainId: Hex;\n  memo: string;\n  isEns: boolean;\n  addressType?: AddressType;\n}\n\n/**\n * @type AddressBookState\n *\n * Address book controller state\n * @property addressBook - Array of contact entry objects\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AddressBookState extends BaseState {\n  addressBook: { [chainId: Hex]: { [address: string]: AddressBookEntry } };\n}\n\n/**\n * Controller that manages a list of recipient addresses associated with nicknames.\n */\nexport class AddressBookController extends BaseControllerV1<\n  BaseConfig,\n  AddressBookState\n> {\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AddressBookController';\n\n  /**\n   * Creates an AddressBookController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config?: Partial<BaseConfig>, state?: Partial<AddressBookState>) {\n    super(config, state);\n\n    this.defaultState = { addressBook: {} };\n\n    this.initialize();\n  }\n\n  /**\n   * Remove all contract entries.\n   */\n  clear() {\n    this.update({ addressBook: {} });\n  }\n\n  /**\n   * Remove a contract entry by address.\n   *\n   * @param chainId - Chain id identifies the current chain.\n   * @param address - Recipient address to delete.\n   * @returns Whether the entry was deleted.\n   */\n  delete(chainId: Hex, address: string) {\n    address = toChecksumHexAddress(address);\n    if (\n      !isValidHexAddress(address) ||\n      !this.state.addressBook[chainId] ||\n      !this.state.addressBook[chainId][address]\n    ) {\n      return false;\n    }\n\n    const addressBook = Object.assign({}, this.state.addressBook);\n    delete addressBook[chainId][address];\n\n    if (Object.keys(addressBook[chainId]).length === 0) {\n      delete addressBook[chainId];\n    }\n\n    this.update({ addressBook });\n    return true;\n  }\n\n  /**\n   * Add or update a contact entry by address.\n   *\n   * @param address - Recipient address to add or update.\n   * @param name - Nickname to associate with this address.\n   * @param chainId - Chain id identifies the current chain.\n   * @param memo - User's note about address.\n   * @param addressType - Contact's address type.\n   * @returns Boolean indicating if the address was successfully set.\n   */\n  set(\n    address: string,\n    name: string,\n    chainId = toHex(1),\n    memo = '',\n    addressType?: AddressType,\n  ) {\n    address = toChecksumHexAddress(address);\n    if (!isValidHexAddress(address)) {\n      return false;\n    }\n\n    const entry = {\n      address,\n      chainId,\n      isEns: false,\n      memo,\n      name,\n      addressType,\n    };\n\n    const ensName = normalizeEnsName(name);\n    if (ensName) {\n      entry.name = ensName;\n      entry.isEns = true;\n    }\n\n    this.update({\n      addressBook: {\n        ...this.state.addressBook,\n        [chainId]: {\n          ...this.state.addressBook[chainId],\n          [address]: entry,\n        },\n      },\n    });\n\n    return true;\n  }\n}\n\nexport default AddressBookController;\n"]}