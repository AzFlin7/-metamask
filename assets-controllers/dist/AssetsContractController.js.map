{"version":3,"file":"AssetsContractController.js","sourceRoot":"","sources":["../src/AssetsContractController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { BaseConfig, BaseState } from '@metamask/base-controller';\nimport { BaseControllerV1 } from '@metamask/base-controller';\nimport { IPFS_DEFAULT_GATEWAY_URL } from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkState,\n  NetworkController,\n  Provider,\n} from '@metamask/network-controller';\nimport type { PreferencesState } from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport type BN from 'bn.js';\nimport abiSingleCallBalancesContract from 'single-call-balance-checker-abi';\n\nimport { SupportedTokenDetectionNetworks } from './assetsUtil';\nimport { ERC20Standard } from './Standards/ERC20Standard';\nimport { ERC1155Standard } from './Standards/NftStandards/ERC1155/ERC1155Standard';\nimport { ERC721Standard } from './Standards/NftStandards/ERC721/ERC721Standard';\n\n/**\n * Check if token detection is enabled for certain networks\n *\n * @param chainId - ChainID of network\n * @returns Whether the current network supports token detection\n */\nexport const SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID: Record<Hex, string> = {\n  [SupportedTokenDetectionNetworks.mainnet]:\n    '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39',\n  [SupportedTokenDetectionNetworks.bsc]:\n    '0x2352c63A83f9Fd126af8676146721Fa00924d7e4',\n  [SupportedTokenDetectionNetworks.polygon]:\n    '0x2352c63A83f9Fd126af8676146721Fa00924d7e4',\n  [SupportedTokenDetectionNetworks.avax]:\n    '0xD023D153a0DFa485130ECFdE2FAA7e612EF94818',\n  [SupportedTokenDetectionNetworks.aurora]:\n    '0x1286415D333855237f89Df27D388127181448538',\n  [SupportedTokenDetectionNetworks.linea_goerli]:\n    '0x10dAd7Ca3921471f616db788D9300DC97Db01783',\n  [SupportedTokenDetectionNetworks.linea_mainnet]:\n    '0xF62e6a41561b3650a69Bb03199C735e3E3328c0D',\n  [SupportedTokenDetectionNetworks.arbitrum]:\n    '0x151E24A486D7258dd7C33Fb67E4bB01919B7B32c',\n  [SupportedTokenDetectionNetworks.optimism]:\n    '0xB1c568e9C3E6bdaf755A60c7418C269eb11524FC',\n  [SupportedTokenDetectionNetworks.base]:\n    '0x6AA75276052D96696134252587894ef5FFA520af',\n  [SupportedTokenDetectionNetworks.zksync]:\n    '0x458fEd3144680a5b8bcfaa0F9594aa19B4Ea2D34',\n};\n\nexport const MISSING_PROVIDER_ERROR =\n  'AssetsContractController failed to set the provider correctly. A provider must be set for this method to be available';\n\n/**\n * @type AssetsContractConfig\n *\n * Assets Contract controller configuration\n * @property provider - Provider used to create a new web3 instance\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AssetsContractConfig extends BaseConfig {\n  provider: Provider | undefined;\n  ipfsGateway: string;\n  chainId: Hex;\n}\n\n/**\n * @type BalanceMap\n *\n * Key value object containing the balance for each tokenAddress\n * @property [tokenAddress] - Address of the token\n */\n// This interface was created before this ESLint rule was added.\n// Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface BalanceMap {\n  [tokenAddress: string]: BN;\n}\n\n/**\n * Controller that interacts with contracts on mainnet through web3\n */\nexport class AssetsContractController extends BaseControllerV1<\n  AssetsContractConfig,\n  BaseState\n> {\n  private _provider?: Provider;\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'AssetsContractController';\n\n  private readonly getNetworkClientById: NetworkController['getNetworkClientById'];\n\n  /**\n   * Creates a AssetsContractController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onPreferencesStateChange - Allows subscribing to preference controller state changes.\n   * @param options.onNetworkDidChange - Allows subscribing to network controller networkDidChange events.\n   * @param options.getNetworkClientById - Gets the network client with the given id from the NetworkController.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      chainId: initialChainId,\n      onPreferencesStateChange,\n      onNetworkDidChange,\n      getNetworkClientById,\n    }: {\n      chainId: Hex;\n      onPreferencesStateChange: (\n        listener: (preferencesState: PreferencesState) => void,\n      ) => void;\n      onNetworkDidChange: (\n        listener: (networkState: NetworkState) => void,\n      ) => void;\n      getNetworkClientById: NetworkController['getNetworkClientById'];\n    },\n    config?: Partial<AssetsContractConfig>,\n    state?: Partial<BaseState>,\n  ) {\n    super(config, state);\n    this.defaultConfig = {\n      provider: undefined,\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      chainId: initialChainId,\n    };\n    this.initialize();\n    this.getNetworkClientById = getNetworkClientById;\n\n    onPreferencesStateChange(({ ipfsGateway }) => {\n      this.configure({ ipfsGateway });\n    });\n\n    onNetworkDidChange((networkState) => {\n      if (this.config.chainId !== networkState.providerConfig.chainId) {\n        this.configure({\n          chainId: networkState.providerConfig.chainId,\n        });\n      }\n    });\n  }\n\n  /**\n   * Sets a new provider.\n   *\n   * TODO: Replace this wth a method.\n   *\n   * @property provider - Provider used to create a new underlying Web3 instance\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  get provider() {\n    throw new Error('Property only used for setting');\n  }\n\n  /**\n   * Get the relevant provider instance.\n   *\n   * @param networkClientId - Network Client ID.\n   * @returns Web3Provider instance.\n   */\n  getProvider(networkClientId?: NetworkClientId): Web3Provider {\n    const provider = networkClientId\n      ? this.getNetworkClientById(networkClientId).provider\n      : this._provider;\n\n    if (provider === undefined) {\n      throw new Error(MISSING_PROVIDER_ERROR);\n    }\n\n    // @ts-expect-error TODO: remove this annotation once the `Eip1193Provider` class is released\n    return new Web3Provider(provider);\n  }\n\n  /**\n   * Get the relevant chain ID.\n   *\n   * @param networkClientId - Network Client ID used to get the provider.\n   * @returns Hex chain ID.\n   */\n  getChainId(networkClientId?: NetworkClientId): Hex {\n    return networkClientId\n      ? this.getNetworkClientById(networkClientId).configuration.chainId\n      : this.config.chainId;\n  }\n\n  /**\n   * Get a ERC20Standard instance using the relevant provider instance.\n   *\n   * @param networkClientId - Network Client ID used to get the provider.\n   * @returns ERC20Standard instance.\n   */\n  getERC20Standard(networkClientId?: NetworkClientId): ERC20Standard {\n    const provider = this.getProvider(networkClientId);\n    return new ERC20Standard(provider);\n  }\n\n  /**\n   * Get a ERC721Standard instance using the relevant provider instance.\n   *\n   * @param networkClientId - Network Client ID used to get the provider.\n   * @returns ERC721Standard instance.\n   */\n  getERC721Standard(networkClientId?: NetworkClientId): ERC721Standard {\n    const provider = this.getProvider(networkClientId);\n    return new ERC721Standard(provider);\n  }\n\n  /**\n   * Get a ERC1155Standard instance using the relevant provider instance.\n   *\n   * @param networkClientId - Network Client ID used to get the provider.\n   * @returns ERC1155Standard instance.\n   */\n  getERC1155Standard(networkClientId?: NetworkClientId): ERC1155Standard {\n    const provider = this.getProvider(networkClientId);\n    return new ERC1155Standard(provider);\n  }\n\n  /**\n   * Get balance or count for current account on specific asset contract.\n   *\n   * @param address - Asset ERC20 contract address.\n   * @param selectedAddress - Current account public address.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to BN object containing balance for current account on specific asset contract.\n   */\n  async getERC20BalanceOf(\n    address: string,\n    selectedAddress: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<BN> {\n    const erc20Standard = this.getERC20Standard(networkClientId);\n    return erc20Standard.getBalanceOf(address, selectedAddress);\n  }\n\n  /**\n   * Query for the decimals for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract address.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'decimals'.\n   */\n  async getERC20TokenDecimals(\n    address: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc20Standard = this.getERC20Standard(networkClientId);\n    return erc20Standard.getTokenDecimals(address);\n  }\n\n  /**\n   * Query for the name for a given ERC20 asset.\n   *\n   * @param address - ERC20 asset contract address.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'decimals'.\n   */\n  async getERC20TokenName(\n    address: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc20Standard = this.getERC20Standard(networkClientId);\n    return erc20Standard.getTokenName(address);\n  }\n\n  /**\n   * Enumerate assets assigned to an owner.\n   *\n   * @param address - ERC721 asset contract address.\n   * @param selectedAddress - Current account public address.\n   * @param index - An NFT counter less than `balanceOf(selectedAddress)`.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to token identifier for the 'index'th asset assigned to 'selectedAddress'.\n   */\n  getERC721NftTokenId(\n    address: string,\n    selectedAddress: string,\n    index: number,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc721Standard = this.getERC721Standard(networkClientId);\n    return erc721Standard.getNftTokenId(address, selectedAddress, index);\n  }\n\n  /**\n   * Enumerate assets assigned to an owner.\n   *\n   * @param tokenAddress - ERC721 asset contract address.\n   * @param userAddress - Current account public address.\n   * @param tokenId - ERC721 asset identifier.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to an object containing the token standard and a set of details which depend on which standard the token supports.\n   */\n  async getTokenStandardAndDetails(\n    tokenAddress: string,\n    userAddress?: string,\n    tokenId?: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<{\n    standard: string;\n    tokenURI?: string | undefined;\n    symbol?: string | undefined;\n    name?: string | undefined;\n    decimals?: string | undefined;\n    balance?: BN | undefined;\n  }> {\n    // Asserts provider is available\n    this.getProvider(networkClientId);\n\n    const { ipfsGateway } = this.config;\n\n    // ERC721\n    try {\n      const erc721Standard = this.getERC721Standard(networkClientId);\n      return {\n        ...(await erc721Standard.getDetails(\n          tokenAddress,\n          ipfsGateway,\n          tokenId,\n        )),\n      };\n    } catch {\n      // Ignore\n    }\n\n    // ERC1155\n    try {\n      const erc1155Standard = this.getERC1155Standard(networkClientId);\n      return {\n        ...(await erc1155Standard.getDetails(\n          tokenAddress,\n          ipfsGateway,\n          tokenId,\n        )),\n      };\n    } catch {\n      // Ignore\n    }\n\n    // ERC20\n    try {\n      const erc20Standard = this.getERC20Standard(networkClientId);\n      return {\n        ...(await erc20Standard.getDetails(tokenAddress, userAddress)),\n      };\n    } catch {\n      // Ignore\n    }\n\n    throw new Error('Unable to determine contract standard');\n  }\n\n  /**\n   * Query for tokenURI for a given ERC721 asset.\n   *\n   * @param address - ERC721 asset contract address.\n   * @param tokenId - ERC721 asset identifier.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'tokenURI'.\n   */\n  async getERC721TokenURI(\n    address: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc721Standard = this.getERC721Standard(networkClientId);\n    return erc721Standard.getTokenURI(address, tokenId);\n  }\n\n  /**\n   * Query for name for a given asset.\n   *\n   * @param address - ERC721 or ERC20 asset contract address.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'name'.\n   */\n  async getERC721AssetName(\n    address: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc721Standard = this.getERC721Standard(networkClientId);\n    return erc721Standard.getAssetName(address);\n  }\n\n  /**\n   * Query for symbol for a given asset.\n   *\n   * @param address - ERC721 or ERC20 asset contract address.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'symbol'.\n   */\n  async getERC721AssetSymbol(\n    address: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc721Standard = this.getERC721Standard(networkClientId);\n    return erc721Standard.getAssetSymbol(address);\n  }\n\n  /**\n   * Query for owner for a given ERC721 asset.\n   *\n   * @param address - ERC721 asset contract address.\n   * @param tokenId - ERC721 asset identifier.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the owner address.\n   */\n  async getERC721OwnerOf(\n    address: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc721Standard = this.getERC721Standard(networkClientId);\n    return erc721Standard.getOwnerOf(address, tokenId);\n  }\n\n  /**\n   * Query for tokenURI for a given asset.\n   *\n   * @param address - ERC1155 asset contract address.\n   * @param tokenId - ERC1155 asset identifier.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'tokenURI'.\n   */\n  async getERC1155TokenURI(\n    address: string,\n    tokenId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<string> {\n    const erc1155Standard = this.getERC1155Standard(networkClientId);\n    return erc1155Standard.getTokenURI(address, tokenId);\n  }\n\n  /**\n   * Query for balance of a given ERC 1155 token.\n   *\n   * @param userAddress - Wallet public address.\n   * @param nftAddress - ERC1155 asset contract address.\n   * @param nftId - ERC1155 asset identifier.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'balanceOf'.\n   */\n  async getERC1155BalanceOf(\n    userAddress: string,\n    nftAddress: string,\n    nftId: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<BN> {\n    const erc1155Standard = this.getERC1155Standard(networkClientId);\n    return erc1155Standard.getBalanceOf(nftAddress, userAddress, nftId);\n  }\n\n  /**\n   * Transfer single ERC1155 token.\n   *\n   * @param nftAddress - ERC1155 token address.\n   * @param senderAddress - ERC1155 token sender.\n   * @param recipientAddress - ERC1155 token recipient.\n   * @param nftId - ERC1155 token id.\n   * @param qty - Quantity of tokens to be sent.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns Promise resolving to the 'transferSingle' ERC1155 token.\n   */\n  async transferSingleERC1155(\n    nftAddress: string,\n    senderAddress: string,\n    recipientAddress: string,\n    nftId: string,\n    qty: string,\n    networkClientId?: NetworkClientId,\n  ): Promise<void> {\n    const erc1155Standard = this.getERC1155Standard(networkClientId);\n    return erc1155Standard.transferSingle(\n      nftAddress,\n      senderAddress,\n      recipientAddress,\n      nftId,\n      qty,\n    );\n  }\n\n  /**\n   * Get the token balance for a list of token addresses in a single call. Only non-zero balances\n   * are returned.\n   *\n   * @param selectedAddress - The address to check token balances for.\n   * @param tokensToDetect - The token addresses to detect balances for.\n   * @param networkClientId - Network Client ID to fetch the provider with.\n   * @returns The list of non-zero token balances.\n   */\n  async getBalancesInSingleCall(\n    selectedAddress: string,\n    tokensToDetect: string[],\n    networkClientId?: NetworkClientId,\n  ) {\n    const chainId = this.getChainId(networkClientId);\n    const provider = this.getProvider(networkClientId);\n    if (!(chainId in SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID)) {\n      // Only fetch balance if contract address exists\n      return {};\n    }\n    const contractAddress = SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID[chainId];\n\n    const contract = new Contract(\n      contractAddress,\n      abiSingleCallBalancesContract,\n      provider,\n    );\n    const result = await contract.balances([selectedAddress], tokensToDetect);\n    const nonZeroBalances: BalanceMap = {};\n    /* istanbul ignore else */\n    if (result.length > 0) {\n      tokensToDetect.forEach((tokenAddress, index) => {\n        const balance: BN = result[index];\n        /* istanbul ignore else */\n        if (String(balance) !== '0') {\n          nonZeroBalances[tokenAddress] = balance;\n        }\n      });\n    }\n    return nonZeroBalances;\n  }\n}\n\nexport default AssetsContractController;\n"]}