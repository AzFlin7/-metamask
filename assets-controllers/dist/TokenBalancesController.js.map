{"version":3,"file":"TokenBalancesController.js","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type RestrictedControllerMessenger,\n  type ControllerGetStateAction,\n  type ControllerStateChangeEvent,\n  BaseController,\n} from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\nimport type { PreferencesControllerGetStateAction } from '@metamask/preferences-controller';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n * @property getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = PreferencesControllerGetStateAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #getERC20BalanceOf: AssetsContractController['getERC20BalanceOf'];\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.getERC20BalanceOf - Gets the balance of the given account at the given contract address.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    getERC20BalanceOf,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        this.updateBalances();\n      },\n    );\n\n    this.#getERC20BalanceOf = getERC20BalanceOf;\n\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      const { selectedAddress } = this.messagingSystem.call(\n        'PreferencesController:getState',\n      );\n      try {\n        newContractBalances[address] = toHex(\n          await this.#getERC20BalanceOf(address, selectedAddress),\n        );\n        token.balanceError = null;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.balanceError = error;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}