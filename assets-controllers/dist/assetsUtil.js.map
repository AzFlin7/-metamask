{"version":3,"file":"assetsUtil.js","sourceRoot":"","sources":["../src/assetsUtil.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,iEAGoC;AAEpC,2CAA2C;AAC3C,kDAAuB;AACvB,0CAAuC;AAcvC;;;GAGG;AACU,QAAA,uBAAuB,GAAG,EAAE,CAAC;AAE1C;;;;;;;;GAQG;AACH,SAAgB,kBAAkB,CAAC,cAA2B,EAAE,GAAQ;IACtE,MAAM,IAAI,GAA0B;QAClC,OAAO;QACP,iBAAiB;QACjB,cAAc;QACd,gBAAgB;QAChB,eAAe;QACf,WAAW;QACX,mBAAmB;QACnB,cAAc;KACf,CAAC;IACF,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACjD,IAAI,cAAc,CAAC,GAAG,CAAC,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE;YAC3D,OAAO,KAAK,GAAG,CAAC,CAAC;SAClB;QACD,OAAO,KAAK,CAAC;IACf,CAAC,EAAE,CAAC,CAAC,CAAC;IACN,OAAO,eAAe,GAAG,CAAC,CAAC;AAC7B,CAAC;AAlBD,gDAkBC;AAED,MAAM,mBAAmB,GAA2B;IAClD,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,QAAQ;IAChB,GAAG,EAAE,KAAK;IACV,SAAS,EAAE,YAAY;IACvB,SAAS,EAAE,WAAW;IACtB,OAAO,EAAE,OAAO;IAChB,QAAQ,EAAE,UAAU;IACpB,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,IAAI;IACZ,SAAS,EAAE,WAAW;IACtB,KAAK,EAAE,OAAO;IACd,OAAO,EAAE,SAAS;IAClB,UAAU,EAAE,YAAY;IACxB,aAAa,EAAE,eAAe;IAC9B,eAAe,EAAE,iBAAiB;IAClC,QAAQ,EAAE,UAAU;IACpB,SAAS,EAAE,WAAW;IACtB,MAAM,EAAE,QAAQ;IAChB,WAAW,EAAE,aAAa;IAC1B,qBAAqB,EAAE,uBAAuB;IAC9C,qBAAqB,EAAE,uBAAuB;IAC9C,SAAS,EAAE,WAAW;IACtB,YAAY,EAAE,cAAc;IAC5B,MAAM,EAAE,QAAQ;CACjB,CAAC;AAEF;;;;;GAKG;AACI,MAAM,qBAAqB,GAAG,CAAC,WAAqB,EAAE,EAAE;IAC7D,OAAO,WAAW,CAAC,GAAG,CACpB,CAAC,GAAG,EAAE,EAAE,CACN,mBAAmB,CAAC,GAAG,CAAC;QACxB,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,CAC3D,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,qBAAqB,yBAMhC;AAEF;;;;;;;GAOG;AACI,MAAM,sBAAsB,GAAG,CAAC,EACrC,OAAO,EACP,YAAY,GAIb,EAAE,EAAE;IACH,MAAM,cAAc,GAAG,IAAA,sCAAmB,EAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC/D,OAAO,0DAA0D,cAAc,IAAI,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC;AACtH,CAAC,CAAC;AATW,QAAA,sBAAsB,0BASjC;AAEF;;GAEG;AACH,IAAY,+BAYX;AAZD,WAAY,+BAA+B;IACzC,kDAAe,CAAA;IACf,+CAAY,CAAA;IACZ,mDAAgB,CAAA;IAChB,kDAAe,CAAA;IACf,wDAAqB,CAAA;IACrB,0DAAuB,CAAA;IACvB,2DAAwB,CAAA;IACxB,sDAAmB,CAAA;IACnB,mDAAgB,CAAA;IAChB,kDAAe,CAAA;IACf,mDAAgB,CAAA;AAClB,CAAC,EAZW,+BAA+B,GAA/B,uCAA+B,KAA/B,uCAA+B,QAY1C;AAED;;;;;GAKG;AACH,SAAgB,mCAAmC,CAAC,OAAY;IAC9D,OAAO,MAAM,CAAC,MAAM,CAAM,+BAA+B,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAC/E,CAAC;AAFD,kFAEC;AAED;;;;;;GAMG;AACH,SAAgB,8BAA8B,CAAC,OAAY;IACzD,OAAO,mCAAmC,CAAC,OAAO,CAAC,CAAC;AACtD,CAAC;AAFD,wEAEC;AAED;;;;;;GAMG;AACH,SAAgB,wBAAwB,CAAC,OAAe;IACtD,IAAI,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE;QACtC,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;KAC5C;SAAM,IAAI,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QACxC,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;KACvC;IACD,0FAA0F;IAC1F,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACvE,CAAC;AARD,4DAQC;AAED;;;;;;GAMG;AACH,SAAgB,mBAAmB,CAAC,OAAe;IAIjD,MAAM,GAAG,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC;IAE9C,2BAA2B;IAC3B,8EAA8E;IAC9E,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC/B,MAAM,GAAG,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACzD,MAAM,IAAI,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAE7D,8GAA8G;IAC9G,sEAAsE;IACtE,OAAO;QACL,GAAG,EAAE,SAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAE;QACrC,IAAI;KACL,CAAC;AACJ,CAAC;AAlBD,kDAkBC;AAED;;;;;;;GAOG;AACH,SAAgB,mBAAmB,CACjC,WAAmB,EACnB,OAAe,EACf,kBAA2B;IAE3B,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9E,IAAI,kBAAkB,EAAE;QACtB,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACnD,OAAO,GAAG,QAAQ,KAAK,GAAG,SAAS,IAAI,GAAG,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,EAAE,EAAE,CAAC;KACxD;IACD,MAAM,UAAU,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC;IACrD,OAAO,GAAG,MAAM,SAAS,UAAU,EAAE,CAAC;AACxC,CAAC;AAZD,kDAYC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAAC,SAAiB;IACpD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,6BAA6B,CAAC,EAAE;QACnD,OAAO,WAAW,SAAS,EAAE,CAAC;KAC/B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AALD,oDAKC;AAED;;;;;GAKG;AACH,SAAgB,mBAAmB,CAAC,SAAoB;IACtD,OAAO,IAAI,eAAE,CAAC,IAAA,gBAAQ,EAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AAC1D,CAAC;AAFD,kDAEC;AAED;;;;;;;;GAQG;AACH,SAAgB,iBAAiB,CAC/B,MAAe,EACf,EAAE,SAAS,EAAyB;IAEpC,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,SAAS,EAAE;QACjD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;KAC9C;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AATD,8CASC;AAED;;;;;;;;;;;;;;GAcG;AACH,SAAsB,uBAAuB,CAG3C,EACA,MAAM,EACN,SAAS,EACT,SAAS,EACT,aAAa,GAUd;;QACC,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QACzD,IAAI,aAAa,GAAG,aAAa,CAAC;QAClC,KAAK,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,EAAE,EAAE;YAC9C,aAAa,GAAG,MAAM,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;SAC9D;QACD,6EAA6E;QAC7E,6BAA6B;QAC7B,MAAM,WAAW,GAAG,aAAuB,CAAC;QAC5C,OAAO,WAAW,CAAC;IACrB,CAAC;CAAA;AA3BD,0DA2BC;AAED;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,GAAiB;;IACnD,OAAO;QACL,QAAQ,EAAE,GAAG,CAAC,UAAU;QACxB,SAAS,EAAE,IAAI;QACf,gBAAgB,EAAE,IAAI;QACtB,SAAS,EAAE,MAAA,GAAG,CAAC,SAAS,mCAAI,IAAI;QAChC,iBAAiB,EAAE,IAAI;QACvB,mBAAmB,EAAE,IAAI;QACzB,kBAAkB,EAAE,IAAI;QACxB,aAAa,EAAE,IAAI;QACnB,sBAAsB,EAAE,IAAI;QAC5B,IAAI,EAAE,GAAG,CAAC,IAAI;QACd,WAAW,EAAE,GAAG,CAAC,WAAW;QAC5B,aAAa,EAAE,IAAI;QACnB,cAAc,EAAE;YACd,OAAO,EAAE,GAAG,CAAC,QAAQ;YACrB,mBAAmB,EAAE,IAAI;YACzB,YAAY,EAAE,IAAI;YAClB,WAAW,EAAE,GAAG,CAAC,cAAc,CAAC,WAAW,EAAE;YAC7C,MAAM,EAAE,IAAI;YACZ,YAAY,EAAE,IAAI;YAClB,WAAW,EAAE,GAAG,CAAC,WAAW;YAC5B,aAAa,EAAE,IAAI;YACnB,UAAU,EAAE;gBACV,IAAI,EAAE,GAAG,CAAC,UAAU;gBACpB,SAAS,EAAE,IAAI;aAChB;SACF;QACD,OAAO,EAAE;YACP,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;YACtB,eAAe,EAAE,EAAE;YACnB,OAAO,EAAE,EAAE;SACZ;QACD,SAAS,EAAE,IAAI;KAChB,CAAC;AACJ,CAAC;AAnCD,kDAmCC;AAED;;;;GAIG;AACH,SAAgB,2BAA2B,CAAC,GAAyB;;IACnE,MAAM,MAAM,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;IACxC,uCACK,MAAM,KACT,aAAa,EAAE,MAAA,GAAG,CAAC,aAAa,mCAAI,IAAI,EACxC,OAAO,kCACF,MAAM,CAAC,OAAO,KACjB,OAAO,EAAE,GAAG,CAAC,OAAO,OAEtB;AACJ,CAAC;AAVD,kEAUC;AAED;;;;;GAKG;AACH,SAAgB,wBAAwB,CACtC,QAA2B,EAC3B,UAAgC;;IAEhC,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,OAAO;QACzB,mBAAmB,EAAE,IAAI;QACzB,YAAY,EAAE,IAAI;QAClB,WAAW,EAAE,QAAQ,CAAC,iBAAiB,CAAC,WAAW,EAAE;QACrD,MAAM,EAAE,IAAI;QACZ,YAAY,EACV,MAAA,MAAA,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,YAAY,0CAAE,QAAQ,EAAE,mCACpC,MAAA,QAAQ,CAAC,YAAY,0CAAE,QAAQ,EAAE,mCACjC,IAAI;QACN,WAAW,EAAE,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,WAAW,mCAAI,IAAI;QAC5C,aAAa,EAAE,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,WAAW,mCAAI,IAAI;QAC9C,UAAU,EAAE;YACV,IAAI,EAAE,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,mCAAI,QAAQ,CAAC,IAAI;YACvC,SAAS,EAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,SAAS;SACjC;KACF,CAAC;AACJ,CAAC;AArBD,4DAqBC;AAED;;;;;;;;;GASG;AACH,SAAsB,+BAA+B,CAAC,EACpD,kBAAkB,EAClB,cAAc,EACd,cAAc,EACd,OAAO,GAMR;;QACC,MAAM,kBAAkB,GACtB,kBAAkB,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;QACvD,MAAM,mBAAmB,GACvB,kBAAkB,CAAC,yBAAyB,CAAC,cAAc,CAAC,CAAC;QAE/D,IAAI,CAAC,kBAAkB,IAAI,CAAC,mBAAmB,EAAE;YAC/C,OAAO,EAAE,CAAC;SACX;QAED,MAAM,yBAAyB,GAAG,MAAM,uBAAuB,CAG7D;YACA,MAAM,EAAE,CAAC,GAAG,cAAc,CAAC,CAAC,IAAI,EAAE;YAClC,SAAS,EAAE,+BAAuB;YAClC,SAAS,EAAE,CAAO,4BAA4B,EAAE,KAAK,EAAE,EAAE;gBACvD,MAAM,iCAAiC,GACrC,MAAM,kBAAkB,CAAC,gBAAgB,CAAC;oBACxC,cAAc,EAAE,KAAK;oBACrB,OAAO;oBACP,QAAQ,EAAE,cAAc;iBACzB,CAAC,CAAC;gBAEL,uCACK,4BAA4B,GAC5B,iCAAiC,EACpC;YACJ,CAAC,CAAA;YACD,aAAa,EAAE,EAAE;SAClB,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC,MAAM,CACrD,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC,EAAE,EAAE;YAClC,uCACK,GAAG,KACN,CAAC,IAAA,uCAAoB,EAAC,YAAY,CAAC,CAAC,EAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,KAAK,IACvD;QACJ,CAAC,EACD,EAAE,CACH,CAAC;IACJ,CAAC;CAAA;AAnDD,0EAmDC","sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\nimport {\n  convertHexToDecimal,\n  toChecksumHexAddress,\n} from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\nimport { remove0x } from '@metamask/utils';\nimport BN from 'bn.js';\nimport { CID } from 'multiformats/cid';\n\nimport type {\n  Nft,\n  NftMetadata,\n  OpenSeaV2Collection,\n  OpenSeaV2Contract,\n  OpenSeaV2DetailedNft,\n  OpenSeaV2Nft,\n} from './NftController';\nimport type { ApiNft, ApiNftContract } from './NftDetectionController';\nimport type { AbstractTokenPricesService } from './token-prices-service';\nimport { type ContractExchangeRates } from './TokenRatesController';\n\n/**\n * The maximum number of token addresses that should be sent to the Price API in\n * a single request.\n */\nexport const TOKEN_PRICES_BATCH_SIZE = 30;\n\n/**\n * Compares nft metadata entries to any nft entry.\n * We need this method when comparing a new fetched nft metadata, in case a entry changed to a defined value,\n * there's a need to update the nft in state.\n *\n * @param newNftMetadata - Nft metadata object.\n * @param nft - Nft object to compare with.\n * @returns Whether there are differences.\n */\nexport function compareNftMetadata(newNftMetadata: NftMetadata, nft: Nft) {\n  const keys: (keyof NftMetadata)[] = [\n    'image',\n    'backgroundColor',\n    'imagePreview',\n    'imageThumbnail',\n    'imageOriginal',\n    'animation',\n    'animationOriginal',\n    'externalLink',\n  ];\n  const differentValues = keys.reduce((value, key) => {\n    if (newNftMetadata[key] && newNftMetadata[key] !== nft[key]) {\n      return value + 1;\n    }\n    return value;\n  }, 0);\n  return differentValues > 0;\n}\n\nconst aggregatorNameByKey: Record<string, string> = {\n  aave: 'Aave',\n  bancor: 'Bancor',\n  cmc: 'CMC',\n  cryptocom: 'Crypto.com',\n  coinGecko: 'CoinGecko',\n  oneInch: '1inch',\n  paraswap: 'Paraswap',\n  pmm: 'PMM',\n  zapper: 'Zapper',\n  zerion: 'Zerion',\n  zeroEx: '0x',\n  synthetix: 'Synthetix',\n  yearn: 'Yearn',\n  apeswap: 'ApeSwap',\n  binanceDex: 'BinanceDex',\n  pancakeTop100: 'PancakeTop100',\n  pancakeExtended: 'PancakeExtended',\n  balancer: 'Balancer',\n  quickswap: 'QuickSwap',\n  matcha: 'Matcha',\n  pangolinDex: 'PangolinDex',\n  pangolinDexStableCoin: 'PangolinDexStableCoin',\n  pangolinDexAvaxBridge: 'PangolinDexAvaxBridge',\n  traderJoe: 'TraderJoe',\n  airswapLight: 'AirswapLight',\n  kleros: 'Kleros',\n};\n\n/**\n * Formats aggregator names to presentable format.\n *\n * @param aggregators - List of token list names in camelcase.\n * @returns Formatted aggregator names.\n */\nexport const formatAggregatorNames = (aggregators: string[]) => {\n  return aggregators.map(\n    (key) =>\n      aggregatorNameByKey[key] ||\n      `${key[0].toUpperCase()}${key.substring(1, key.length)}`,\n  );\n};\n\n/**\n * Format token list assets to use image proxy from Codefi.\n *\n * @param params - Object that contains chainID and tokenAddress.\n * @param params.chainId - ChainID of network in 0x-prefixed hexadecimal format.\n * @param params.tokenAddress - Address of token in mixed or lowercase.\n * @returns Formatted image url\n */\nexport const formatIconUrlWithProxy = ({\n  chainId,\n  tokenAddress,\n}: {\n  chainId: Hex;\n  tokenAddress: string;\n}) => {\n  const chainIdDecimal = convertHexToDecimal(chainId).toString();\n  return `https://static.metafi.codefi.network/api/v1/tokenIcons/${chainIdDecimal}/${tokenAddress.toLowerCase()}.png`;\n};\n\n/**\n * Networks where token detection is supported - Values are in decimal format\n */\nexport enum SupportedTokenDetectionNetworks {\n  mainnet = '0x1', // decimal: 1\n  bsc = '0x38', // decimal: 56\n  polygon = '0x89', // decimal: 137\n  avax = '0xa86a', // decimal: 43114\n  aurora = '0x4e454152', // decimal: 1313161554\n  linea_goerli = '0xe704', // decimal: 59140\n  linea_mainnet = '0xe708', // decimal: 59144\n  arbitrum = '0xa4b1', // decimal: 42161\n  optimism = '0xa', // decimal: 10\n  base = '0x2105', // decimal: 8453\n  zksync = '0x144', // decimal: 324\n}\n\n/**\n * Check if token detection is enabled for certain networks.\n *\n * @param chainId - ChainID of network\n * @returns Whether the current network supports token detection\n */\nexport function isTokenDetectionSupportedForNetwork(chainId: Hex): boolean {\n  return Object.values<Hex>(SupportedTokenDetectionNetworks).includes(chainId);\n}\n\n/**\n * Check if token list polling is enabled for a given network.\n * Currently this method is used to support e2e testing for consumers of this package.\n *\n * @param chainId - ChainID of network\n * @returns Whether the current network supports tokenlists\n */\nexport function isTokenListSupportedForNetwork(chainId: Hex): boolean {\n  return isTokenDetectionSupportedForNetwork(chainId);\n}\n\n/**\n * Removes IPFS protocol prefix from input string.\n *\n * @param ipfsUrl - An IPFS url (e.g. ipfs://{content id})\n * @returns IPFS content identifier and (possibly) path in a string\n * @throws Will throw if the url passed is not IPFS.\n */\nexport function removeIpfsProtocolPrefix(ipfsUrl: string) {\n  if (ipfsUrl.startsWith('ipfs://ipfs/')) {\n    return ipfsUrl.replace('ipfs://ipfs/', '');\n  } else if (ipfsUrl.startsWith('ipfs://')) {\n    return ipfsUrl.replace('ipfs://', '');\n  }\n  // this method should not be used with non-ipfs urls (i.e. startsWith('ipfs://') === true)\n  throw new Error('this method should not be used with non ipfs urls');\n}\n\n/**\n * Extracts content identifier and path from an input string.\n *\n * @param ipfsUrl - An IPFS URL minus the IPFS protocol prefix\n * @returns IFPS content identifier (cid) and sub path as string.\n * @throws Will throw if the url passed is not ipfs.\n */\nexport function getIpfsCIDv1AndPath(ipfsUrl: string): {\n  cid: string;\n  path?: string;\n} {\n  const url = removeIpfsProtocolPrefix(ipfsUrl);\n\n  // check if there is a path\n  // (CID is everything preceding first forward slash, path is everything after)\n  const index = url.indexOf('/');\n  const cid = index !== -1 ? url.substring(0, index) : url;\n  const path = index !== -1 ? url.substring(index) : undefined;\n\n  // We want to ensure that the CID is v1 (https://docs.ipfs.io/concepts/content-addressing/#identifier-formats)\n  // because most cid v0s appear to be incompatible with IPFS subdomains\n  return {\n    cid: CID.parse(cid).toV1().toString(),\n    path,\n  };\n}\n\n/**\n * Formats URL correctly for use retrieving assets hosted on IPFS.\n *\n * @param ipfsGateway - The users preferred IPFS gateway (full URL or just host).\n * @param ipfsUrl - The IFPS URL pointed at the asset.\n * @param subdomainSupported - Boolean indicating whether the URL should be formatted with subdomains or not.\n * @returns A formatted URL, with the user's preferred IPFS gateway and format (subdomain or not), pointing to an asset hosted on IPFS.\n */\nexport function getFormattedIpfsUrl(\n  ipfsGateway: string,\n  ipfsUrl: string,\n  subdomainSupported: boolean,\n): string {\n  const { host, protocol, origin } = new URL(addUrlProtocolPrefix(ipfsGateway));\n  if (subdomainSupported) {\n    const { cid, path } = getIpfsCIDv1AndPath(ipfsUrl);\n    return `${protocol}//${cid}.ipfs.${host}${path ?? ''}`;\n  }\n  const cidAndPath = removeIpfsProtocolPrefix(ipfsUrl);\n  return `${origin}/ipfs/${cidAndPath}`;\n}\n\n/**\n * Adds URL protocol prefix to input URL string if missing.\n *\n * @param urlString - An IPFS URL.\n * @returns A URL with a https:// prepended.\n */\nexport function addUrlProtocolPrefix(urlString: string): string {\n  if (!urlString.match(/(^http:\\/\\/)|(^https:\\/\\/)/u)) {\n    return `https://${urlString}`;\n  }\n  return urlString;\n}\n\n/**\n * Converts an Ethers BigNumber to a BN.\n *\n * @param bigNumber - An Ethers BigNumber instance.\n * @returns A BN object.\n */\nexport function ethersBigNumberToBN(bigNumber: BigNumber): BN {\n  return new BN(remove0x(bigNumber.toHexString()), 'hex');\n}\n\n/**\n * Partitions a list of values into groups that are at most `batchSize` in\n * length.\n *\n * @param values - The list of values.\n * @param args - The remaining arguments.\n * @param args.batchSize - The desired maximum number of values per batch.\n * @returns The list of batches.\n */\nexport function divideIntoBatches<Value>(\n  values: Value[],\n  { batchSize }: { batchSize: number },\n): Value[][] {\n  const batches = [];\n  for (let i = 0; i < values.length; i += batchSize) {\n    batches.push(values.slice(i, i + batchSize));\n  }\n  return batches;\n}\n\n/**\n * Constructs an object from processing batches of the given values\n * sequentially.\n *\n * @param args - The arguments to this function.\n * @param args.values - A list of values to iterate over.\n * @param args.batchSize - The maximum number of values in each batch.\n * @param args.eachBatch - A function to call for each batch. This function is\n * similar to the function that `Array.prototype.reduce` takes, in that it\n * receives the object that is being built, each batch in the list of batches\n * and the index, and should return an updated version of the object.\n * @param args.initialResult - The initial value of the final data structure,\n * i.e., the value that will be fed into the first call of `eachBatch`.\n * @returns The built object.\n */\nexport async function reduceInBatchesSerially<\n  Value,\n  Result extends Record<PropertyKey, unknown>,\n>({\n  values,\n  batchSize,\n  eachBatch,\n  initialResult,\n}: {\n  values: Value[];\n  batchSize: number;\n  eachBatch: (\n    workingResult: Partial<Result>,\n    batch: Value[],\n    index: number,\n  ) => Partial<Result> | Promise<Partial<Result>>;\n  initialResult: Partial<Result>;\n}): Promise<Result> {\n  const batches = divideIntoBatches(values, { batchSize });\n  let workingResult = initialResult;\n  for (const [index, batch] of batches.entries()) {\n    workingResult = await eachBatch(workingResult, batch, index);\n  }\n  // There's no way around this — we have to assume that in the end, the result\n  // matches the intended type.\n  const finalResult = workingResult as Result;\n  return finalResult;\n}\n\n/**\n * Maps an OpenSea V2 NFT to the V1 schema.\n * @param nft - The V2 NFT to map.\n * @returns The NFT in the V1 schema.\n */\nexport function mapOpenSeaNftV2ToV1(nft: OpenSeaV2Nft): ApiNft {\n  return {\n    token_id: nft.identifier,\n    num_sales: null,\n    background_color: null,\n    image_url: nft.image_url ?? null,\n    image_preview_url: null,\n    image_thumbnail_url: null,\n    image_original_url: null,\n    animation_url: null,\n    animation_original_url: null,\n    name: nft.name,\n    description: nft.description,\n    external_link: null,\n    asset_contract: {\n      address: nft.contract,\n      asset_contract_type: null,\n      created_date: null,\n      schema_name: nft.token_standard.toUpperCase(),\n      symbol: null,\n      total_supply: null,\n      description: nft.description,\n      external_link: null,\n      collection: {\n        name: nft.collection,\n        image_url: null,\n      },\n    },\n    creator: {\n      user: { username: '' },\n      profile_img_url: '',\n      address: '',\n    },\n    last_sale: null,\n  };\n}\n\n/**\n * Maps an OpenSea V2 detailed NFT to the V1 schema.\n * @param nft - The V2 detailed NFT to map.\n * @returns The NFT in the V1 schema.\n */\nexport function mapOpenSeaDetailedNftV2ToV1(nft: OpenSeaV2DetailedNft): ApiNft {\n  const mapped = mapOpenSeaNftV2ToV1(nft);\n  return {\n    ...mapped,\n    animation_url: nft.animation_url ?? null,\n    creator: {\n      ...mapped.creator,\n      address: nft.creator,\n    },\n  };\n}\n\n/**\n * Maps an OpenSea V2 contract to the V1 schema.\n * @param contract - The v2 contract data.\n * @param collection - The v2 collection data.\n * @returns The contract in the v1 schema.\n */\nexport function mapOpenSeaContractV2ToV1(\n  contract: OpenSeaV2Contract,\n  collection?: OpenSeaV2Collection,\n): ApiNftContract {\n  return {\n    address: contract.address,\n    asset_contract_type: null,\n    created_date: null,\n    schema_name: contract.contract_standard.toUpperCase(),\n    symbol: null,\n    total_supply:\n      collection?.total_supply?.toString() ??\n      contract.total_supply?.toString() ??\n      null,\n    description: collection?.description ?? null,\n    external_link: collection?.project_url ?? null,\n    collection: {\n      name: collection?.name ?? contract.name,\n      image_url: collection?.image_url,\n    },\n  };\n}\n\n/**\n * Retrieves token prices for a set of contract addresses in a specific currency and chainId.\n *\n * @param args - The arguments to function.\n * @param args.tokenPricesService - An object in charge of retrieving token prices.\n * @param args.nativeCurrency - The native currency to request price in.\n * @param args.tokenAddresses - The list of contract addresses.\n * @param args.chainId - The chainId of the tokens.\n * @returns The prices for the requested tokens.\n */\nexport async function fetchTokenContractExchangeRates({\n  tokenPricesService,\n  nativeCurrency,\n  tokenAddresses,\n  chainId,\n}: {\n  tokenPricesService: AbstractTokenPricesService;\n  nativeCurrency: string;\n  tokenAddresses: Hex[];\n  chainId: Hex;\n}): Promise<ContractExchangeRates> {\n  const isChainIdSupported =\n    tokenPricesService.validateChainIdSupported(chainId);\n  const isCurrencySupported =\n    tokenPricesService.validateCurrencySupported(nativeCurrency);\n\n  if (!isChainIdSupported || !isCurrencySupported) {\n    return {};\n  }\n\n  const tokenPricesByTokenAddress = await reduceInBatchesSerially<\n    Hex,\n    Awaited<ReturnType<AbstractTokenPricesService['fetchTokenPrices']>>\n  >({\n    values: [...tokenAddresses].sort(),\n    batchSize: TOKEN_PRICES_BATCH_SIZE,\n    eachBatch: async (allTokenPricesByTokenAddress, batch) => {\n      const tokenPricesByTokenAddressForBatch =\n        await tokenPricesService.fetchTokenPrices({\n          tokenAddresses: batch,\n          chainId,\n          currency: nativeCurrency,\n        });\n\n      return {\n        ...allTokenPricesByTokenAddress,\n        ...tokenPricesByTokenAddressForBatch,\n      };\n    },\n    initialResult: {},\n  });\n\n  return Object.entries(tokenPricesByTokenAddress).reduce(\n    (obj, [tokenAddress, tokenPrice]) => {\n      return {\n        ...obj,\n        [toChecksumHexAddress(tokenAddress)]: tokenPrice?.value,\n      };\n    },\n    {},\n  );\n}\n"]}