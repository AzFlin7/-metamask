{"version":3,"file":"CurrencyRateController.js","sourceRoot":"","sources":["../src/CurrencyRateController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport {\n  TESTNET_TICKER_SYMBOLS,\n  FALL_BACK_VS_CURRENCY,\n} from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport { Mutex } from 'async-mutex';\n\nimport { fetchExchangeRate as defaultFetchExchangeRate } from './crypto-compare';\n\n/**\n * @type CurrencyRateState\n * @property currencyRates - Object keyed by native currency\n * @property currencyRates.conversionDate - Timestamp of conversion rate expressed in ms since UNIX epoch\n * @property currencyRates.conversionRate - Conversion rate from current base asset to the current currency\n * @property currentCurrency - Currently-active ISO 4217 currency code\n * @property usdConversionRate - Conversion rate from usd to the current currency\n */\nexport type CurrencyRateState = {\n  currentCurrency: string;\n  currencyRates: Record<\n    string,\n    {\n      conversionDate: number | null;\n      conversionRate: number | null;\n      usdConversionRate: number | null;\n    }\n  >;\n};\n\nconst name = 'CurrencyRateController';\n\nexport type CurrencyRateStateChange = ControllerStateChangeEvent<\n  typeof name,\n  CurrencyRateState\n>;\n\nexport type CurrencyRateControllerEvents = CurrencyRateStateChange;\n\nexport type GetCurrencyRateState = ControllerGetStateAction<\n  typeof name,\n  CurrencyRateState\n>;\n\nexport type CurrencyRateControllerActions = GetCurrencyRateState;\n\ntype AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\ntype CurrencyRateMessenger = RestrictedControllerMessenger<\n  typeof name,\n  CurrencyRateControllerActions | AllowedActions,\n  CurrencyRateControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nconst metadata = {\n  currentCurrency: { persist: true, anonymous: true },\n  currencyRates: { persist: true, anonymous: true },\n};\n\nconst defaultState = {\n  currentCurrency: 'usd',\n  currencyRates: {\n    ETH: {\n      conversionDate: 0,\n      conversionRate: 0,\n      usdConversionRate: null,\n    },\n  },\n};\n\n/**\n * Controller that passively polls on a set interval for an exchange rate from the current network\n * asset to the user's preferred currency.\n */\nexport class CurrencyRateController extends StaticIntervalPollingController<\n  typeof name,\n  CurrencyRateState,\n  CurrencyRateMessenger\n> {\n  private readonly mutex = new Mutex();\n\n  private readonly fetchExchangeRate;\n\n  private readonly includeUsdRate;\n\n  /**\n   * Creates a CurrencyRateController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.includeUsdRate - Keep track of the USD rate in addition to the current currency rate.\n   * @param options.interval - The polling interval, in milliseconds.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.fetchExchangeRate - Fetches the exchange rate from an external API. This option is primarily meant for use in unit tests.\n   */\n  constructor({\n    includeUsdRate = false,\n    interval = 180000,\n    messenger,\n    state,\n    fetchExchangeRate = defaultFetchExchangeRate,\n  }: {\n    includeUsdRate?: boolean;\n    interval?: number;\n    messenger: CurrencyRateMessenger;\n    state?: Partial<CurrencyRateState>;\n    fetchExchangeRate?: typeof defaultFetchExchangeRate;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state },\n    });\n    this.includeUsdRate = includeUsdRate;\n    this.setIntervalLength(interval);\n    this.fetchExchangeRate = fetchExchangeRate;\n  }\n\n  /**\n   * Sets a currency to track.\n   *\n   * @param currentCurrency - ISO 4217 currency code.\n   */\n  async setCurrentCurrency(currentCurrency: string) {\n    const releaseLock = await this.mutex.acquire();\n    const nativeCurrencies = Object.keys(this.state.currencyRates);\n    try {\n      this.update(() => {\n        return {\n          ...defaultState,\n          currentCurrency,\n        };\n      });\n    } finally {\n      releaseLock();\n    }\n    nativeCurrencies.forEach(this.updateExchangeRate.bind(this));\n  }\n\n  /**\n   * Updates the exchange rate for the current currency and native currency pair.\n   *\n   * @param nativeCurrency - The ticker symbol for the chain.\n   */\n  async updateExchangeRate(nativeCurrency: string): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    const { currentCurrency, currencyRates } = this.state;\n\n    let conversionDate: number | null = null;\n    let conversionRate: number | null = null;\n    let usdConversionRate: number | null = null;\n\n    // For preloaded testnets (Goerli, Sepolia) we want to fetch exchange rate for real ETH.\n    const nativeCurrencyForExchangeRate = Object.values(\n      TESTNET_TICKER_SYMBOLS,\n    ).includes(nativeCurrency)\n      ? FALL_BACK_VS_CURRENCY // ETH\n      : nativeCurrency;\n\n    try {\n      if (\n        currentCurrency &&\n        nativeCurrency &&\n        // if either currency is an empty string we can skip the comparison\n        // because it will result in an error from the api and ultimately\n        // a null conversionRate either way.\n        currentCurrency !== '' &&\n        nativeCurrency !== ''\n      ) {\n        const fetchExchangeRateResponse = await this.fetchExchangeRate(\n          currentCurrency,\n          nativeCurrencyForExchangeRate,\n          this.includeUsdRate,\n        );\n        conversionRate = fetchExchangeRateResponse.conversionRate;\n        usdConversionRate = fetchExchangeRateResponse.usdConversionRate;\n        conversionDate = Date.now() / 1000;\n      }\n    } catch (error) {\n      if (\n        !(\n          error instanceof Error &&\n          error.message.includes('market does not exist for this coin pair')\n        )\n      ) {\n        throw error;\n      }\n    } finally {\n      try {\n        this.update(() => {\n          return {\n            currencyRates: {\n              ...currencyRates,\n              [nativeCurrency]: {\n                conversionDate,\n                conversionRate,\n                usdConversionRate,\n              },\n            },\n            currentCurrency,\n          };\n        });\n      } finally {\n        releaseLock();\n      }\n    }\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopAllPolling();\n  }\n\n  /**\n   * Updates exchange rate for the current currency.\n   *\n   * @param networkClientId - The network client ID used to get a ticker value.\n   * @returns The controller state.\n   */\n  async _executePoll(networkClientId: NetworkClientId): Promise<void> {\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n    await this.updateExchangeRate(networkClient.configuration.ticker);\n  }\n}\n\nexport default CurrencyRateController;\n"]}