"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticIntervalPollingControllerV1 = exports.StaticIntervalPollingController = exports.StaticIntervalPollingControllerOnly = void 0;
const base_controller_1 = require("@metamask/base-controller");
const AbstractPollingController_1 = require("./AbstractPollingController");
/**
 * StaticIntervalPollingControllerMixin
 * A polling controller that polls on a static interval.
 *
 * @param Base - The base class to mix onto.
 * @returns The composed class.
 */
function StaticIntervalPollingControllerMixin(Base) {
    var _StaticIntervalPollingController_intervalIds, _StaticIntervalPollingController_intervalLength;
    class StaticIntervalPollingController extends (0, AbstractPollingController_1.AbstractPollingControllerBaseMixin)(Base) {
        constructor() {
            super(...arguments);
            _StaticIntervalPollingController_intervalIds.set(this, {});
            _StaticIntervalPollingController_intervalLength.set(this, 1000);
        }
        setIntervalLength(intervalLength) {
            __classPrivateFieldSet(this, _StaticIntervalPollingController_intervalLength, intervalLength, "f");
        }
        getIntervalLength() {
            return __classPrivateFieldGet(this, _StaticIntervalPollingController_intervalLength, "f");
        }
        _startPollingByNetworkClientId(networkClientId, options) {
            if (!__classPrivateFieldGet(this, _StaticIntervalPollingController_intervalLength, "f")) {
                throw new Error('intervalLength must be defined and greater than 0');
            }
            const key = (0, AbstractPollingController_1.getKey)(networkClientId, options);
            const existingInterval = __classPrivateFieldGet(this, _StaticIntervalPollingController_intervalIds, "f")[key];
            this._stopPollingByPollingTokenSetId(key);
            __classPrivateFieldGet(this, _StaticIntervalPollingController_intervalIds, "f")[key] = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    yield this._executePoll(networkClientId, options);
                }
                catch (error) {
                    console.error(error);
                }
                this._startPollingByNetworkClientId(networkClientId, options);
            }), existingInterval ? __classPrivateFieldGet(this, _StaticIntervalPollingController_intervalLength, "f") : 0);
        }
        _stopPollingByPollingTokenSetId(key) {
            const intervalId = __classPrivateFieldGet(this, _StaticIntervalPollingController_intervalIds, "f")[key];
            if (intervalId) {
                clearTimeout(intervalId);
                delete __classPrivateFieldGet(this, _StaticIntervalPollingController_intervalIds, "f")[key];
            }
        }
    }
    _StaticIntervalPollingController_intervalIds = new WeakMap(), _StaticIntervalPollingController_intervalLength = new WeakMap();
    return StaticIntervalPollingController;
}
class Empty {
}
exports.StaticIntervalPollingControllerOnly = StaticIntervalPollingControllerMixin(Empty);
exports.StaticIntervalPollingController = StaticIntervalPollingControllerMixin(base_controller_1.BaseController);
exports.StaticIntervalPollingControllerV1 = StaticIntervalPollingControllerMixin(base_controller_1.BaseControllerV1);
//# sourceMappingURL=StaticIntervalPollingController.js.map