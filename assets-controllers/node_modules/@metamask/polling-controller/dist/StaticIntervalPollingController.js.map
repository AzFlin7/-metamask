{"version":3,"file":"StaticIntervalPollingController.js","sourceRoot":"","sources":["../src/StaticIntervalPollingController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,+DAA6E;AAI7E,2EAGqC;AAUrC;;;;;;GAMG;AACH,SAAS,oCAAoC,CAC3C,IAAW;;IAEX,MAAe,+BACb,SAAQ,IAAA,8DAAkC,EAAC,IAAI,CAAC;QADlD;;YAIE,uDAAmE,EAAE,EAAC;YAEtE,0DAAsC,IAAI,EAAC;QA0C7C,CAAC;QAxCC,iBAAiB,CAAC,cAAsB;YACtC,uBAAA,IAAI,mDAAmB,cAAc,MAAA,CAAC;QACxC,CAAC;QAED,iBAAiB;YACf,OAAO,uBAAA,IAAI,uDAAgB,CAAC;QAC9B,CAAC;QAED,8BAA8B,CAC5B,eAAgC,EAChC,OAAa;YAEb,IAAI,CAAC,uBAAA,IAAI,uDAAgB,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;aACtE;YAED,MAAM,GAAG,GAAG,IAAA,kCAAM,EAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAC7C,MAAM,gBAAgB,GAAG,uBAAA,IAAI,oDAAa,CAAC,GAAG,CAAC,CAAC;YAChD,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,CAAC;YAE1C,uBAAA,IAAI,oDAAa,CAAC,GAAG,CAAC,GAAG,UAAU,CACjC,GAAS,EAAE;gBACT,IAAI;oBACF,MAAM,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;iBACnD;gBAAC,OAAO,KAAK,EAAE;oBACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACtB;gBACD,IAAI,CAAC,8BAA8B,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAChE,CAAC,CAAA,EACD,gBAAgB,CAAC,CAAC,CAAC,uBAAA,IAAI,uDAAgB,CAAC,CAAC,CAAC,CAAC,CAC5C,CAAC;QACJ,CAAC;QAED,+BAA+B,CAAC,GAAsB;YACpD,MAAM,UAAU,GAAG,uBAAA,IAAI,oDAAa,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,UAAU,EAAE;gBACd,YAAY,CAAC,UAAU,CAAC,CAAC;gBACzB,OAAO,uBAAA,IAAI,oDAAa,CAAC,GAAG,CAAC,CAAC;aAC/B;QACH,CAAC;KACF;;IAED,OAAO,+BAA+B,CAAC;AACzC,CAAC;AAED,MAAM,KAAK;CAAG;AAED,QAAA,mCAAmC,GAC9C,oCAAoC,CAAC,KAAK,CAAC,CAAC;AACjC,QAAA,+BAA+B,GAC1C,oCAAoC,CAAC,gCAAc,CAAC,CAAC;AAC1C,QAAA,iCAAiC,GAC5C,oCAAoC,CAAC,kCAAgB,CAAC,CAAC","sourcesContent":["import { BaseController, BaseControllerV1 } from '@metamask/base-controller';\nimport type { NetworkClientId } from '@metamask/network-controller';\nimport type { Json } from '@metamask/utils';\n\nimport {\n  AbstractPollingControllerBaseMixin,\n  getKey,\n} from './AbstractPollingController';\nimport type {\n  IPollingController,\n  PollingTokenSetId,\n} from './AbstractPollingController';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor = new (...args: any[]) => object;\n\n/**\n * StaticIntervalPollingControllerMixin\n * A polling controller that polls on a static interval.\n *\n * @param Base - The base class to mix onto.\n * @returns The composed class.\n */\nfunction StaticIntervalPollingControllerMixin<TBase extends Constructor>(\n  Base: TBase,\n) {\n  abstract class StaticIntervalPollingController\n    extends AbstractPollingControllerBaseMixin(Base)\n    implements IPollingController\n  {\n    readonly #intervalIds: Record<PollingTokenSetId, NodeJS.Timeout> = {};\n\n    #intervalLength: number | undefined = 1000;\n\n    setIntervalLength(intervalLength: number) {\n      this.#intervalLength = intervalLength;\n    }\n\n    getIntervalLength() {\n      return this.#intervalLength;\n    }\n\n    _startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ) {\n      if (!this.#intervalLength) {\n        throw new Error('intervalLength must be defined and greater than 0');\n      }\n\n      const key = getKey(networkClientId, options);\n      const existingInterval = this.#intervalIds[key];\n      this._stopPollingByPollingTokenSetId(key);\n\n      this.#intervalIds[key] = setTimeout(\n        async () => {\n          try {\n            await this._executePoll(networkClientId, options);\n          } catch (error) {\n            console.error(error);\n          }\n          this._startPollingByNetworkClientId(networkClientId, options);\n        },\n        existingInterval ? this.#intervalLength : 0,\n      );\n    }\n\n    _stopPollingByPollingTokenSetId(key: PollingTokenSetId) {\n      const intervalId = this.#intervalIds[key];\n      if (intervalId) {\n        clearTimeout(intervalId);\n        delete this.#intervalIds[key];\n      }\n    }\n  }\n\n  return StaticIntervalPollingController;\n}\n\nclass Empty {}\n\nexport const StaticIntervalPollingControllerOnly =\n  StaticIntervalPollingControllerMixin(Empty);\nexport const StaticIntervalPollingController =\n  StaticIntervalPollingControllerMixin(BaseController);\nexport const StaticIntervalPollingControllerV1 =\n  StaticIntervalPollingControllerMixin(BaseControllerV1);\n"]}