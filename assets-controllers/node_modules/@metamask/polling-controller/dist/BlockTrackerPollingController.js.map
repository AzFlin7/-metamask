{"version":3,"file":"BlockTrackerPollingController.js","sourceRoot":"","sources":["../src/BlockTrackerPollingController.ts"],"names":[],"mappings":";;;;;;;;AAAA,+DAA6E;AAO7E,2EAGqC;AAOrC;;;;;;GAMG;AACH,SAAS,kCAAkC,CACzC,IAAW;;IAEX,MAAe,6BAA8B,SAAQ,IAAA,8DAAkC,EACrF,IAAI,CACL;QAFD;;YAGE,yDAAqE,EAAE,EAAC;QA8C1E,CAAC;QAxCC,8BAA8B,CAC5B,eAAgC,EAChC,OAAa;YAEb,MAAM,GAAG,GAAG,IAAA,kCAAM,EAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAE7C,IAAI,uBAAA,IAAI,sDAAiB,CAAC,GAAG,CAAC,EAAE;gBAC9B,OAAO;aACR;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;YAClE,IAAI,aAAa,EAAE;gBACjB,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAC7C,IAAI,EACJ,eAAe,EACf,OAAO,CACR,CAAC;gBACF,aAAa,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;gBACnE,uBAAA,IAAI,sDAAiB,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC;aAC/C;iBAAM;gBACL,MAAM,IAAI,KAAK,CACb,uDAAuD,eAAe,EAAE,CACzE,CAAC;aACH;QACH,CAAC;QAED,+BAA+B,CAAC,GAAsB;YACpD,MAAM,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACzC,MAAM,aAAa,GAAG,IAAI,CAAC,qBAAqB,CAC9C,eAAkC,CACnC,CAAC;YAEF,IAAI,aAAa,IAAI,uBAAA,IAAI,sDAAiB,CAAC,GAAG,CAAC,EAAE;gBAC/C,MAAM,QAAQ,GAAG,uBAAA,IAAI,sDAAiB,CAAC,GAAG,CAAC,CAAC;gBAC5C,IAAI,QAAQ,EAAE;oBACZ,aAAa,CAAC,YAAY,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;oBAC9D,OAAO,uBAAA,IAAI,sDAAiB,CAAC,GAAG,CAAC,CAAC;iBACnC;aACF;QACH,CAAC;KACF;;IAED,OAAO,6BAA6B,CAAC;AACvC,CAAC;AAED,MAAM,KAAK;CAAG;AAED,QAAA,iCAAiC,GAC5C,kCAAkC,CAAC,KAAK,CAAC,CAAC;AAC/B,QAAA,6BAA6B,GACxC,kCAAkC,CAAC,gCAAc,CAAC,CAAC;AACxC,QAAA,+BAA+B,GAC1C,kCAAkC,CAAC,kCAAgB,CAAC,CAAC","sourcesContent":["import { BaseController, BaseControllerV1 } from '@metamask/base-controller';\nimport type {\n  NetworkClientId,\n  NetworkClient,\n} from '@metamask/network-controller';\nimport type { Json } from '@metamask/utils';\n\nimport {\n  AbstractPollingControllerBaseMixin,\n  getKey,\n} from './AbstractPollingController';\nimport type { PollingTokenSetId } from './AbstractPollingController';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor = new (...args: any[]) => object;\n\n/**\n * BlockTrackerPollingControllerMixin\n * A polling controller that polls using a block tracker.\n *\n * @param Base - The base class to mix onto.\n * @returns The composed class.\n */\nfunction BlockTrackerPollingControllerMixin<TBase extends Constructor>(\n  Base: TBase,\n) {\n  abstract class BlockTrackerPollingController extends AbstractPollingControllerBaseMixin(\n    Base,\n  ) {\n    #activeListeners: Record<string, (options: Json) => Promise<void>> = {};\n\n    abstract _getNetworkClientById(\n      networkClientId: NetworkClientId,\n    ): NetworkClient | undefined;\n\n    _startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ) {\n      const key = getKey(networkClientId, options);\n\n      if (this.#activeListeners[key]) {\n        return;\n      }\n\n      const networkClient = this._getNetworkClientById(networkClientId);\n      if (networkClient) {\n        const updateOnNewBlock = this._executePoll.bind(\n          this,\n          networkClientId,\n          options,\n        );\n        networkClient.blockTracker.addListener('latest', updateOnNewBlock);\n        this.#activeListeners[key] = updateOnNewBlock;\n      } else {\n        throw new Error(\n          `Unable to retrieve blockTracker for networkClientId ${networkClientId}`,\n        );\n      }\n    }\n\n    _stopPollingByPollingTokenSetId(key: PollingTokenSetId) {\n      const [networkClientId] = key.split(':');\n      const networkClient = this._getNetworkClientById(\n        networkClientId as NetworkClientId,\n      );\n\n      if (networkClient && this.#activeListeners[key]) {\n        const listener = this.#activeListeners[key];\n        if (listener) {\n          networkClient.blockTracker.removeListener('latest', listener);\n          delete this.#activeListeners[key];\n        }\n      }\n    }\n  }\n\n  return BlockTrackerPollingController;\n}\n\nclass Empty {}\n\nexport const BlockTrackerPollingControllerOnly =\n  BlockTrackerPollingControllerMixin(Empty);\nexport const BlockTrackerPollingController =\n  BlockTrackerPollingControllerMixin(BaseController);\nexport const BlockTrackerPollingControllerV1 =\n  BlockTrackerPollingControllerMixin(BaseControllerV1);\n"]}