"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockTrackerPollingControllerV1 = exports.BlockTrackerPollingController = exports.BlockTrackerPollingControllerOnly = void 0;
const base_controller_1 = require("@metamask/base-controller");
const AbstractPollingController_1 = require("./AbstractPollingController");
/**
 * BlockTrackerPollingControllerMixin
 * A polling controller that polls using a block tracker.
 *
 * @param Base - The base class to mix onto.
 * @returns The composed class.
 */
function BlockTrackerPollingControllerMixin(Base) {
    var _BlockTrackerPollingController_activeListeners;
    class BlockTrackerPollingController extends (0, AbstractPollingController_1.AbstractPollingControllerBaseMixin)(Base) {
        constructor() {
            super(...arguments);
            _BlockTrackerPollingController_activeListeners.set(this, {});
        }
        _startPollingByNetworkClientId(networkClientId, options) {
            const key = (0, AbstractPollingController_1.getKey)(networkClientId, options);
            if (__classPrivateFieldGet(this, _BlockTrackerPollingController_activeListeners, "f")[key]) {
                return;
            }
            const networkClient = this._getNetworkClientById(networkClientId);
            if (networkClient) {
                const updateOnNewBlock = this._executePoll.bind(this, networkClientId, options);
                networkClient.blockTracker.addListener('latest', updateOnNewBlock);
                __classPrivateFieldGet(this, _BlockTrackerPollingController_activeListeners, "f")[key] = updateOnNewBlock;
            }
            else {
                throw new Error(`Unable to retrieve blockTracker for networkClientId ${networkClientId}`);
            }
        }
        _stopPollingByPollingTokenSetId(key) {
            const [networkClientId] = key.split(':');
            const networkClient = this._getNetworkClientById(networkClientId);
            if (networkClient && __classPrivateFieldGet(this, _BlockTrackerPollingController_activeListeners, "f")[key]) {
                const listener = __classPrivateFieldGet(this, _BlockTrackerPollingController_activeListeners, "f")[key];
                if (listener) {
                    networkClient.blockTracker.removeListener('latest', listener);
                    delete __classPrivateFieldGet(this, _BlockTrackerPollingController_activeListeners, "f")[key];
                }
            }
        }
    }
    _BlockTrackerPollingController_activeListeners = new WeakMap();
    return BlockTrackerPollingController;
}
class Empty {
}
exports.BlockTrackerPollingControllerOnly = BlockTrackerPollingControllerMixin(Empty);
exports.BlockTrackerPollingController = BlockTrackerPollingControllerMixin(base_controller_1.BaseController);
exports.BlockTrackerPollingControllerV1 = BlockTrackerPollingControllerMixin(base_controller_1.BaseControllerV1);
//# sourceMappingURL=BlockTrackerPollingController.js.map