{"version":3,"file":"AbstractPollingController.js","sourceRoot":"","sources":["../src/AbstractPollingController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NetworkClientId } from '@metamask/network-controller';\nimport type { Json } from '@metamask/utils';\nimport stringify from 'fast-json-stable-stringify';\nimport { v4 as random } from 'uuid';\n\nexport type IPollingController = {\n  startPollingByNetworkClientId(\n    networkClientId: NetworkClientId,\n    options: Json,\n  ): string;\n\n  stopAllPolling(): void;\n\n  stopPollingByPollingToken(pollingToken: string): void;\n\n  onPollingCompleteByNetworkClientId(\n    networkClientId: NetworkClientId,\n    callback: (networkClientId: NetworkClientId) => void,\n    options: Json,\n  ): void;\n\n  _executePoll(networkClientId: NetworkClientId, options: Json): Promise<void>;\n  _startPollingByNetworkClientId(\n    networkClientId: NetworkClientId,\n    options: Json,\n  ): void;\n  _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;\n};\n\nexport const getKey = (\n  networkClientId: NetworkClientId,\n  options: Json,\n): PollingTokenSetId => `${networkClientId}:${stringify(options)}`;\n\nexport type PollingTokenSetId = `${NetworkClientId}:${string}`;\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Constructor = new (...args: any[]) => object;\n\n/**\n * AbstractPollingControllerBaseMixin\n *\n * @param Base - The base class to mix onto.\n * @returns The composed class.\n */\nexport function AbstractPollingControllerBaseMixin<TBase extends Constructor>(\n  Base: TBase,\n) {\n  abstract class AbstractPollingControllerBase\n    extends Base\n    implements IPollingController\n  {\n    readonly #pollingTokenSets: Map<PollingTokenSetId, Set<string>> = new Map();\n\n    #callbacks: Map<\n      PollingTokenSetId,\n      Set<(PollingTokenSetId: PollingTokenSetId) => void>\n    > = new Map();\n\n    abstract _executePoll(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ): Promise<void>;\n\n    abstract _startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json,\n    ): void;\n\n    abstract _stopPollingByPollingTokenSetId(key: PollingTokenSetId): void;\n\n    startPollingByNetworkClientId(\n      networkClientId: NetworkClientId,\n      options: Json = {},\n    ): string {\n      const pollToken = random();\n      const key = getKey(networkClientId, options);\n      const pollingTokenSet =\n        this.#pollingTokenSets.get(key) ?? new Set<string>();\n      pollingTokenSet.add(pollToken);\n      this.#pollingTokenSets.set(key, pollingTokenSet);\n\n      if (pollingTokenSet.size === 1) {\n        this._startPollingByNetworkClientId(networkClientId, options);\n      }\n\n      return pollToken;\n    }\n\n    stopAllPolling() {\n      this.#pollingTokenSets.forEach((tokenSet, _key) => {\n        tokenSet.forEach((token) => {\n          this.stopPollingByPollingToken(token);\n        });\n      });\n    }\n\n    stopPollingByPollingToken(pollingToken: string) {\n      if (!pollingToken) {\n        throw new Error('pollingToken required');\n      }\n\n      let keyToDelete: PollingTokenSetId | null = null;\n      for (const [key, tokenSet] of this.#pollingTokenSets) {\n        if (tokenSet.delete(pollingToken)) {\n          if (tokenSet.size === 0) {\n            keyToDelete = key;\n          }\n          break;\n        }\n      }\n\n      if (keyToDelete) {\n        this._stopPollingByPollingTokenSetId(keyToDelete);\n        this.#pollingTokenSets.delete(keyToDelete);\n        const callbacks = this.#callbacks.get(keyToDelete);\n        if (callbacks) {\n          for (const callback of callbacks) {\n            // eslint-disable-next-line n/callback-return\n            callback(keyToDelete);\n          }\n          callbacks.clear();\n        }\n      }\n    }\n\n    onPollingCompleteByNetworkClientId(\n      networkClientId: NetworkClientId,\n      callback: (networkClientId: NetworkClientId) => void,\n      options: Json = {},\n    ) {\n      const key = getKey(networkClientId, options);\n      const callbacks = this.#callbacks.get(key) ?? new Set<typeof callback>();\n      callbacks.add(callback);\n      this.#callbacks.set(key, callbacks);\n    }\n  }\n  return AbstractPollingControllerBase;\n}\n"]}