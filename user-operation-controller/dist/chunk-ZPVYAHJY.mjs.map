{"version":3,"sources":["../src/helpers/Bundler.ts"],"sourcesContent":["/* eslint-disable jsdoc/require-jsdoc */\n\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type { UserOperation, UserOperationReceipt } from '../types';\n\nconst log = createModuleLogger(projectLogger, 'bundler');\n\n/**\n * Response from the `eth_estimateUserOperationGas` bundler method.\n * Includes the estimated gas limits required by a user operation.\n */\nexport type BundlerEstimateUserOperationGasResponse = {\n  /** Estimated gas required to compensate the bundler for any pre-verification. */\n  preVerificationGas: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGas?: number | string;\n\n  /** Estimated gas required to verify the user operation. */\n  verificationGasLimit?: number | string;\n\n  /** Estimated gas required for the execution of the user operation. */\n  callGasLimit: number | string;\n};\n\n/**\n * A helper class for interacting with a bundler.\n */\nexport class Bundler {\n  #url: string;\n\n  constructor(url: string) {\n    this.#url = url;\n  }\n\n  /**\n   * Estimate the gas required to execute a user operation.\n   *\n   * @param userOperation - The user operation to estimate gas for.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The estimated gas limits for the user operation.\n   */\n  async estimateUserOperationGas(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<BundlerEstimateUserOperationGasResponse> {\n    log('Estimating gas', { url: this.#url, userOperation, entrypoint });\n\n    const response: BundlerEstimateUserOperationGasResponse = await this.#query(\n      'eth_estimateUserOperationGas',\n      [userOperation, entrypoint],\n    );\n\n    log('Estimated gas', { response });\n\n    return response;\n  }\n\n  /**\n   * Retrieve the receipt for a user operation.\n   * @param hash - The hash of the user operation.\n   * @returns The receipt for the user operation, or `undefined` if the user operation is pending.\n   */\n  async getUserOperationReceipt(\n    hash?: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    log('Getting user operation receipt', { url: this.#url, hash });\n\n    return await this.#query<UserOperationReceipt | undefined>(\n      'eth_getUserOperationReceipt',\n      [hash],\n    );\n  }\n\n  /**\n   * Submit a user operation to the bundler.\n   * @param userOperation - The signed user operation to submit.\n   * @param entrypoint - The address of entrypoint to use for the user operation.\n   * @returns The hash of the user operation.\n   */\n  async sendUserOperation(\n    userOperation: UserOperation,\n    entrypoint: string,\n  ): Promise<string> {\n    log('Sending user operation', {\n      url: this.#url,\n      userOperation,\n      entrypoint,\n    });\n\n    const hash: string = await this.#query('eth_sendUserOperation', [\n      userOperation,\n      entrypoint,\n    ]);\n\n    log('Sent user operation', hash);\n\n    return hash;\n  }\n\n  async #query<T>(method: string, params: unknown[]): Promise<T> {\n    const request = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ jsonrpc: '2.0', id: 1, method, params }),\n    };\n\n    const response = await fetch(this.#url, request);\n    const responseJson = await response.json();\n\n    if (responseJson.error) {\n      const error = new Error(responseJson.error.message || responseJson.error);\n\n      (error as unknown as Record<string, string>).code =\n        responseJson.error.code;\n\n      throw error;\n    }\n\n    return responseJson.result;\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAKA,IAAM,MAAM,mBAAmB,eAAe,SAAS;AALvD;AA4BO,IAAM,UAAN,MAAc;AAAA,EAGnB,YAAY,KAAa;AAqEzB,uBAAM;AAvEN;AAGE,uBAAK,MAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,yBACJ,eACA,YACkD;AAClD,QAAI,kBAAkB,EAAE,KAAK,mBAAK,OAAM,eAAe,WAAW,CAAC;AAEnE,UAAM,WAAoD,MAAM,sBAAK,kBAAL,WAC9D,gCACA,CAAC,eAAe,UAAU;AAG5B,QAAI,iBAAiB,EAAE,SAAS,CAAC;AAEjC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,wBACJ,MAC2C;AAC3C,QAAI,kCAAkC,EAAE,KAAK,mBAAK,OAAM,KAAK,CAAC;AAE9D,WAAO,MAAM,sBAAK,kBAAL,WACX,+BACA,CAAC,IAAI;AAAA,EAET;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,kBACJ,eACA,YACiB;AACjB,QAAI,0BAA0B;AAAA,MAC5B,KAAK,mBAAK;AAAA,MACV;AAAA,MACA;AAAA,IACF,CAAC;AAED,UAAM,OAAe,MAAM,sBAAK,kBAAL,WAAY,yBAAyB;AAAA,MAC9D;AAAA,MACA;AAAA,IACF;AAEA,QAAI,uBAAuB,IAAI;AAE/B,WAAO;AAAA,EACT;AA0BF;AA/FE;AAuEM;AAAA,WAAS,eAAC,QAAgB,QAA+B;AAC7D,QAAM,UAAU;AAAA,IACd,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,QAAQ;AAAA,MACR,gBAAgB;AAAA,IAClB;AAAA,IACA,MAAM,KAAK,UAAU,EAAE,SAAS,OAAO,IAAI,GAAG,QAAQ,OAAO,CAAC;AAAA,EAChE;AAEA,QAAM,WAAW,MAAM,MAAM,mBAAK,OAAM,OAAO;AAC/C,QAAM,eAAe,MAAM,SAAS,KAAK;AAEzC,MAAI,aAAa,OAAO;AACtB,UAAM,QAAQ,IAAI,MAAM,aAAa,MAAM,WAAW,aAAa,KAAK;AAExE,IAAC,MAA4C,OAC3C,aAAa,MAAM;AAErB,UAAM;AAAA,EACR;AAEA,SAAO,aAAa;AACtB;","names":[]}