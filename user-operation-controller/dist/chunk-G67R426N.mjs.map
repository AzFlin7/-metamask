{"version":3,"sources":["../src/utils/gas.ts"],"sourcesContent":["import { hexToBN } from '@metamask/controller-utils';\nimport { add0x } from '@metamask/utils';\nimport BN from 'bn.js';\n\nimport { VALUE_ZERO } from '../constants';\nimport { Bundler } from '../helpers/Bundler';\nimport { createModuleLogger, projectLogger } from '../logger';\nimport type {\n  PrepareUserOperationResponse,\n  UserOperationMetadata,\n} from '../types';\n\nconst log = createModuleLogger(projectLogger, 'gas');\n\n/**\n * A multiplier to apply to all gas estimate values returned from the bundler.\n */\nconst GAS_ESTIMATE_MULTIPLIER = 1.5;\n\n/**\n * Populates the gas properties for a user operation.\n * @param metadata - The metadata for the user operation.\n * @param prepareResponse - The prepare response from the smart contract account.\n * @param entrypoint - Address of the entrypoint contract.\n */\nexport async function updateGas(\n  metadata: UserOperationMetadata,\n  prepareResponse: PrepareUserOperationResponse,\n  entrypoint: string,\n) {\n  const { userOperation } = metadata;\n\n  if (prepareResponse.gas) {\n    userOperation.callGasLimit = prepareResponse.gas.callGasLimit;\n    userOperation.preVerificationGas = prepareResponse.gas.preVerificationGas;\n    userOperation.verificationGasLimit =\n      prepareResponse.gas.verificationGasLimit;\n\n    log('Using gas values from smart contract account', {\n      callGasLimit: userOperation.callGasLimit,\n      preVerificationGas: userOperation.preVerificationGas,\n      verificationGasLimit: userOperation.verificationGasLimit,\n    });\n\n    return;\n  }\n\n  const payload = {\n    ...userOperation,\n    maxFeePerGas: VALUE_ZERO,\n    maxPriorityFeePerGas: VALUE_ZERO,\n    callGasLimit: VALUE_ZERO,\n    preVerificationGas: VALUE_ZERO,\n    verificationGasLimit: '0xF4240',\n  };\n\n  const bundler = new Bundler(metadata.bundlerUrl as string);\n  const estimate = await bundler.estimateUserOperationGas(payload, entrypoint);\n\n  userOperation.callGasLimit = normalizeGasEstimate(estimate.callGasLimit);\n  userOperation.preVerificationGas = normalizeGasEstimate(\n    estimate.preVerificationGas,\n  );\n  userOperation.verificationGasLimit = normalizeGasEstimate(\n    (estimate.verificationGasLimit ?? estimate.verificationGas) as\n      | string\n      | number,\n  );\n\n  log('Using buffered gas values from bundler estimate', {\n    callGasLimit: userOperation.callGasLimit,\n    preVerificationGas: userOperation.preVerificationGas,\n    verificationGasLimit: userOperation.verificationGasLimit,\n    multiplier: GAS_ESTIMATE_MULTIPLIER,\n    estimate,\n  });\n}\n\n/**\n * Normalizes a gas estimate value from the bundler.\n * @param rawValue - The raw value to normalize.\n * @returns The normalized value as a hexadecimal string.\n */\nfunction normalizeGasEstimate(rawValue: string | number): string {\n  const value =\n    typeof rawValue === 'string' ? hexToBN(rawValue) : new BN(rawValue);\n\n  const bufferedValue = value.muln(GAS_ESTIMATE_MULTIPLIER);\n\n  return add0x(bufferedValue.toString(16));\n}\n"],"mappings":";;;;;;;;;;;;AAAA,SAAS,eAAe;AACxB,SAAS,aAAa;AACtB,OAAO,QAAQ;AAUf,IAAM,MAAM,mBAAmB,eAAe,KAAK;AAKnD,IAAM,0BAA0B;AAQhC,eAAsB,UACpB,UACA,iBACA,YACA;AACA,QAAM,EAAE,cAAc,IAAI;AAE1B,MAAI,gBAAgB,KAAK;AACvB,kBAAc,eAAe,gBAAgB,IAAI;AACjD,kBAAc,qBAAqB,gBAAgB,IAAI;AACvD,kBAAc,uBACZ,gBAAgB,IAAI;AAEtB,QAAI,gDAAgD;AAAA,MAClD,cAAc,cAAc;AAAA,MAC5B,oBAAoB,cAAc;AAAA,MAClC,sBAAsB,cAAc;AAAA,IACtC,CAAC;AAED;AAAA,EACF;AAEA,QAAM,UAAU;AAAA,IACd,GAAG;AAAA,IACH,cAAc;AAAA,IACd,sBAAsB;AAAA,IACtB,cAAc;AAAA,IACd,oBAAoB;AAAA,IACpB,sBAAsB;AAAA,EACxB;AAEA,QAAM,UAAU,IAAI,QAAQ,SAAS,UAAoB;AACzD,QAAM,WAAW,MAAM,QAAQ,yBAAyB,SAAS,UAAU;AAE3E,gBAAc,eAAe,qBAAqB,SAAS,YAAY;AACvE,gBAAc,qBAAqB;AAAA,IACjC,SAAS;AAAA,EACX;AACA,gBAAc,uBAAuB;AAAA,IAClC,SAAS,wBAAwB,SAAS;AAAA,EAG7C;AAEA,MAAI,mDAAmD;AAAA,IACrD,cAAc,cAAc;AAAA,IAC5B,oBAAoB,cAAc;AAAA,IAClC,sBAAsB,cAAc;AAAA,IACpC,YAAY;AAAA,IACZ;AAAA,EACF,CAAC;AACH;AAOA,SAAS,qBAAqB,UAAmC;AAC/D,QAAM,QACJ,OAAO,aAAa,WAAW,QAAQ,QAAQ,IAAI,IAAI,GAAG,QAAQ;AAEpE,QAAM,gBAAgB,MAAM,KAAK,uBAAuB;AAExD,SAAO,MAAM,cAAc,SAAS,EAAE,CAAC;AACzC;","names":[]}