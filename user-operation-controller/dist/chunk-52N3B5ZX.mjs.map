{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  TransactionParams,\n  TransactionType,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\n\n/**\n * A complete user operation to be submitted to a bundler.\n * Defined in EIP-4337.\n */\nexport type UserOperation = {\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /** The amount of gas to allocate the main execution call. */\n  callGasLimit: string;\n\n  /**\n   * The initCode of the account.\n   * Needed if and only if the account is not yet on-chain and needs to be created.\n   */\n  initCode: string;\n\n  /**\n   * Maximum fee per gas.\n   * Similar to EIP-1559 max_fee_per_gas.\n   */\n  maxFeePerGas: string;\n\n  /**\n   * Maximum priority fee per gas.\n   * Similar to EIP-1559 max_priority_fee_per_gas.\n   */\n  maxPriorityFeePerGas: string;\n\n  /** Anti-replay parameter. */\n  nonce: string;\n\n  /**\n   * Address of paymaster sponsoring the transaction, followed by extra data to send to the paymaster.\n   * Empty for self-sponsored transactions.\n   */\n  paymasterAndData: string;\n\n  /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n  preVerificationGas: string;\n\n  /** The account making the operation. */\n  sender: string;\n\n  /** Data passed into the account along with the nonce during the verification step. */\n  signature: string;\n\n  /** The amount of gas to allocate for the verification step. */\n  verificationGasLimit: string;\n};\n\n/**\n * The possible statuses of a single user operation.\n */\nexport enum UserOperationStatus {\n  Unapproved = 'unapproved',\n  Approved = 'approved',\n  Signed = 'signed',\n  Submitted = 'submitted',\n  Failed = 'failed',\n  Confirmed = 'confirmed',\n}\n\n/** Information concerning an error while creating a user operation. */\nexport type UserOperationError = {\n  /**\n   * A descriptive error name.\n   */\n  name: string;\n\n  /**\n   * A descriptive error message providing details about the encountered error.\n   */\n  message: string;\n\n  /**\n   * The stack trace associated with the error, if available.\n   */\n  stack: string | null;\n\n  /**\n   * An optional error code associated with the error.\n   */\n  code: string | null;\n\n  /**\n   * Additional information related to the error.\n   */\n  rpc: string | null;\n};\n\n/**\n * Metadata concerning a single user operation, stored in the client state.\n */\nexport type UserOperationMetadata = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: string | null;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: string | null;\n\n  /** Base fee of the transaction block as a hex value. */\n  baseFeePerGas: string | null;\n\n  /** URL of the bundler that the operation was submitted to. */\n  bundlerUrl: string | null;\n\n  /** Hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** An error that occurred while creating the operation. */\n  error: UserOperationError | null;\n\n  /** Hash of the user operation, generated by the bundler. */\n  hash: string | null;\n\n  /** A unique ID used to identify a user operation in the client. */\n  id: string;\n\n  /** The origin of the user operation, such as the hostname of a dApp. */\n  origin: string;\n\n  /** Current status of the user operation. */\n  status: UserOperationStatus;\n\n  /** Metadata specific to swap transactions. */\n  swapsMetadata: SwapsMetadata | null;\n\n  /** Timestamp of when the user operation was created. */\n  time: number;\n\n  /** Hash of the transaction that submitted the user operation to the entrypoint. */\n  transactionHash: string | null;\n\n  /** The initial transaction parameters that the user operation was created from. */\n  transactionParams: Required<TransactionParams> | null;\n\n  /** The type of transaction that the user operation will create. */\n  transactionType: TransactionType | null;\n\n  /** The origin of the gas fee values. */\n  userFeeLevel: UserFeeLevel | null;\n\n  /** Resulting user operation object to be submitted to the bundler. */\n  userOperation: UserOperation;\n};\n\n/**\n * The data provided to the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationRequest = {\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n\n  /** The data to include in the resulting transaction.  */\n  data?: string;\n\n  /** Address of the account requesting the user operation. */\n  from: string;\n\n  /** The destination address of the resulting transaction. */\n  to?: string;\n\n  /** The value to send in the resulting transaction. */\n  value?: string;\n};\n\n/**\n * The data provided to the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationRequest = {\n  /** The user operation to update including the dummy signature and dummy paymasterAndData values. */\n  userOperation: UserOperation;\n};\n\n/**\n * The data provided to the smart contract account when signing a user operation.\n */\nexport type SignUserOperationRequest = {\n  /** The user operation to sign including the dummy signature and final paymasterAndData values. */\n  userOperation: UserOperation;\n\n  /** The hexadecimal chain ID of the target network. */\n  chainId: string;\n};\n\n/**\n * The data returned by the smart contract account when preparing a user operation.\n */\nexport type PrepareUserOperationResponse = {\n  /** The URL of the bundler to submit the user operation to. */\n  bundler: string;\n\n  /** The data to pass to the sender during the main execution call. */\n  callData: string;\n\n  /**\n   * A dummy paymasterAndData value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummyPaymasterAndData?: string;\n\n  /**\n   * A dummy signature value required to estimate gas using the bundler.\n   * Only required if the smart contract account is not providing gas values.\n   */\n  dummySignature?: string;\n\n  /**\n   * The estimated gas limits for the user operation.\n   * Gas is automatically estimated using the bundler if not provided.\n   */\n  gas?: {\n    /** The amount of gas to allocate to the main execution call. */\n    callGasLimit: string;\n\n    /** The amount of gas to pay to compensate the bundler for pre-verification execution, calldata and any gas overhead that cannot be tracked on-chain. */\n    preVerificationGas: string;\n\n    /** The amount of gas to allocate for the verification step. */\n    verificationGasLimit: string;\n  };\n\n  /**\n   * The initCode to include in the user operation.\n   * Required only if the smart contract is not yet deployed.\n   */\n  initCode?: string;\n\n  /**\n   * The nonce to include in the user operation, specific to the smart contract account.\n   */\n  nonce: string;\n\n  /**\n   * The address of the smart contract account creating the user operation.\n   */\n  sender: string;\n};\n\n/**\n * The data returned by the smart contract account when updating a user operation.\n */\nexport type UpdateUserOperationResponse = {\n  /**\n   * The final paymasterAndData to include in the user operation.\n   * Not required if a paymaster is not sponsoring the transaction.\n   */\n  paymasterAndData?: string;\n};\n\n/**\n * The data returned by the smart contract account when signing a user operation.\n */\nexport type SignUserOperationResponse = {\n  /** The final signature of the user operation. */\n  signature: string;\n};\n\n/**\n * An abstraction to provide smart contract and paymaster specific data when creating a user operation.\n * This will typically communicate with an account snap installed in the client.\n */\nexport type SmartContractAccount = {\n  /**\n   * Retrieve the initial values required to create a user operation.\n   * @param request - The data needed by the smart contract account to provide the initial user operation values.\n   * @returns The initial values required to create a user operation.\n   */\n  prepareUserOperation: (\n    request: PrepareUserOperationRequest,\n  ) => Promise<PrepareUserOperationResponse>;\n\n  /**\n   * Retrieve additional data required to create a user operation, such as the paymasterAndData value.\n   * If gas values were not provided in the prepare response, this will be called after estimating gas using the bundler.\n   * @param request - The data needed by the smart contract account to provide the additional user operation values.\n   * @returns The additional values required to create a user operation.\n   */\n  updateUserOperation: (\n    request: UpdateUserOperationRequest,\n  ) => Promise<UpdateUserOperationResponse>;\n\n  /**\n   * Sign the final user operation.\n   * @param request - The data needed by the smart contract account to generate the signature.\n   * @returns The final values required to sign a user operation.\n   */\n  signUserOperation: (\n    request: SignUserOperationRequest,\n  ) => Promise<SignUserOperationResponse>;\n};\n\n/**\n * Response from the `eth_getUserOperationReceipt` bundler method.\n * Includes the status of a completed user operation and the receipt of the transaction that submitted it.\n */\nexport type UserOperationReceipt = {\n  /** Confirmed total cost of the gas for the user operation. */\n  actualGasCost: string;\n\n  /** Confirmed total amount of gas used by the user operation. */\n  actualGasUsed: string;\n\n  /** True if the user operation was successfully confirmed on chain. */\n  success: boolean;\n\n  /** Receipt for the associated transaction. */\n  receipt: {\n    /** Hash of the block the transaction was added to. */\n    blockHash: string;\n\n    /** Hash of the confirmed transaction. */\n    transactionHash: string;\n  };\n};\n\n/** Information specific to user operations created from swap transactions. */\nexport type SwapsMetadata = {\n  /** ID of the associated approval transaction. */\n  approvalTxId: string | null;\n\n  /** Address of the destination token. */\n  destinationTokenAddress: string | null;\n\n  /** Number of decimals of the destination token. */\n  destinationTokenDecimals: number | null;\n\n  /** Symbol of the destination token. */\n  destinationTokenSymbol: string | null;\n\n  /** Estimated base fee of the swap. */\n  estimatedBaseFee: string | null;\n\n  /** Symbol of the source token. */\n  sourceTokenSymbol: string | null;\n\n  /** Untyped raw metadata values. */\n  swapMetaData: Record<string, never> | null;\n\n  /** Value of the token being swapped. */\n  swapTokenValue: string | null;\n};\n"],"mappings":";AA4DO,IAAK,sBAAL,kBAAKA,yBAAL;AACL,EAAAA,qBAAA,gBAAa;AACb,EAAAA,qBAAA,cAAW;AACX,EAAAA,qBAAA,YAAS;AACT,EAAAA,qBAAA,eAAY;AACZ,EAAAA,qBAAA,YAAS;AACT,EAAAA,qBAAA,eAAY;AANF,SAAAA;AAAA,GAAA;","names":["UserOperationStatus"]}