{"version":3,"sources":["../src/helpers/PendingUserOperationTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import { query } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type { NetworkClient, Provider } from '@metamask/network-controller';\nimport { BlockTrackerPollingControllerOnly } from '@metamask/polling-controller';\nimport type { Json } from '@metamask/utils';\nimport { createModuleLogger } from '@metamask/utils';\nimport EventEmitter from 'events';\n\nimport { projectLogger } from '../logger';\nimport type { UserOperationMetadata, UserOperationReceipt } from '../types';\nimport { UserOperationStatus } from '../types';\nimport type { UserOperationControllerMessenger } from '../UserOperationController';\nimport { Bundler } from './Bundler';\n\nconst log = createModuleLogger(projectLogger, 'pending-user-operations');\n\ntype Events = {\n  'user-operation-confirmed': [metadata: UserOperationMetadata];\n  'user-operation-failed': [txMeta: UserOperationMetadata, error: Error];\n  'user-operation-updated': [txMeta: UserOperationMetadata];\n};\n\nexport type PendingUserOperationTrackerEventEmitter = EventEmitter & {\n  on<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  once<T extends keyof Events>(\n    eventName: T,\n    listener: (...args: Events[T]) => void,\n  ): PendingUserOperationTrackerEventEmitter;\n\n  emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;\n};\n\n/**\n * A helper class to periodically query the bundlers\n * and update the status of any submitted user operations.\n */\nexport class PendingUserOperationTracker extends BlockTrackerPollingControllerOnly {\n  hub: PendingUserOperationTrackerEventEmitter;\n\n  #getUserOperations: () => UserOperationMetadata[];\n\n  #messenger: UserOperationControllerMessenger;\n\n  constructor({\n    getUserOperations,\n    messenger,\n  }: {\n    getUserOperations: () => UserOperationMetadata[];\n    messenger: UserOperationControllerMessenger;\n  }) {\n    super();\n\n    this.hub = new EventEmitter() as PendingUserOperationTrackerEventEmitter;\n\n    this.#getUserOperations = getUserOperations;\n    this.#messenger = messenger;\n  }\n\n  async _executePoll(networkClientId: string, _options: Json) {\n    try {\n      const { blockTracker, configuration, provider } =\n        this._getNetworkClientById(networkClientId) as NetworkClient;\n\n      log('Polling', {\n        blockNumber: blockTracker.getCurrentBlock(),\n        chainId: configuration.chainId,\n      });\n\n      await this.#checkUserOperations(configuration.chainId, provider);\n    } catch (error) {\n      /* istanbul ignore next */\n      log('Failed to check user operations', error);\n    }\n  }\n\n  _getNetworkClientById(networkClientId: string): NetworkClient | undefined {\n    return this.#messenger.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n  }\n\n  async #checkUserOperations(chainId: string, provider: Provider) {\n    const pendingUserOperations = this.#getPendingUserOperations().filter(\n      (metadata) => metadata.chainId === chainId,\n    );\n\n    if (!pendingUserOperations.length) {\n      log('No pending user operations to check');\n      return;\n    }\n\n    log('Found pending user operations to check', {\n      count: pendingUserOperations.length,\n      ids: pendingUserOperations.map((userOperation) => userOperation.id),\n    });\n\n    await Promise.all(\n      pendingUserOperations.map((userOperation) =>\n        this.#checkUserOperation(userOperation, provider),\n      ),\n    );\n  }\n\n  async #checkUserOperation(\n    metadata: UserOperationMetadata,\n    provider: Provider,\n  ) {\n    const { bundlerUrl, hash, id } = metadata;\n\n    if (!hash || !bundlerUrl) {\n      log('Skipping user operation as missing hash or bundler', id);\n      return;\n    }\n\n    try {\n      const receipt = await this.#getUserOperationReceipt(hash, bundlerUrl);\n      const isSuccess = receipt?.success;\n\n      if (receipt && !isSuccess) {\n        this.#onUserOperationFailed(metadata, receipt);\n        return;\n      }\n\n      if (isSuccess) {\n        await this.#onUserOperationConfirmed(metadata, receipt, provider);\n        return;\n      }\n\n      log('No receipt found for user operation', { id, hash });\n    } catch (error) {\n      log('Failed to check user operation', id, error);\n    }\n  }\n\n  async #onUserOperationConfirmed(\n    metadata: UserOperationMetadata,\n    receipt: UserOperationReceipt,\n    provider: Provider,\n  ) {\n    const { id } = metadata;\n\n    const {\n      actualGasCost,\n      actualGasUsed,\n      receipt: { blockHash, transactionHash },\n    } = receipt;\n\n    log('User operation confirmed', id, transactionHash);\n\n    const { baseFeePerGas } = await query(\n      new EthQuery(provider),\n      'getBlockByHash',\n      [blockHash, false],\n    );\n\n    metadata.actualGasCost = actualGasCost;\n    metadata.actualGasUsed = actualGasUsed;\n    metadata.baseFeePerGas = baseFeePerGas;\n    metadata.status = UserOperationStatus.Confirmed;\n    metadata.transactionHash = transactionHash;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit('user-operation-confirmed', metadata);\n  }\n\n  #onUserOperationFailed(\n    metadata: UserOperationMetadata,\n    _receipt: UserOperationReceipt,\n  ) {\n    const { id } = metadata;\n\n    log('User operation failed', id);\n\n    metadata.status = UserOperationStatus.Failed;\n\n    this.#updateUserOperation(metadata);\n\n    this.hub.emit(\n      'user-operation-failed',\n      metadata,\n      new Error('User operation receipt has failed status'),\n    );\n  }\n\n  #getPendingUserOperations(): UserOperationMetadata[] {\n    return this.#getUserOperations().filter(\n      (userOperation) => userOperation.status === UserOperationStatus.Submitted,\n    );\n  }\n\n  #updateUserOperation(metadata: UserOperationMetadata) {\n    this.hub.emit('user-operation-updated', metadata);\n  }\n\n  async #getUserOperationReceipt(\n    hash: string,\n    bundlerUrl: string,\n  ): Promise<UserOperationReceipt | undefined> {\n    const bundler = new Bundler(bundlerUrl);\n    return bundler.getUserOperationReceipt(hash);\n  }\n}\n"]}