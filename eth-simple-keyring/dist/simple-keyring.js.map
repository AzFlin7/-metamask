{"version":3,"file":"simple-keyring.js","sourceRoot":"","sources":["../src/simple-keyring.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,2CAS0B;AAC1B,yDAQgC;AAChC,2CAA4E;AAC5E,yDAAyD;AACzD,8DAAsC;AAOtC,MAAM,IAAI,GAAG,iBAAiB,CAAC;AAE/B,MAAqB,aAAa;IAOhC,YAAY,cAAwB,EAAE;;QANtC,yCAAsD;QAE7C,SAAI,GAAW,IAAI,CAAC;QAK3B,uBAAA,IAAI,0BAAY,EAAE,MAAA,CAAC;QAEnB;iHACyG;QACzG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;YACnD,MAAM,IAAI,KAAK,CAAC,uCAAuC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,uBAAA,IAAI,8BAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,cAAwB,EAAE;QAC1C,uBAAA,IAAI,0BAAY,WAAW,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE;YAChD,MAAM,qBAAqB,GAAG,IAAA,qBAAc,EAAC,aAAa,CAAC,CAAC;YAC5D,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC7D,MAAM,SAAS,GAAG,IAAA,sBAAe,EAAC,UAAU,CAAC,CAAC;YAC9C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;QACnC,CAAC,CAAC,MAAA,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,WAAW,GAAG,CAAC;QAC/B,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;YACpC,MAAM,UAAU,GAAG,WAAW,EAAE,CAAC;YACjC,MAAM,SAAS,GAAG,IAAA,sBAAe,EAAC,UAAU,CAAC,CAAC;YAC9C,UAAU,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;SAC5C;QACD,uBAAA,IAAI,0BAAY,uBAAA,IAAI,8BAAS,CAAC,MAAM,CAAC,UAAU,CAAC,MAAA,CAAC;QACjD,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAClD,IAAA,aAAK,EAAC,IAAA,kBAAW,EAAC,IAAA,sBAAe,EAAC,SAAS,CAAC,CAAC,CAAC,CAC/C,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,uBAAA,IAAI,8BAAS,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CACzC,IAAA,aAAK,EAAC,IAAA,kBAAW,EAAC,IAAA,sBAAe,EAAC,SAAS,CAAC,CAAC,CAAC,CAC/C,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,OAAY,EACZ,WAA6B,EAC7B,OAAmB,EAAE;QAErB,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAkB,MAAtB,IAAI,EAAmB,OAAO,EAAE,IAAI,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3C,2EAA2E;QAC3E,OAAO,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC;IACzD,CAAC;IAED,gDAAgD;IAChD,KAAK,CAAC,WAAW,CACf,OAAY,EACZ,IAAY,EACZ,IAAI,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE;QAEtD,MAAM,OAAO,GAAG,IAAA,qBAAc,EAAC,IAAI,CAAC,CAAC;QACrC,IACE,IAAI,CAAC,eAAe;YACpB,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAC3D;YACA,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAChD;QACD,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAkB,MAAtB,IAAI,EAAmB,OAAO,EAAE,IAAI,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,IAAA,aAAM,EAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,IAAA,wBAAS,EAAC,IAAA,eAAQ,EAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QACpE,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,oDAAoD;IACpD,KAAK,CAAC,mBAAmB,CACvB,OAAY,EACZ,MAAW,EACX,IAAI,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE;QAE/B,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAkB,MAAtB,IAAI,EAAmB,OAAO,EAAE,IAAI,CAAC,CAAC;QACtD,OAAO,IAAA,2BAAY,EAAC,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,0BAA0B;IAC1B,KAAK,CAAC,cAAc,CAAC,WAAgB,EAAE,aAAmC;QACxE,MAAM,MAAM,GAAG,uBAAA,IAAI,oEAAqB,MAAzB,IAAI,EAAsB,WAAW,CAAC,CAAC;QACtD,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QACrD,OAAO,IAAA,sBAAO,EAAC,EAAE,UAAU,EAAE,aAAa,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,2DAA2D;IAC3D,KAAK,CAAC,aAAa,CACjB,OAAY,EACZ,SAAc,EACd,OAAmB,EAAE,OAAO,EAAE,mCAAoB,CAAC,EAAE,EAAE;QAEvD,iCAAiC;QACjC,IAAI,OAAO,GAAG,mCAAoB,CAAC,EAAE,CAAC;QAEtC,IAAI,IAAI,CAAC,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACxD,OAAO,GAAG,mCAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC9C;QAED,MAAM,UAAU,GAAG,uBAAA,IAAI,iEAAkB,MAAtB,IAAI,EAAmB,OAAO,EAAE,IAAI,CAAC,CAAC;QACzD,OAAO,IAAA,4BAAa,EAAC,EAAE,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;IACjE,CAAC;IAED,0BAA0B;IAC1B,KAAK,CAAC,sBAAsB,CAAC,WAAgB,EAAE,IAAiB;QAC9D,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAkB,MAAtB,IAAI,EAAmB,WAAW,EAAE,IAAI,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAG,IAAA,qCAAsB,EAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAClE,OAAO,SAAS,CAAC;IACnB,CAAC;IAUD,wCAAwC;IACxC,KAAK,CAAC,gBAAgB,CAAC,OAAY,EAAE,MAAc;QACjD,IAAI,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YACzC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SACxD;QACD,MAAM,MAAM,GAAG,uBAAA,IAAI,oEAAqB,MAAzB,IAAI,EAAsB,OAAO,EAAE;YAChD,gBAAgB,EAAE,MAAM;SACzB,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,IAAA,aAAK,EAAC,IAAA,kBAAW,EAAC,IAAA,sBAAe,EAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC5E,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,yDAAyD;IACzD,KAAK,CAAC,aAAa,CAAC,OAAY,EAAE,IAAI,GAAG,EAAE,gBAAgB,EAAE,EAAE,EAAE;QAC/D,MAAM,MAAM,GAAG,uBAAA,IAAI,oEAAqB,MAAzB,IAAI,EAAsB,OAAO,EAAE,IAAI,CAAC,CAAC;QACxD,OAAO,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,aAAa,CAAC,OAAe;QAC3B,IACE,CAAC,uBAAA,IAAI,8BAAS;aACX,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CACrB,IAAA,kBAAW,EAAC,IAAA,sBAAe,EAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,CACtD;aACA,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,EAClC;YACA,MAAM,IAAI,KAAK,CAAC,WAAW,OAAO,4BAA4B,CAAC,CAAC;SACjE;QAED,uBAAA,IAAI,0BAAY,uBAAA,IAAI,8BAAS,CAAC,MAAM,CAClC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAChB,IAAA,kBAAW,EAAC,IAAA,sBAAe,EAAC,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE;YACrD,OAAO,CAAC,WAAW,EAAE,CACxB,MAAA,CAAC;IACJ,CAAC;;AAnKH,gCAyLC;6JAhEmB,OAAY,EAAE,OAAmB,EAAE,gBAAgB,EAAE,EAAE,EAAE;IACzE,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IACD,MAAM,MAAM,GAAG,uBAAA,IAAI,oEAAqB,MAAzB,IAAI,EAAsB,OAAO,EAAE,IAAI,CAAC,CAAC;IACxD,OAAO,MAAM,CAAC,UAAU,CAAC;AAC3B,CAAC,mFAsCoB,OAAwB,EAAE,OAAmB,EAAE;IAClE,MAAM,OAAO,GAAG,IAAA,wBAAS,EAAC,OAAO,CAAC,CAAC;IACnC,IAAI,MAAM,GAAG,uBAAA,IAAI,8BAAS,CAAC,IAAI,CAC7B,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAA,kBAAW,EAAC,IAAA,sBAAe,EAAC,SAAS,CAAC,CAAC,KAAK,OAAO,CACvE,CAAC;IACF,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;KACtE;IAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;QACzB,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;QAC9B,MAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QACtE,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC,CAAC;QACrE,MAAM,gBAAgB,GAAG,IAAA,kBAAW,EAAC,IAAA,kBAAS,EAAC,YAAY,CAAC,CAAC,CAAC;QAC9D,MAAM,eAAe,GAAG,IAAA,sBAAe,EAAC,gBAAgB,CAAC,CAAC;QAC1D,MAAM,GAAG,EAAE,UAAU,EAAE,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;KACvE;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAnLM,kBAAI,GAAW,IAAI,CAAC;AAsL7B;;;;GAIG;AACH,SAAS,WAAW;IAClB,MAAM,UAAU,GAAG,IAAA,qBAAW,EAAC,EAAE,CAAC,CAAC;IAEnC,IAAI,CAAC,IAAA,qBAAc,EAAC,UAAU,CAAC,EAAE;QAC/B,MAAM,IAAI,KAAK,CACb,yEAAyE,CAC1E,CAAC;KACH;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAED;;;;;GAKG;AACH,2CAA2C;AAC3C,SAAS,sBAAsB,CAC7B,OAAsC;IAEtC,OAAO,OAAO,IAAI,mCAAoB,CAAC;AACzC,CAAC","sourcesContent":["import { TypedTransaction } from '@ethereumjs/tx';\nimport {\n  arrToBufArr,\n  bufferToHex,\n  ecsign,\n  isValidPrivate,\n  privateToPublic,\n  publicToAddress,\n  stripHexPrefix,\n  toBuffer,\n} from '@ethereumjs/util';\nimport {\n  concatSig,\n  decrypt,\n  getEncryptionPublicKey,\n  normalize,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n} from '@metamask/eth-sig-util';\nimport { add0x, Eip1024EncryptedData, Hex, Keyring } from '@metamask/utils';\nimport { keccak256 } from 'ethereum-cryptography/keccak';\nimport randombytes from 'randombytes';\n\ntype KeyringOpt = {\n  withAppKeyOrigin?: string;\n  version?: SignTypedDataVersion | string;\n};\n\nconst TYPE = 'Simple Key Pair';\n\nexport default class SimpleKeyring implements Keyring<string[]> {\n  #wallets: { privateKey: Buffer; publicKey: Buffer }[];\n\n  readonly type: string = TYPE;\n\n  static type: string = TYPE;\n\n  constructor(privateKeys: string[] = []) {\n    this.#wallets = [];\n\n    /* istanbul ignore next: It's not possible to write a unit test for this, because a constructor isn't allowed\n     * to be async. Jest can't await the constructor, and when the error gets thrown, Jest can't catch it. */\n    this.deserialize(privateKeys).catch((error: Error) => {\n      throw new Error(`Problem deserializing SimpleKeyring ${error.message}`);\n    });\n  }\n\n  async serialize() {\n    return this.#wallets.map((a) => a.privateKey.toString('hex'));\n  }\n\n  async deserialize(privateKeys: string[] = []) {\n    this.#wallets = privateKeys.map((hexPrivateKey) => {\n      const strippedHexPrivateKey = stripHexPrefix(hexPrivateKey);\n      const privateKey = Buffer.from(strippedHexPrivateKey, 'hex');\n      const publicKey = privateToPublic(privateKey);\n      return { privateKey, publicKey };\n    });\n  }\n\n  async addAccounts(numAccounts = 1) {\n    const newWallets = [];\n    for (let i = 0; i < numAccounts; i++) {\n      const privateKey = generateKey();\n      const publicKey = privateToPublic(privateKey);\n      newWallets.push({ privateKey, publicKey });\n    }\n    this.#wallets = this.#wallets.concat(newWallets);\n    const hexWallets = newWallets.map(({ publicKey }) =>\n      add0x(bufferToHex(publicToAddress(publicKey))),\n    );\n    return hexWallets;\n  }\n\n  async getAccounts() {\n    return this.#wallets.map(({ publicKey }) =>\n      add0x(bufferToHex(publicToAddress(publicKey))),\n    );\n  }\n\n  async signTransaction(\n    address: Hex,\n    transaction: TypedTransaction,\n    opts: KeyringOpt = {},\n  ): Promise<TypedTransaction> {\n    const privKey = this.#getPrivateKeyFor(address, opts);\n    const signedTx = transaction.sign(privKey);\n    // Newer versions of Ethereumjs-tx are immutable and return a new tx object\n    return signedTx === undefined ? transaction : signedTx;\n  }\n\n  // For eth_sign, we need to sign arbitrary data:\n  async signMessage(\n    address: Hex,\n    data: string,\n    opts = { withAppKeyOrigin: '', validateMessage: true },\n  ) {\n    const message = stripHexPrefix(data);\n    if (\n      opts.validateMessage &&\n      (message.length === 0 || !message.match(/^[a-fA-F0-9]*$/u))\n    ) {\n      throw new Error('Cannot sign invalid message');\n    }\n    const privKey = this.#getPrivateKeyFor(address, opts);\n    const msgSig = ecsign(Buffer.from(message, 'hex'), privKey);\n    const rawMsgSig = concatSig(toBuffer(msgSig.v), msgSig.r, msgSig.s);\n    return rawMsgSig;\n  }\n\n  // For personal_sign, we need to prefix the message:\n  async signPersonalMessage(\n    address: Hex,\n    msgHex: Hex,\n    opts = { withAppKeyOrigin: '' },\n  ) {\n    const privKey = this.#getPrivateKeyFor(address, opts);\n    return personalSign({ privateKey: privKey, data: msgHex });\n  }\n\n  // For eth_decryptMessage:\n  async decryptMessage(withAccount: Hex, encryptedData: Eip1024EncryptedData) {\n    const wallet = this.#getWalletForAccount(withAccount);\n    const privateKey = wallet.privateKey.toString('hex');\n    return decrypt({ privateKey, encryptedData });\n  }\n\n  // personal_signTypedData, signs data along with the schema\n  async signTypedData(\n    address: Hex,\n    typedData: any,\n    opts: KeyringOpt = { version: SignTypedDataVersion.V1 },\n  ) {\n    // Treat invalid versions as \"V1\"\n    let version = SignTypedDataVersion.V1;\n\n    if (opts.version && isSignTypedDataVersion(opts.version)) {\n      version = SignTypedDataVersion[opts.version];\n    }\n\n    const privateKey = this.#getPrivateKeyFor(address, opts);\n    return signTypedData({ privateKey, data: typedData, version });\n  }\n\n  // get public key for nacl\n  async getEncryptionPublicKey(withAccount: Hex, opts?: KeyringOpt) {\n    const privKey = this.#getPrivateKeyFor(withAccount, opts);\n    const publicKey = getEncryptionPublicKey(privKey.toString('hex'));\n    return publicKey;\n  }\n\n  #getPrivateKeyFor(address: Hex, opts: KeyringOpt = { withAppKeyOrigin: '' }) {\n    if (!address) {\n      throw new Error('Must specify address.');\n    }\n    const wallet = this.#getWalletForAccount(address, opts);\n    return wallet.privateKey;\n  }\n\n  // returns an address specific to an app\n  async getAppKeyAddress(address: Hex, origin: string) {\n    if (!origin || typeof origin !== 'string') {\n      throw new Error(`'origin' must be a non-empty string`);\n    }\n    const wallet = this.#getWalletForAccount(address, {\n      withAppKeyOrigin: origin,\n    });\n    const appKeyAddress = add0x(bufferToHex(publicToAddress(wallet.publicKey)));\n    return appKeyAddress;\n  }\n\n  // exportAccount should return a hex-encoded private key:\n  async exportAccount(address: Hex, opts = { withAppKeyOrigin: '' }) {\n    const wallet = this.#getWalletForAccount(address, opts);\n    return wallet.privateKey.toString('hex');\n  }\n\n  removeAccount(address: string) {\n    if (\n      !this.#wallets\n        .map(({ publicKey }) =>\n          bufferToHex(publicToAddress(publicKey)).toLowerCase(),\n        )\n        .includes(address.toLowerCase())\n    ) {\n      throw new Error(`Address ${address} not found in this keyring`);\n    }\n\n    this.#wallets = this.#wallets.filter(\n      ({ publicKey }) =>\n        bufferToHex(publicToAddress(publicKey)).toLowerCase() !==\n        address.toLowerCase(),\n    );\n  }\n\n  #getWalletForAccount(account: string | number, opts: KeyringOpt = {}) {\n    const address = normalize(account);\n    let wallet = this.#wallets.find(\n      ({ publicKey }) => bufferToHex(publicToAddress(publicKey)) === address,\n    );\n    if (!wallet) {\n      throw new Error('Simple Keyring - Unable to find matching address.');\n    }\n\n    if (opts.withAppKeyOrigin) {\n      const { privateKey } = wallet;\n      const appKeyOriginBuffer = Buffer.from(opts.withAppKeyOrigin, 'utf8');\n      const appKeyBuffer = Buffer.concat([privateKey, appKeyOriginBuffer]);\n      const appKeyPrivateKey = arrToBufArr(keccak256(appKeyBuffer));\n      const appKeyPublicKey = privateToPublic(appKeyPrivateKey);\n      wallet = { privateKey: appKeyPrivateKey, publicKey: appKeyPublicKey };\n    }\n\n    return wallet;\n  }\n}\n\n/**\n * Generate and validate a new random key of 32 bytes.\n *\n * @returns Buffer The generated key.\n */\nfunction generateKey(): Buffer {\n  const privateKey = randombytes(32);\n\n  if (!isValidPrivate(privateKey)) {\n    throw new Error(\n      'Private key does not satisfy the curve requirements (ie. it is invalid)',\n    );\n  }\n  return privateKey;\n}\n\n/**\n * Type predicate type guard to check if a string is in the enum SignTypedDataVersion.\n *\n * @param version - The string to check.\n * @returns Whether it's in the enum.\n */\n// TODO: Put this in @metamask/eth-sig-util\nfunction isSignTypedDataVersion(\n  version: SignTypedDataVersion | string,\n): version is SignTypedDataVersion {\n  return version in SignTypedDataVersion;\n}\n"]}