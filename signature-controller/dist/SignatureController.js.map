{"version":3,"file":"SignatureController.js","sourceRoot":"","sources":["../src/SignatureController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AddApprovalRequest,\n  AcceptResultCallbacks,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { ApprovalType, ORIGIN_METAMASK } from '@metamask/controller-utils';\nimport type {\n  KeyringControllerSignMessageAction,\n  KeyringControllerSignPersonalMessageAction,\n  KeyringControllerSignTypedMessageAction,\n  SignTypedDataVersion,\n} from '@metamask/keyring-controller';\nimport {\n  SigningMethod,\n  SigningStage,\n  LogType,\n} from '@metamask/logging-controller';\nimport type { AddLog } from '@metamask/logging-controller';\nimport type {\n  MessageParams,\n  MessageParamsMetamask,\n  PersonalMessageParams,\n  PersonalMessageParamsMetamask,\n  TypedMessageParams,\n  TypedMessageParamsMetamask,\n  AbstractMessageManager,\n  AbstractMessage,\n  MessageManagerState,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n  TypedMessage,\n  PersonalMessage,\n  Message,\n} from '@metamask/message-manager';\nimport {\n  MessageManager,\n  PersonalMessageManager,\n  TypedMessageManager,\n} from '@metamask/message-manager';\nimport { providerErrors, rpcErrors } from '@metamask/rpc-errors';\nimport type { Hex, Json } from '@metamask/utils';\nimport { bufferToHex } from 'ethereumjs-util';\nimport EventEmitter from 'events';\nimport { cloneDeep } from 'lodash';\n\nconst controllerName = 'SignatureController';\n\nconst stateMetadata = {\n  unapprovedMsgs: { persist: false, anonymous: false },\n  unapprovedPersonalMsgs: { persist: false, anonymous: false },\n  unapprovedTypedMessages: { persist: false, anonymous: false },\n  unapprovedMsgCount: { persist: false, anonymous: false },\n  unapprovedPersonalMsgCount: { persist: false, anonymous: false },\n  unapprovedTypedMessagesCount: { persist: false, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  unapprovedMsgs: {},\n  unapprovedPersonalMsgs: {},\n  unapprovedTypedMessages: {},\n  unapprovedMsgCount: 0,\n  unapprovedPersonalMsgCount: 0,\n  unapprovedTypedMessagesCount: 0,\n});\n\ntype CoreMessage = AbstractMessage & {\n  messageParams: AbstractMessageParams;\n};\n\ntype StateMessage = Required<AbstractMessage> & {\n  msgParams: Required<AbstractMessageParams>;\n};\n\ntype SignatureControllerState = {\n  unapprovedMsgs: Record<string, StateMessage>;\n  unapprovedPersonalMsgs: Record<string, StateMessage>;\n  unapprovedTypedMessages: Record<string, StateMessage>;\n  unapprovedMsgCount: number;\n  unapprovedPersonalMsgCount: number;\n  unapprovedTypedMessagesCount: number;\n};\n\ntype AllowedActions =\n  | AddApprovalRequest\n  | KeyringControllerSignMessageAction\n  | KeyringControllerSignPersonalMessageAction\n  | KeyringControllerSignTypedMessageAction\n  | AddLog;\n\ntype TypedMessageSigningOptions = {\n  parseJsonData: boolean;\n};\n\nexport type GetSignatureState = ControllerGetStateAction<\n  typeof controllerName,\n  SignatureControllerState\n>;\n\nexport type SignatureStateChange = ControllerStateChangeEvent<\n  typeof controllerName,\n  SignatureControllerState\n>;\n\nexport type SignatureControllerActions = GetSignatureState;\n\nexport type SignatureControllerEvents = SignatureStateChange;\n\nexport type SignatureControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SignatureControllerActions | AllowedActions,\n  SignatureControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nexport type SignatureControllerOptions = {\n  messenger: SignatureControllerMessenger;\n  isEthSignEnabled: () => boolean;\n  getAllState: () => unknown;\n  securityProviderRequest?: (\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    requestData: any,\n    methodName: string,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => Promise<any>;\n  getCurrentChainId: () => Hex;\n};\n\n/**\n * Controller for creating signing requests requiring user approval.\n */\nexport class SignatureController extends BaseController<\n  typeof controllerName,\n  SignatureControllerState,\n  SignatureControllerMessenger\n> {\n  hub: EventEmitter;\n\n  #isEthSignEnabled: () => boolean;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  #getAllState: () => any;\n\n  #messageManager: MessageManager;\n\n  #personalMessageManager: PersonalMessageManager;\n\n  #typedMessageManager: TypedMessageManager;\n\n  /**\n   * Construct a Sign controller.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The restricted controller messenger for the sign controller.\n   * @param options.isEthSignEnabled - Callback to return true if eth_sign is enabled.\n   * @param options.getAllState - Callback to retrieve all user state.\n   * @param options.securityProviderRequest - A function for verifying a message, whether it is malicious or not.\n   * @param options.getCurrentChainId - A function for retrieving the current chainId.\n   */\n  constructor({\n    messenger,\n    isEthSignEnabled,\n    getAllState,\n    securityProviderRequest,\n    getCurrentChainId,\n  }: SignatureControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: getDefaultState(),\n    });\n\n    this.#isEthSignEnabled = isEthSignEnabled;\n    this.#getAllState = getAllState;\n\n    this.hub = new EventEmitter();\n    this.#messageManager = new MessageManager(\n      undefined,\n      undefined,\n      securityProviderRequest,\n    );\n    this.#personalMessageManager = new PersonalMessageManager(\n      undefined,\n      undefined,\n      securityProviderRequest,\n    );\n    this.#typedMessageManager = new TypedMessageManager(\n      undefined,\n      undefined,\n      securityProviderRequest,\n      undefined,\n      getCurrentChainId,\n    );\n\n    this.#handleMessageManagerEvents(this.#messageManager, 'unapprovedMessage');\n    this.#handleMessageManagerEvents(\n      this.#personalMessageManager,\n      'unapprovedPersonalMessage',\n    );\n    this.#handleMessageManagerEvents(\n      this.#typedMessageManager,\n      'unapprovedTypedMessage',\n    );\n\n    this.#subscribeToMessageState(\n      this.#messageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedMsgs = newMessages;\n        state.unapprovedMsgCount = messageCount;\n      },\n    );\n\n    this.#subscribeToMessageState(\n      this.#personalMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedPersonalMsgs = newMessages;\n        state.unapprovedPersonalMsgCount = messageCount;\n      },\n    );\n\n    this.#subscribeToMessageState(\n      this.#typedMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedTypedMessages = newMessages;\n        state.unapprovedTypedMessagesCount = messageCount;\n      },\n    );\n  }\n\n  /**\n   * A getter for the number of 'unapproved' Messages in this.messages.\n   *\n   * @returns The number of 'unapproved' Messages in this.messages\n   */\n  get unapprovedMsgCount(): number {\n    return this.#messageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for the number of 'unapproved' PersonalMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' PersonalMessages in this.messages\n   */\n  get unapprovedPersonalMessagesCount(): number {\n    return this.#personalMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for the number of 'unapproved' TypedMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' TypedMessages in this.messages\n   */\n  get unapprovedTypedMessagesCount(): number {\n    return this.#typedMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * A getter for returning all messages.\n   *\n   * @returns The object containing all messages.\n   */\n  get messages(): { [id: string]: Message | PersonalMessage | TypedMessage } {\n    const messages = [\n      ...this.#typedMessageManager.getAllMessages(),\n      ...this.#personalMessageManager.getAllMessages(),\n      ...this.#messageManager.getAllMessages(),\n    ];\n\n    const messagesObject = messages.reduce<{\n      [id: string]: Message | PersonalMessage | TypedMessage;\n    }>((acc, message) => {\n      acc[message.id] = message;\n      return acc;\n    }, {});\n\n    return messagesObject;\n  }\n\n  /**\n   * Reset the controller state to the initial state.\n   */\n  resetState() {\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Reject all unapproved messages of any type.\n   *\n   * @param reason - A message to indicate why.\n   */\n  rejectUnapproved(reason?: string) {\n    this.#rejectUnapproved(this.#messageManager, reason);\n    this.#rejectUnapproved(this.#personalMessageManager, reason);\n    this.#rejectUnapproved(this.#typedMessageManager, reason);\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.#clearUnapproved(this.#messageManager);\n    this.#clearUnapproved(this.#personalMessageManager);\n    this.#clearUnapproved(this.#typedMessageManager);\n  }\n\n  /**\n   * Called when a Dapp uses the eth_sign method, to request user approval.\n   * eth_sign is a pure signature of arbitrary data. It is on a deprecation\n   * path, since this data can be a transaction, or can leak private key\n   * information.\n   *\n   * @param messageParams - The params passed to eth_sign.\n   * @param [req] - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedMessage(\n    messageParams: MessageParams,\n    req: OriginalRequest,\n  ): Promise<string> {\n    return this.#newUnsignedAbstractMessage(\n      this.#messageManager,\n      ApprovalType.EthSign,\n      SigningMethod.EthSign,\n      'Message',\n      this.#signMessage.bind(this),\n      messageParams,\n      req,\n      this.#validateUnsignedMessage.bind(this),\n    );\n  }\n\n  /**\n   * Called when a dapp uses the personal_sign method.\n   * This is identical to the Geth eth_sign method, and may eventually replace\n   * eth_sign.\n   *\n   * We currently define our eth_sign and personal_sign mostly for legacy Dapps.\n   *\n   * @param messageParams - The params of the message to sign & return to the Dapp.\n   * @param req - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedPersonalMessage(\n    messageParams: PersonalMessageParams,\n    req: OriginalRequest,\n  ): Promise<string> {\n    return this.#newUnsignedAbstractMessage(\n      this.#personalMessageManager,\n      ApprovalType.PersonalSign,\n      SigningMethod.PersonalSign,\n      'Personal Message',\n      this.#signPersonalMessage.bind(this),\n      messageParams,\n      req,\n    );\n  }\n\n  /**\n   * Called when a dapp uses the eth_signTypedData method, per EIP 712.\n   *\n   * @param messageParams - The params passed to eth_signTypedData.\n   * @param req - The original request, containing the origin.\n   * @param version - The version indicating the format of the typed data.\n   * @param signingOpts - An options bag for signing.\n   * @param signingOpts.parseJsonData - Whether to parse the JSON before signing.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedTypedMessage(\n    messageParams: TypedMessageParams,\n    req: OriginalRequest,\n    version: string,\n    signingOpts: TypedMessageSigningOptions,\n  ): Promise<string> {\n    const signTypeForLogger = this.#getSignTypeForLogger(version);\n    return this.#newUnsignedAbstractMessage(\n      this.#typedMessageManager,\n      ApprovalType.EthSignTypedData,\n      signTypeForLogger,\n      'Typed Message',\n      this.#signTypedMessage.bind(this),\n      messageParams,\n      req,\n      undefined,\n      version,\n      signingOpts,\n    );\n  }\n\n  /**\n   * Called to update the message status as signed.\n   *\n   * @param messageId - The id of the Message to update.\n   * @param signature - The data to update the message with.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setDeferredSignSuccess(messageId: string, signature: any) {\n    this.#tryForEachMessageManager(\n      this.#trySetDeferredSignSuccess,\n      messageId,\n      signature,\n    );\n  }\n\n  /**\n   * Called when the message metadata needs to be updated.\n   *\n   * @param messageId - The id of the message to update.\n   * @param metadata - The data to update the metadata property in the message.\n   */\n  setMessageMetadata(messageId: string, metadata: Json) {\n    this.#tryForEachMessageManager(\n      this.#trySetMessageMetadata,\n      messageId,\n      metadata,\n    );\n  }\n\n  /**\n   * Called to cancel a signing message.\n   *\n   * @param messageId - The id of the Message to update.\n   */\n  setDeferredSignError(messageId: string) {\n    this.#tryForEachMessageManager(this.#trySetDeferredSignError, messageId);\n  }\n\n  setTypedMessageInProgress(messageId: string) {\n    this.#typedMessageManager.setMessageStatusInProgress(messageId);\n  }\n\n  setPersonalMessageInProgress(messageId: string) {\n    this.#personalMessageManager.setMessageStatusInProgress(messageId);\n  }\n\n  #validateUnsignedMessage(messageParams: MessageParamsMetamask): void {\n    if (!this.#isEthSignEnabled()) {\n      throw rpcErrors.methodNotFound(\n        'eth_sign has been disabled. You must enable it in the advanced settings',\n      );\n    }\n    const data = this.#normalizeMsgData(messageParams.data);\n    // 64 hex + \"0x\" at the beginning\n    // This is needed because Ethereum's EcSign works only on 32 byte numbers\n    // For 67 length see: https://github.com/MetaMask/metamask-extension/pull/12679/files#r749479607\n    if (data.length !== 66 && data.length !== 67) {\n      throw rpcErrors.invalidParams('eth_sign requires 32 byte message hash');\n    }\n  }\n\n  async #newUnsignedAbstractMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n    SO,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    approvalType: ApprovalType,\n    signTypeForLogger: SigningMethod,\n    messageName: string,\n    signMessage: (messageParams: PM, signingOpts?: SO) => void,\n    messageParams: PM,\n    req: OriginalRequest,\n    validateMessage?: (params: PM) => void,\n    version?: string,\n    signingOpts?: SO,\n  ) {\n    if (validateMessage) {\n      validateMessage(messageParams);\n    }\n\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    try {\n      const messageId = await messageManager.addUnapprovedMessage(\n        messageParams,\n        req,\n        version,\n      );\n\n      const messageParamsWithId = {\n        ...messageParams,\n        metamaskId: messageId,\n        ...(version && { version }),\n      };\n\n      const signaturePromise = messageManager.waitForFinishStatus(\n        messageParamsWithId,\n        messageName,\n      );\n\n      try {\n        // Signature request is proposed to the user\n        this.#addLog(\n          signTypeForLogger,\n          SigningStage.Proposed,\n          messageParamsWithId,\n        );\n\n        const acceptResult = await this.#requestApproval(\n          messageParamsWithId,\n          approvalType,\n        );\n\n        resultCallbacks = acceptResult.resultCallbacks;\n      } catch {\n        // User rejected the signature request\n        this.#addLog(\n          signTypeForLogger,\n          SigningStage.Rejected,\n          messageParamsWithId,\n        );\n\n        this.#cancelAbstractMessage(messageManager, messageId);\n        throw providerErrors.userRejectedRequest('User rejected the request.');\n      }\n\n      await signMessage(messageParamsWithId, signingOpts);\n\n      const signatureResult = await signaturePromise;\n\n      // Signature operation is completed\n      this.#addLog(signTypeForLogger, SigningStage.Signed, messageParamsWithId);\n\n      /* istanbul ignore next */\n      resultCallbacks?.success(signatureResult);\n\n      return signatureResult;\n    } catch (error) {\n      resultCallbacks?.error(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Signifies user intent to complete an eth_sign method.\n   *\n   * @param msgParams - The params passed to eth_call.\n   * @returns Signature result from signing.\n   */\n  async #signMessage(msgParams: MessageParamsMetamask) {\n    return await this.#signAbstractMessage(\n      this.#messageManager,\n      ApprovalType.EthSign,\n      msgParams,\n      async (cleanMsgParams) =>\n        await this.messagingSystem.call(\n          'KeyringController:signMessage',\n          cleanMsgParams,\n        ),\n    );\n  }\n\n  /**\n   * Signifies a user's approval to sign a personal_sign message in queue.\n   * Triggers signing, and the callback function from newUnsignedPersonalMessage.\n   *\n   * @param msgParams - The params of the message to sign & return to the Dapp.\n   * @returns Signature result from signing.\n   */\n  async #signPersonalMessage(msgParams: PersonalMessageParamsMetamask) {\n    return await this.#signAbstractMessage(\n      this.#personalMessageManager,\n      ApprovalType.PersonalSign,\n      msgParams,\n      async (cleanMsgParams) =>\n        await this.messagingSystem.call(\n          'KeyringController:signPersonalMessage',\n          cleanMsgParams,\n        ),\n    );\n  }\n\n  /**\n   * The method for a user approving a call to eth_signTypedData, per EIP 712.\n   * Triggers the callback in newUnsignedTypedMessage.\n   *\n   * @param msgParams - The params passed to eth_signTypedData.\n   * @param opts - The options for the method.\n   * @param opts.parseJsonData - Whether to parse JSON data before calling the KeyringController.\n   * @returns Signature result from signing.\n   */\n  async #signTypedMessage(\n    msgParams: TypedMessageParamsMetamask,\n    /* istanbul ignore next */\n    opts = { parseJsonData: true },\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    const { version } = msgParams;\n    return await this.#signAbstractMessage(\n      this.#typedMessageManager,\n      ApprovalType.EthSignTypedData,\n      msgParams,\n      async (cleanMsgParams) => {\n        const finalMessageParams = opts.parseJsonData\n          ? this.#removeJsonData(cleanMsgParams, version as string)\n          : cleanMsgParams;\n\n        return await this.messagingSystem.call(\n          'KeyringController:signTypedMessage',\n          finalMessageParams,\n          version as SignTypedDataVersion,\n        );\n      },\n    );\n  }\n\n  #tryForEachMessageManager(\n    callbackFn: (\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      messageManager: AbstractMessageManager<any, any, any>,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ...args: any[]\n    ) => boolean,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ...args: any\n  ) {\n    const messageManagers = [\n      this.#messageManager,\n      this.#personalMessageManager,\n      this.#typedMessageManager,\n    ];\n\n    for (const manager of messageManagers) {\n      if (callbackFn(manager, ...args)) {\n        return true;\n      }\n    }\n    throw new Error('Message not found');\n  }\n\n  #trySetDeferredSignSuccess(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageManager: AbstractMessageManager<any, any, any>,\n    messageId: string,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    signature: any,\n  ) {\n    try {\n      messageManager.setMessageStatusSigned(messageId, signature);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  #trySetMessageMetadata(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageManager: AbstractMessageManager<any, any, any>,\n    messageId: string,\n    metadata: Json,\n  ) {\n    try {\n      messageManager.setMetadata(messageId, metadata);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  #trySetDeferredSignError(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    messageManager: AbstractMessageManager<any, any, any>,\n    messageId: string,\n  ) {\n    try {\n      messageManager.rejectMessage(messageId);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  #rejectUnapproved<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>, reason?: string) {\n    Object.keys(messageManager.getUnapprovedMessages()).forEach((messageId) => {\n      this.#cancelAbstractMessage(messageManager, messageId, reason);\n    });\n  }\n\n  #clearUnapproved<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>) {\n    messageManager.update({\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    });\n  }\n\n  async #signAbstractMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    methodName: string,\n    msgParams: PM,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getSignature: (cleanMessageParams: P) => Promise<any>,\n  ) {\n    console.info(`MetaMaskController - ${methodName}`);\n\n    const messageId = msgParams.metamaskId as string;\n\n    try {\n      const cleanMessageParams = await messageManager.approveMessage(msgParams);\n\n      try {\n        const signature = await getSignature(cleanMessageParams);\n\n        this.hub.emit(`${methodName}:signed`, { signature, messageId });\n\n        if (!cleanMessageParams.deferSetAsSigned) {\n          messageManager.setMessageStatusSigned(messageId, signature);\n        }\n\n        return signature;\n      } catch (error) {\n        this.hub.emit(`${messageId}:signError`, { error });\n        throw error;\n      }\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      console.info(`MetaMaskController - ${methodName} failed.`, error);\n      this.#errorMessage(messageManager, messageId, error.message);\n      throw error;\n    }\n  }\n\n  #errorMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    messageId: string,\n    error: string,\n  ) {\n    if (messageManager instanceof TypedMessageManager) {\n      messageManager.setMessageStatusErrored(messageId, error);\n    } else {\n      this.#cancelAbstractMessage(messageManager, messageId);\n    }\n  }\n\n  #cancelAbstractMessage<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    messageId: string,\n    reason?: string,\n  ) {\n    if (reason) {\n      const message = this.#getMessage(messageId);\n      this.hub.emit('cancelWithReason', { message, reason });\n    }\n    messageManager.rejectMessage(messageId);\n  }\n\n  #handleMessageManagerEvents<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(messageManager: AbstractMessageManager<M, P, PM>, eventName: string) {\n    messageManager.hub.on('updateBadge', () => {\n      this.hub.emit('updateBadge');\n    });\n\n    messageManager.hub.on(\n      'unapprovedMessage',\n      (msgParams: AbstractMessageParamsMetamask) => {\n        this.hub.emit(eventName, msgParams);\n      },\n    );\n  }\n\n  #subscribeToMessageState<\n    M extends AbstractMessage,\n    P extends AbstractMessageParams,\n    PM extends AbstractMessageParamsMetamask,\n  >(\n    messageManager: AbstractMessageManager<M, P, PM>,\n    updateState: (\n      state: SignatureControllerState,\n      newMessages: Record<string, StateMessage>,\n      messageCount: number,\n    ) => void,\n  ) {\n    messageManager.subscribe((state: MessageManagerState<AbstractMessage>) => {\n      const newMessages = this.#migrateMessages(\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        state.unapprovedMessages as any,\n      );\n\n      this.update(() => {\n        const newState = { ...this.state };\n        updateState(newState, newMessages, state.unapprovedMessagesCount);\n        return newState;\n      });\n    });\n  }\n\n  #migrateMessages(\n    coreMessages: Record<string, CoreMessage>,\n  ): Record<string, StateMessage> {\n    const stateMessages: Record<string, StateMessage> = {};\n\n    for (const messageId of Object.keys(coreMessages)) {\n      const coreMessage = coreMessages[messageId];\n      const stateMessage = this.#migrateMessage(coreMessage);\n\n      stateMessages[messageId] = stateMessage;\n    }\n\n    return stateMessages;\n  }\n\n  #migrateMessage(coreMessage: CoreMessage): StateMessage {\n    const { messageParams, ...coreMessageData } = coreMessage;\n\n    // Core message managers use messageParams but frontend uses msgParams with lots of references\n    const stateMessage = {\n      ...coreMessageData,\n      msgParams: messageParams,\n    };\n\n    return stateMessage as StateMessage;\n  }\n\n  #normalizeMsgData(data: string) {\n    if (data.startsWith('0x')) {\n      // data is already hex\n      return data;\n    }\n    // data is unicode, convert to hex\n    return bufferToHex(Buffer.from(data, 'utf8'));\n  }\n\n  #getMessage(messageId: string): StateMessage {\n    return {\n      ...this.state.unapprovedMsgs,\n      ...this.state.unapprovedPersonalMsgs,\n      ...this.state.unapprovedTypedMessages,\n    }[messageId];\n  }\n\n  async #requestApproval(\n    msgParams: AbstractMessageParamsMetamask,\n    type: ApprovalType,\n  ): Promise<AddResult> {\n    const id = msgParams.metamaskId as string;\n    const origin = msgParams.origin || ORIGIN_METAMASK;\n\n    // We are explicitly cloning the message params here to prevent the mutation errors on development mode\n    // Because sending it through the messaging system will make the object read only\n    const clonedMsgParams = cloneDeep(msgParams);\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin,\n        type,\n        requestData: clonedMsgParams as Required<AbstractMessageParamsMetamask>,\n        expectsResult: true,\n      },\n      true,\n    )) as Promise<AddResult>;\n  }\n\n  #removeJsonData(\n    messageParams: TypedMessageParams,\n    version: string,\n  ): TypedMessageParams {\n    if (version === 'V1' || typeof messageParams.data !== 'string') {\n      return messageParams;\n    }\n\n    return {\n      ...messageParams,\n      data: JSON.parse(messageParams.data),\n    };\n  }\n\n  #addLog(\n    signingMethod: SigningMethod,\n    stage: SigningStage,\n    signingData: AbstractMessageParamsMetamask,\n  ): void {\n    this.messagingSystem.call('LoggingController:add', {\n      type: LogType.EthSignLog,\n      data: {\n        signingMethod,\n        stage,\n        signingData,\n      },\n    });\n  }\n\n  #getSignTypeForLogger(version: string): SigningMethod {\n    let signTypeForLogger = SigningMethod.EthSignTypedData;\n    if (version === 'V3') {\n      signTypeForLogger = SigningMethod.EthSignTypedDataV3;\n    } else if (version === 'V4') {\n      signTypeForLogger = SigningMethod.EthSignTypedDataV4;\n    }\n    return signTypeForLogger;\n  }\n}\n"]}