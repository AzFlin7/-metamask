{"version":3,"sources":["../src/fetchGasEstimatesViaEthFeeHistory.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,SAAS,YAAY;AAErB,SAAS,eAAe;AAyBxB,eAAO,kCACL,UAC0B;AAC1B,QAAM,cAAc,MAAM,iBAAiB,QAAQ;AACnD,QAAM,SAAS,MAAM,qBAAqB;AAAA,IACxC;AAAA,IACA,UAAU,YAAY;AAAA,IACtB,gBAAgB;AAAA,IAChB,aAAa,CAAC,IAAI,IAAI,EAAE;AAAA,EAC1B,CAAC;AACD,QAAM,mBAAmB,QAAQ,YAAY,eAAe,IAAI;AAEhE,QAAM,yBACJ,0CAA0C,MAAM;AAElD,SAAO;AAAA,IACL,GAAG;AAAA,IACH;AAAA,IACA,wBAAwB;AAAA,IACxB,cAAc;AAAA,IACd,wBAAwB;AAAA,IACxB,4BAA4B;AAAA,IAC5B,kBAAkB;AAAA,IAClB,mBAAmB;AAAA,EACrB;AACF","sourcesContent":["import { GWEI } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { fromWei } from '@metamask/ethjs-unit';\n\nimport fetchBlockFeeHistory from './fetchBlockFeeHistory';\nimport calculateGasFeeEstimatesForPriorityLevels from './fetchGasEstimatesViaEthFeeHistory/calculateGasFeeEstimatesForPriorityLevels';\nimport fetchLatestBlock from './fetchGasEstimatesViaEthFeeHistory/fetchLatestBlock';\nimport type { GasFeeEstimates } from './GasFeeController';\n\n/**\n * Generates gas fee estimates based on gas fees that have been used in the recent past so that\n * those estimates can be displayed to users.\n *\n * To produce the estimates, the last 5 blocks are read from the network, and for each block, the\n * priority fees for transactions at the 10th, 20th, and 30th percentiles are also read (here\n * \"percentile\" signifies the level at which those transactions contribute to the overall gas used\n * for the block, where higher percentiles correspond to higher fees). This information is used to\n * calculate reasonable max priority and max fees for three different priority levels (higher\n * priority = higher fee).\n *\n * Note that properties are returned for other data that are normally obtained via the API; however,\n * to prevent extra requests to Infura, these properties are empty.\n *\n * @param ethQuery - An EthQuery instance.\n * @returns Base and priority fee estimates, categorized by priority level, as well as an estimate\n * for the next block's base fee.\n */\nexport default async function fetchGasEstimatesViaEthFeeHistory(\n  ethQuery: EthQuery,\n): Promise<GasFeeEstimates> {\n  const latestBlock = await fetchLatestBlock(ethQuery);\n  const blocks = await fetchBlockFeeHistory({\n    ethQuery,\n    endBlock: latestBlock.number,\n    numberOfBlocks: 5,\n    percentiles: [10, 20, 30],\n  });\n  const estimatedBaseFee = fromWei(latestBlock.baseFeePerGas, GWEI);\n\n  const levelSpecificEstimates =\n    calculateGasFeeEstimatesForPriorityLevels(blocks);\n\n  return {\n    ...levelSpecificEstimates,\n    estimatedBaseFee,\n    historicalBaseFeeRange: null,\n    baseFeeTrend: null,\n    latestPriorityFeeRange: null,\n    historicalPriorityFeeRange: null,\n    priorityFeeTrend: null,\n    networkCongestion: null,\n  };\n}\n"]}