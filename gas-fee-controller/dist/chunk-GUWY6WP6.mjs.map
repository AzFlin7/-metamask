{"version":3,"sources":["../src/fetchGasEstimatesViaEthFeeHistory/calculateGasFeeEstimatesForPriorityLevels.ts"],"sourcesContent":["import { GWEI } from '@metamask/controller-utils';\nimport { fromWei } from '@metamask/ethjs-unit';\nimport BN from 'bn.js';\n\nimport type { FeeHistoryBlock } from '../fetchBlockFeeHistory';\nimport type { Eip1559GasFee, GasFeeEstimates } from '../GasFeeController';\nimport medianOf from './medianOf';\n\nexport type PriorityLevel = (typeof PRIORITY_LEVELS)[number];\nexport type Percentile = (typeof PRIORITY_LEVEL_PERCENTILES)[number];\n\nconst PRIORITY_LEVELS = ['low', 'medium', 'high'] as const;\nconst PRIORITY_LEVEL_PERCENTILES = [10, 20, 30] as const;\nconst SETTINGS_BY_PRIORITY_LEVEL = {\n  low: {\n    percentile: 10 as Percentile,\n    baseFeePercentageMultiplier: new BN(110),\n    priorityFeePercentageMultiplier: new BN(94),\n    minSuggestedMaxPriorityFeePerGas: new BN(1_000_000_000),\n    estimatedWaitTimes: {\n      minWaitTimeEstimate: 15_000,\n      maxWaitTimeEstimate: 30_000,\n    },\n  },\n  medium: {\n    percentile: 20 as Percentile,\n    baseFeePercentageMultiplier: new BN(120),\n    priorityFeePercentageMultiplier: new BN(97),\n    minSuggestedMaxPriorityFeePerGas: new BN(1_500_000_000),\n    estimatedWaitTimes: {\n      minWaitTimeEstimate: 15_000,\n      maxWaitTimeEstimate: 45_000,\n    },\n  },\n  high: {\n    percentile: 30 as Percentile,\n    baseFeePercentageMultiplier: new BN(125),\n    priorityFeePercentageMultiplier: new BN(98),\n    minSuggestedMaxPriorityFeePerGas: new BN(2_000_000_000),\n    estimatedWaitTimes: {\n      minWaitTimeEstimate: 15_000,\n      maxWaitTimeEstimate: 60_000,\n    },\n  },\n};\n\n/**\n * Calculates a set of estimates assigned to a particular priority level based on the data returned\n * by `eth_feeHistory`.\n *\n * @param priorityLevel - The level of fees that dictates how soon a transaction may go through\n * (\"low\", \"medium\", or \"high\").\n * @param blocks - A set of blocks as obtained from {@link fetchBlockFeeHistory}.\n * @returns The estimates.\n */\nfunction calculateEstimatesForPriorityLevel(\n  priorityLevel: PriorityLevel,\n  blocks: FeeHistoryBlock<Percentile>[],\n): Eip1559GasFee {\n  const settings = SETTINGS_BY_PRIORITY_LEVEL[priorityLevel];\n\n  const latestBaseFeePerGas = blocks[blocks.length - 1].baseFeePerGas;\n\n  const adjustedBaseFee = latestBaseFeePerGas\n    .mul(settings.baseFeePercentageMultiplier)\n    .divn(100);\n  const priorityFees = blocks\n    .map((block) => {\n      return 'priorityFeesByPercentile' in block\n        ? block.priorityFeesByPercentile[settings.percentile]\n        : null;\n    })\n    .filter(BN.isBN);\n  const medianPriorityFee = medianOf(priorityFees);\n  const adjustedPriorityFee = medianPriorityFee\n    .mul(settings.priorityFeePercentageMultiplier)\n    .divn(100);\n\n  const suggestedMaxPriorityFeePerGas = BN.max(\n    adjustedPriorityFee,\n    settings.minSuggestedMaxPriorityFeePerGas,\n  );\n  const suggestedMaxFeePerGas = adjustedBaseFee.add(\n    suggestedMaxPriorityFeePerGas,\n  );\n\n  return {\n    ...settings.estimatedWaitTimes,\n    suggestedMaxPriorityFeePerGas: fromWei(suggestedMaxPriorityFeePerGas, GWEI),\n    suggestedMaxFeePerGas: fromWei(suggestedMaxFeePerGas, GWEI),\n  };\n}\n\n/**\n * Calculates a set of estimates suitable for different priority levels based on the data returned\n * by `eth_feeHistory`.\n *\n * @param blocks - A set of blocks populated with data for priority fee percentiles 10, 20, and 30,\n * obtained via {@link BlockFeeHistoryDatasetFetcher}.\n * @returns The estimates.\n */\nexport default function calculateGasFeeEstimatesForPriorityLevels(\n  blocks: FeeHistoryBlock<Percentile>[],\n): Pick<GasFeeEstimates, PriorityLevel> {\n  return PRIORITY_LEVELS.reduce((obj, priorityLevel) => {\n    const gasEstimatesForPriorityLevel = calculateEstimatesForPriorityLevel(\n      priorityLevel,\n      blocks,\n    );\n    return { ...obj, [priorityLevel]: gasEstimatesForPriorityLevel };\n  }, {} as Pick<GasFeeEstimates, PriorityLevel>);\n}\n"],"mappings":";;;;;AAAA,SAAS,YAAY;AACrB,SAAS,eAAe;AACxB,OAAO,QAAQ;AASf,IAAM,kBAAkB,CAAC,OAAO,UAAU,MAAM;AAEhD,IAAM,6BAA6B;AAAA,EACjC,KAAK;AAAA,IACH,YAAY;AAAA,IACZ,6BAA6B,IAAI,GAAG,GAAG;AAAA,IACvC,iCAAiC,IAAI,GAAG,EAAE;AAAA,IAC1C,kCAAkC,IAAI,GAAG,GAAa;AAAA,IACtD,oBAAoB;AAAA,MAClB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,IACvB;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,YAAY;AAAA,IACZ,6BAA6B,IAAI,GAAG,GAAG;AAAA,IACvC,iCAAiC,IAAI,GAAG,EAAE;AAAA,IAC1C,kCAAkC,IAAI,GAAG,IAAa;AAAA,IACtD,oBAAoB;AAAA,MAClB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,IACvB;AAAA,EACF;AAAA,EACA,MAAM;AAAA,IACJ,YAAY;AAAA,IACZ,6BAA6B,IAAI,GAAG,GAAG;AAAA,IACvC,iCAAiC,IAAI,GAAG,EAAE;AAAA,IAC1C,kCAAkC,IAAI,GAAG,GAAa;AAAA,IACtD,oBAAoB;AAAA,MAClB,qBAAqB;AAAA,MACrB,qBAAqB;AAAA,IACvB;AAAA,EACF;AACF;AAWA,SAAS,mCACP,eACA,QACe;AACf,QAAM,WAAW,2BAA2B,aAAa;AAEzD,QAAM,sBAAsB,OAAO,OAAO,SAAS,CAAC,EAAE;AAEtD,QAAM,kBAAkB,oBACrB,IAAI,SAAS,2BAA2B,EACxC,KAAK,GAAG;AACX,QAAM,eAAe,OAClB,IAAI,CAAC,UAAU;AACd,WAAO,8BAA8B,QACjC,MAAM,yBAAyB,SAAS,UAAU,IAClD;AAAA,EACN,CAAC,EACA,OAAO,GAAG,IAAI;AACjB,QAAM,oBAAoB,SAAS,YAAY;AAC/C,QAAM,sBAAsB,kBACzB,IAAI,SAAS,+BAA+B,EAC5C,KAAK,GAAG;AAEX,QAAM,gCAAgC,GAAG;AAAA,IACvC;AAAA,IACA,SAAS;AAAA,EACX;AACA,QAAM,wBAAwB,gBAAgB;AAAA,IAC5C;AAAA,EACF;AAEA,SAAO;AAAA,IACL,GAAG,SAAS;AAAA,IACZ,+BAA+B,QAAQ,+BAA+B,IAAI;AAAA,IAC1E,uBAAuB,QAAQ,uBAAuB,IAAI;AAAA,EAC5D;AACF;AAUe,SAAR,0CACL,QACsC;AACtC,SAAO,gBAAgB,OAAO,CAAC,KAAK,kBAAkB;AACpD,UAAM,+BAA+B;AAAA,MACnC;AAAA,MACA;AAAA,IACF;AACA,WAAO,EAAE,GAAG,KAAK,CAAC,aAAa,GAAG,6BAA6B;AAAA,EACjE,GAAG,CAAC,CAAyC;AAC/C;","names":[]}