{"version":3,"sources":["../src/fetchGasEstimatesViaEthFeeHistory/fetchLatestBlock.ts"],"names":[],"mappings":";AAAA,SAAS,OAAO,eAAe;AAa/B,eAAO,iBACL,UACA,6BAA6B,OACV;AACnB,QAAM,cAAc,MAAM,MAAM,UAAU,aAAa;AACvD,QAAM,QAAQ,MAAM,MAAM,UAAU,oBAAoB;AAAA,IACtD;AAAA,IACA;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,GAAG;AAAA,IACH,QAAQ,QAAQ,MAAM,MAAM;AAAA,IAC5B,eAAe,QAAQ,MAAM,aAAa;AAAA,EAC5C;AACF","sourcesContent":["import { query, fromHex } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\n\nimport type { EthBlock } from './types';\n\n/**\n * Returns information about the latest completed block.\n *\n * @param ethQuery - An EthQuery instance\n * @param includeFullTransactionData - Whether or not to include all data for transactions as\n * opposed to merely hashes. False by default.\n * @returns The block.\n */\nexport default async function fetchLatestBlock(\n  ethQuery: EthQuery,\n  includeFullTransactionData = false,\n): Promise<EthBlock> {\n  const blockNumber = await query(ethQuery, 'blockNumber');\n  const block = await query(ethQuery, 'getBlockByNumber', [\n    blockNumber,\n    includeFullTransactionData,\n  ]);\n  return {\n    ...block,\n    number: fromHex(block.number),\n    baseFeePerGas: fromHex(block.baseFeePerGas),\n  };\n}\n"]}