{"version":3,"file":"ppom-controller.js","sourceRoot":"","sources":["../src/ppom-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseControllerV2 } from '@metamask/base-controller';\nimport { safelyExecute, timeoutFetch } from '@metamask/controller-utils';\nimport type {\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  Provider,\n} from '@metamask/network-controller';\nimport type {\n  JsonRpcFailure,\n  Json,\n  JsonRpcParams,\n  JsonRpcSuccess,\n} from '@metamask/utils';\nimport { Mutex } from 'await-semaphore';\n\nimport type {\n  StorageBackend,\n  FileMetadataList,\n  FileMetadata,\n} from './ppom-storage';\nimport { PPOMStorage } from './ppom-storage';\nimport {\n  addHexPrefix,\n  blockaidValidationSupportedForNetwork,\n  checkFilePath,\n  constructURLHref,\n  createPayload,\n  IdGenerator,\n  PROVIDER_ERRORS,\n  validateSignature,\n} from './util';\n\nconst PROVIDER_REQUEST_LIMIT = 300;\nexport const NETWORK_CACHE_DURATION = 1000 * 60 * 60 * 24 * 7;\n\n// The following methods on provider are allowed to PPOM\nconst ALLOWED_PROVIDER_CALLS = [\n  'eth_call',\n  'eth_blockNumber',\n  'eth_createAccessList',\n  'eth_getLogs',\n  'eth_getFilterLogs',\n  'eth_getTransactionByHash',\n  'eth_chainId',\n  'eth_getBlockByHash',\n  'eth_getBlockByNumber',\n  'eth_getCode',\n  'eth_getStorageAt',\n  'eth_getBalance',\n  'eth_getTransactionCount',\n  'trace_call',\n  'trace_callMany',\n  'debug_traceCall',\n  'trace_filter',\n];\n\ntype SecurityAlertResponse = {\n  reason: string;\n  features?: string[];\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  result_type: string;\n  providerRequestsCount?: Record<string, number>;\n  securityAlertId?: string;\n};\n\n// Provisional skeleton type for PPOM class\n// TODO: Replace with actual PPOM class\ntype PPOM = {\n  new: (...args: unknown[]) => PPOM;\n  validateJsonRpc: (\n    request: Record<string, unknown>,\n  ) => Promise<SecurityAlertResponse>;\n  free: () => void;\n} & Record<string, unknown>;\n\n/**\n * @type PPOMFileVersion\n * @augments FileMetadata\n * @property filePath - Path of the file in CDN.\n */\ntype PPOMFileVersion = FileMetadata & {\n  filePath: string;\n  hashSignature: string;\n};\n\n/**\n * @type PPOMVersionResponse - array of objects of type PPOMFileVersion\n */\ntype PPOMVersionResponse = PPOMFileVersion[];\n\nexport type NativeCrypto = {\n  createHash: (str: string) => {\n    update: (ab: ArrayBuffer) => {\n      digest: (str: string) => string;\n    };\n  };\n};\n\n/**\n * @type PPOMState\n *\n * Controller state\n * @property chainId - ID of current chain.\n * @property versionInfo - Version information fetched from CDN.\n * @property storageMetadata - Metadata of files storaged in storage.\n */\nexport type PPOMState = {\n  // version information obtained from version info file\n  versionInfo: PPOMVersionResponse;\n  // storage metadat of files already present in the storage\n  storageMetadata: FileMetadataList;\n  // ETag obtained using HEAD request on version file\n  versionFileETag?: string;\n};\n\nconst stateMetaData = {\n  versionInfo: { persist: true, anonymous: false },\n  storageMetadata: { persist: true, anonymous: false },\n  versionFileETag: { persist: true, anonymous: false },\n};\n\nconst PPOM_VERSION_FILE_NAME = 'ppom_version.json';\nconst controllerName = 'PPOMController';\nconst versionInfoFileHeaders = {\n  headers: {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'Content-Type': 'application/json',\n  },\n};\n\nexport type UsePPOM = {\n  type: `${typeof controllerName}:usePPOM`;\n  handler: (callback: (ppom: PPOM) => Promise<unknown>) => Promise<unknown>;\n};\n\nexport type PPOMControllerActions = UsePPOM;\n\nexport type PPOMControllerEvents = NetworkControllerStateChangeEvent;\n\nexport type PPOMControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  PPOMControllerActions,\n  NetworkControllerStateChangeEvent,\n  never,\n  NetworkControllerStateChangeEvent['type']\n>;\n\n// eslint-disable-next-line  @typescript-eslint/naming-convention\ntype PPOMProvider = {\n  ppomInit: (wasmFilePath: string) => Promise<void>;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  PPOM: PPOM;\n};\n\n/**\n * PPOMController\n * Controller responsible for managing the PPOM\n *\n * @property config - The controller configuration\n * @property state - The controller state\n * @property storage - The controller storage\n * @property ppom - The PPOM instance\n * @property provider - The provider used to create the PPOM instance\n */\nexport class PPOMController extends BaseControllerV2<\n  typeof controllerName,\n  PPOMState,\n  PPOMControllerMessenger\n> {\n  #ppom: PPOM | undefined;\n\n  #provider: Provider;\n\n  #storage: PPOMStorage;\n\n  /*\n   * This mutex is used to prevent concurrent usage of the PPOM instance\n   * and protect the PPOM instance from being used while it is being initialized/updated\n   */\n  #ppomMutex: Mutex;\n\n  #ppomProvider: PPOMProvider;\n\n  // base URL of the CDN\n  #cdnBaseUrl: string;\n\n  // Limit of number of requests ppom can send to the provider per transaction\n  #providerRequestLimit: number;\n\n  // Number of requests sent to provider by ppom for current transaction\n  #providerRequests = 0;\n\n  // id of current chain selected\n  #chainId: string;\n\n  // true if user has enabled preference for blockaid security check\n  #securityAlertsEnabled: boolean;\n\n  // Map of count of each provider request call\n  #providerRequestsCount: Record<string, number> = {};\n\n  #blockaidPublicKey: string;\n\n  #ppomInitialised = false;\n\n  #nativeCrypto: NativeCrypto | undefined = undefined;\n\n  /**\n   * Creates a PPOMController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.chainId - ChainId of the selected network.\n   * @param options.messenger - Controller messenger.\n   * @param options.provider - The provider used to create the PPOM instance.\n   * @param options.storageBackend - The storage backend to use for storing PPOM data.\n   * @param options.securityAlertsEnabled - True if user has enabled preference for blockaid security check.\n   * @param options.onPreferencesChange - Callback invoked when user changes preferences.\n   * @param options.ppomProvider - Object wrapping PPOM.\n   * @param options.cdnBaseUrl - Base URL for the CDN.\n   * @param options.providerRequestLimit - Limit of number of requests that can be sent to provider per transaction.\n   * @param options.dataUpdateDuration - Duration after which data is fetched again.\n   * @param options.fileFetchScheduleDuration - Duration after which next data file is fetched.\n   * @param options.state - Initial state of the controller.\n   * @param options.blockaidPublicKey - Public key of blockaid for verifying signatures of data files.\n   * @param options.nativeCrypto - Native implementation of crypto hashing function.\n   * This is useful to leverage faster native crypto implementation on devices.\n   * @returns The PPOMController instance.\n   */\n  constructor({\n    chainId,\n    messenger,\n    provider,\n    storageBackend,\n    securityAlertsEnabled,\n    onPreferencesChange,\n    ppomProvider,\n    cdnBaseUrl,\n    providerRequestLimit,\n    state,\n    blockaidPublicKey,\n    nativeCrypto,\n  }: {\n    chainId: string;\n    messenger: PPOMControllerMessenger;\n    provider: Provider;\n    storageBackend: StorageBackend;\n    securityAlertsEnabled: boolean;\n    onPreferencesChange: (\n      callback: (\n        // TOOD: Replace with `PreferencesState` from `@metamask/preferences-controller`\n        preferencesState: { securityAlertsEnabled: boolean } & Record<\n          string,\n          Json\n        >,\n      ) => void,\n    ) => void;\n    ppomProvider: PPOMProvider;\n    cdnBaseUrl: string;\n    providerRequestLimit?: number;\n    dataUpdateDuration?: number;\n    fileFetchScheduleDuration?: number;\n    state?: PPOMState;\n    blockaidPublicKey: string;\n    nativeCrypto?: NativeCrypto;\n  }) {\n    const initialState = {\n      versionInfo: state?.versionInfo ?? [],\n      storageMetadata: state?.storageMetadata ?? [],\n      versionFileETag: state?.versionFileETag ?? '',\n    };\n    super({\n      name: controllerName,\n      metadata: stateMetaData,\n      messenger,\n      state: initialState,\n    });\n\n    this.#chainId = addHexPrefix(chainId);\n    this.#provider = provider;\n    this.#ppomProvider = ppomProvider;\n    this.#storage = new PPOMStorage({\n      storageBackend,\n      readMetadata: () => {\n        return [...this.state.storageMetadata];\n      },\n      writeMetadata: (metadata) => {\n        this.update((draftState) => {\n          draftState.storageMetadata = metadata;\n        });\n      },\n    });\n    this.#ppomMutex = new Mutex();\n    this.#cdnBaseUrl = cdnBaseUrl;\n    this.#providerRequestLimit = providerRequestLimit ?? PROVIDER_REQUEST_LIMIT;\n    this.#securityAlertsEnabled = securityAlertsEnabled;\n    this.#blockaidPublicKey = blockaidPublicKey;\n    this.#nativeCrypto = nativeCrypto;\n\n    // enable / disable PPOM validations as user changes preferences\n    onPreferencesChange(this.#onPreferenceChange.bind(this));\n\n    // register message handlers\n    this.#registerMessageHandlers();\n\n    // subscribe to events\n    this.#subscribeMessageEvents();\n  }\n\n  /**\n   * Use the PPOM.\n   * This function receives a callback that will be called with the PPOM.\n   *\n   * @param callback - Callback to be invoked with PPOM.\n   */\n  async usePPOM<Type>(\n    callback: (ppom: PPOM) => Promise<Type>,\n  ): Promise<Type & { providerRequestsCount: Record<string, number> }> {\n    if (!this.#securityAlertsEnabled) {\n      throw Error('User has securityAlertsEnabled set to false');\n    }\n    if (!blockaidValidationSupportedForNetwork(this.#chainId)) {\n      throw Error(\n        `Blockaid validation not available on network with chainId: ${\n          this.#chainId\n        }`,\n      );\n    }\n    return await this.#ppomMutex.use(async () => {\n      await this.#initPPOMIfRequired();\n\n      this.#providerRequests = 0;\n      this.#providerRequestsCount = {};\n\n      // `this.#ppom` is defined in `#initPPOMIfRequired`\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const result = await callback(this.#ppom!);\n\n      return {\n        ...result,\n        // we are destructuring the object below as this will be used outside the controller\n        // we want to avoid possibility of outside code changing an instance variable.\n        providerRequestsCount: { ...this.#providerRequestsCount },\n      };\n    });\n  }\n\n  /*\n   * Initialise PPOM loading wasm file.\n   * This is done only if user has enabled preference for PPOM Validation.\n   * Initialisation is done as soon as controller is constructed\n   * or as user enables preference for blockaid validation.\n   */\n  async #initialisePPOM() {\n    if (this.#securityAlertsEnabled && !this.#ppomInitialised) {\n      const { ppomInit } = this.#ppomProvider;\n      await ppomInit('./ppom_bg.wasm');\n      this.#ppomInitialised = true;\n    }\n  }\n\n  /*\n   * The function resets the controller to inactive state.\n   * This is invoked when user disables blockaid preference.\n   * 1. reset the PPOM\n   * 2. clear data fetch intervals\n   * 3. clears version information of data files\n   */\n  #resetToInactiveState() {\n    this.#resetPPOM().catch((error: Error) => {\n      console.error(`Error in resetting ppom: ${error.message}`);\n    });\n    const { storageMetadata } = this.state;\n    this.update((draftState) => {\n      draftState.versionInfo = [];\n      draftState.storageMetadata = [];\n      draftState.versionFileETag = '';\n    });\n    this.#storage.deleteAllFiles(storageMetadata).catch((error: Error) => {\n      console.error(`Error in deleting files: ${error.message}`);\n    });\n  }\n\n  /*\n   * The function is invoked on network change, it does following:\n   * 1. update instance value this.#chainid\n   * 2. reset PPOM\n   */\n  #onNetworkChange(networkControllerState: NetworkState): void {\n    const id = addHexPrefix(networkControllerState.providerConfig.chainId);\n    if (id === this.#chainId) {\n      return;\n    }\n    this.#chainId = id;\n    this.#resetPPOM().catch((error: Error) => {\n      console.error(`Error in resetting ppom: ${error.message}`);\n    });\n  }\n\n  /*\n   * enable / disable PPOM validations as user changes preferences\n   */\n  #onPreferenceChange(\n    // TOOD: Replace with `PreferencesState` from `@metamask/preferences-controller`\n    preferenceControllerState: { securityAlertsEnabled: boolean } & Record<\n      string,\n      Json\n    >,\n  ): void {\n    const blockaidEnabled = preferenceControllerState.securityAlertsEnabled;\n    if (blockaidEnabled === this.#securityAlertsEnabled) {\n      return;\n    }\n    this.#securityAlertsEnabled = blockaidEnabled;\n    if (!blockaidEnabled) {\n      this.#resetToInactiveState();\n    }\n  }\n\n  /*\n   * Constructor helper for registering this controller's messaging system actions.\n   */\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:usePPOM` as const,\n      this.usePPOM.bind(this),\n    );\n  }\n\n  /*\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  #subscribeMessageEvents(): void {\n    const onNetworkChange = this.#onNetworkChange.bind(this);\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      onNetworkChange,\n    );\n  }\n\n  /*\n   * The function resets PPOM.\n   */\n  async #resetPPOM(): Promise<void> {\n    await this.#ppomMutex.use(async () => {\n      if (this.#ppom) {\n        this.#ppom.free();\n        this.#ppom = undefined;\n      }\n    });\n  }\n\n  /*\n   * The function will initialise PPOM for the network if required.\n   */\n  async #initPPOMIfRequired(): Promise<void> {\n    const versionInfoUpdated = await this.#updateVersionInfo();\n    if (this.#ppom === undefined || versionInfoUpdated) {\n      this.#ppom = await this.#getPPOM();\n      this.#storage.syncMetadata(this.state.versionInfo).catch((exp: Error) => {\n        console.error(`Error while trying to sync metadata: ${exp.message}`);\n      });\n    }\n  }\n\n  /*\n   * Fetch the version info from the CDN and update the version info in state.\n   * Function returns true if update is available for versionInfo.\n   */\n  async #updateVersionInfo(): Promise<boolean> {\n    const versionInfo = await this.#fetchVersionInfo();\n    if (versionInfo) {\n      this.update((draftState) => {\n        draftState.versionInfo = versionInfo;\n      });\n      return true;\n    }\n    return false;\n  }\n\n  /*\n   * The function checks if file is already present in the storage.\n   */\n  #checkFilePresentInStorage(\n    storageMetadata: FileMetadataList,\n    fileVersionInfo: PPOMFileVersion,\n  ): FileMetadata | undefined {\n    return storageMetadata.find(\n      (file) =>\n        file.name === fileVersionInfo.name &&\n        file.chainId === fileVersionInfo.chainId &&\n        file.version === fileVersionInfo.version &&\n        file.checksum === fileVersionInfo.checksum,\n    );\n  }\n\n  /*\n   *\n   * Get all files listed in versionInfo passed.\n   */\n  async #getAllFiles(versionInfo: PPOMVersionResponse) {\n    const files = await Promise.all(\n      versionInfo.map(async (file) => {\n        let data: ArrayBuffer | undefined;\n        try {\n          data = await this.#getFile(file);\n        } catch (exp: unknown) {\n          console.error(\n            `Error in getting file ${file.filePath}: ${(exp as Error).message}`,\n          );\n        }\n        if (data) {\n          return [file.name, new Uint8Array(data)];\n        }\n        return undefined;\n      }),\n    );\n    return files?.filter(\n      (data: (string | Uint8Array)[] | undefined) => data?.[1] !== undefined,\n    );\n  }\n\n  /*\n   * Gets a single file from CDN and write to the storage.\n   */\n  async #getFile(\n    fileVersionInfo: PPOMFileVersion,\n  ): Promise<ArrayBuffer | undefined> {\n    const { storageMetadata } = this.state;\n    // do not fetch file if the storage version is latest\n    if (this.#checkFilePresentInStorage(storageMetadata, fileVersionInfo)) {\n      try {\n        return await this.#storage.readFile(\n          fileVersionInfo.name,\n          fileVersionInfo.chainId,\n        );\n      } catch (error: unknown) {\n        console.error(`Error in reading file: ${(error as Error).message}`);\n      }\n    }\n    // validate file path for valid characters\n    checkFilePath(fileVersionInfo.filePath);\n    const fileUrl = constructURLHref(\n      this.#cdnBaseUrl,\n      fileVersionInfo.filePath,\n    );\n    const fileData = await this.#fetchBlob(fileUrl);\n\n    await validateSignature(\n      fileData,\n      fileVersionInfo.hashSignature,\n      this.#blockaidPublicKey,\n      fileVersionInfo.filePath,\n      this.#nativeCrypto,\n    );\n\n    await this.#storage\n      .writeFile({\n        data: fileData,\n        ...fileVersionInfo,\n      })\n      .catch((error: Error) => {\n        console.error(`Error in writing file: ${error.message}`);\n      });\n\n    return fileData;\n  }\n\n  /*\n   * Generic method to fetch file from CDN.\n   */\n  async #getAPIResponse(\n    url: string,\n    options: Record<string, unknown> = {},\n    method = 'GET',\n  ): Promise<any> {\n    const response = await safelyExecute(\n      async () =>\n        timeoutFetch(\n          url,\n          {\n            method,\n            cache: 'no-cache',\n            redirect: 'error',\n            ...options,\n          },\n          10000,\n        ),\n      true,\n    );\n    if (response?.status !== 200) {\n      throw new Error(`Failed to fetch file with url: ${url}`);\n    }\n    return response;\n  }\n\n  /*\n   * Function sends a HEAD request to version info file and compares the ETag to the one saved in controller state.\n   * If ETag is not changed we can be sure that there is not change in files and we do not need to fetch data again.\n   */\n  async #checkIfVersionInfoETagChanged(url: string): Promise<boolean> {\n    const headResponse = await this.#getAPIResponse(\n      url,\n      {\n        headers: versionInfoFileHeaders,\n      },\n      'HEAD',\n    );\n\n    const { versionFileETag } = this.state;\n    if (headResponse.headers.get('ETag') === versionFileETag) {\n      return false;\n    }\n\n    this.update((draftState) => {\n      draftState.versionFileETag = headResponse.headers.get('ETag');\n    });\n\n    return true;\n  }\n\n  /*\n   * Fetch the version info from the PPOM cdn.\n   */\n  async #fetchVersionInfo(): Promise<PPOMVersionResponse | undefined> {\n    const url = constructURLHref(this.#cdnBaseUrl, PPOM_VERSION_FILE_NAME);\n\n    // If ETag is same it is not required to fetch data files again\n    const eTagChanged = await this.#checkIfVersionInfoETagChanged(url);\n    if (!eTagChanged && this.state.versionInfo?.length) {\n      return undefined;\n    }\n\n    const response = await this.#getAPIResponse(url, {\n      headers: versionInfoFileHeaders,\n    });\n    return response.json();\n  }\n\n  /*\n   * Fetch the blob file from the PPOM cdn.\n   */\n  async #fetchBlob(url: string): Promise<ArrayBuffer> {\n    const response = await this.#getAPIResponse(url);\n    return await response.arrayBuffer();\n  }\n\n  /*\n   * Send a JSON RPC request to the provider.\n   * This method is used by the PPOM to make requests to the provider.\n   */\n  async #jsonRpcRequest(\n    method: string,\n    params: JsonRpcParams,\n  ): Promise<\n    | JsonRpcSuccess<Json>\n    | (Omit<JsonRpcFailure, 'error'> & { error: unknown })\n    | ReturnType<(typeof PROVIDER_ERRORS)[keyof typeof PROVIDER_ERRORS]>\n  > {\n    return new Promise((resolve) => {\n      // Resolve with error if number of requests from PPOM to provider exceeds the limit for the current transaction\n      if (this.#providerRequests > this.#providerRequestLimit) {\n        resolve(PROVIDER_ERRORS.limitExceeded());\n        return;\n      }\n      this.#providerRequests += 1;\n      // Resolve with error if the provider method called by PPOM is not allowed for PPOM\n      if (!ALLOWED_PROVIDER_CALLS.includes(method)) {\n        resolve(PROVIDER_ERRORS.methodNotSupported());\n        return;\n      }\n\n      this.#providerRequestsCount[method] = this.#providerRequestsCount[method]\n        ? Number(this.#providerRequestsCount[method]) + 1\n        : 1;\n\n      // Invoke provider and return result\n      this.#provider.sendAsync(\n        createPayload(method, params),\n        (error, res: JsonRpcSuccess<Json>) => {\n          if (error) {\n            resolve({\n              jsonrpc: '2.0',\n              id: IdGenerator(),\n              error,\n            });\n          } else {\n            resolve(res);\n          }\n        },\n      );\n    });\n  }\n\n  /*\n   * This function can be called to initialise PPOM or re-initilise it,\n   * when new files are required to be passed to it.\n   *\n   * It will load the data files from storage and pass data files and wasm file to ppom.\n   */\n  async #getPPOM(): Promise<PPOM> {\n    // PPOM initialisation in contructor fails for react native\n    // thus it is added here to prevent validation from failing.\n    await this.#initialisePPOM();\n    const versionInfo = this.state.versionInfo.filter(\n      ({ chainId: id }) => id === this.#chainId,\n    );\n\n    // The following code throw error if no data files are found for the chainId.\n    // This check has been put in place after suggestion of security team.\n    // If we want to disable ppom validation on all instances of Metamask,\n    // this can be achieved by returning empty data from version file.\n    if (versionInfo?.length === undefined || versionInfo?.length === 0) {\n      throw new Error(\n        `Aborting initialising PPOM as no files are found for the network with chainId: ${\n          this.#chainId\n        }`,\n      );\n    }\n\n    // Get all the files for  the chainId\n    const files = await this.#getAllFiles(versionInfo);\n\n    if (files?.length !== versionInfo?.length) {\n      throw new Error(\n        `Aborting initialising PPOM as not all files could not be downloaded for the network with chainId: ${\n          this.#chainId\n        }`,\n      );\n    }\n\n    if (this.#ppom) {\n      this.#ppom.free();\n    }\n    const { PPOM } = this.#ppomProvider;\n    return PPOM.new(this.#jsonRpcRequest.bind(this), files);\n  }\n}\n"]}