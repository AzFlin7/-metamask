{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import type { JsonRpcParams } from '@metamask/utils';\nimport CryptoJS, { SHA256 } from 'crypto-js';\nimport elliptic from 'elliptic';\nimport IdIterator from 'json-rpc-random-id';\n\nimport type { NativeCrypto } from './ppom-controller';\n\nconst EdDSA = elliptic.eddsa;\nconst URL_PREFIX = 'https://';\n\nexport const SUPPORTED_NETWORK_CHAINIDS = {\n  MAINNET: '0x1',\n  BSC: '0x38',\n  OPTIMISM: '0xa',\n  POLYGON: '0x89',\n  AVALANCHE: '0xa86a',\n  ARBITRUM: '0xa4b1',\n  LINEA_MAINNET: '0xe708',\n  BASE: '0x2105',\n  SEPOLIA: '0xaa36a7',\n};\n\nexport const blockaidValidationSupportedForNetwork = (\n  chainId: string,\n): boolean => {\n  return Object.values(SUPPORTED_NETWORK_CHAINIDS).some(\n    (cid) => cid === chainId,\n  );\n};\n\nexport const IdGenerator = IdIterator();\n\nexport const createPayload = (method: string, params: JsonRpcParams) =>\n  ({\n    id: IdGenerator(),\n    jsonrpc: '2.0',\n    method,\n    params: params ?? [],\n  } as const);\n\nexport const PROVIDER_ERRORS = {\n  limitExceeded: () =>\n    ({\n      jsonrpc: '2.0',\n      id: IdGenerator(),\n      error: {\n        code: -32005,\n        message: 'Limit exceeded',\n      },\n    } as const),\n  methodNotSupported: () =>\n    ({\n      jsonrpc: '2.0',\n      id: IdGenerator(),\n      error: {\n        code: -32601,\n        message: 'Method not supported',\n      },\n    } as const),\n};\n\nconst getHash = async (\n  data: ArrayBuffer,\n  nativeCrypto?: NativeCrypto,\n  useNative = true,\n): Promise<string> => {\n  if (nativeCrypto) {\n    return nativeCrypto.createHash('sha256').update(data).digest('hex');\n  }\n\n  if (\n    'crypto' in globalThis &&\n    typeof globalThis.crypto === 'object' &&\n    globalThis.crypto.subtle?.digest &&\n    useNative\n  ) {\n    const hashBuffer = await globalThis.crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hash = hashArray\n      .map((item) => item.toString(16).padStart(2, '0'))\n      .join('');\n    return hash;\n  }\n\n  return SHA256(CryptoJS.lib.WordArray.create(data as any)).toString();\n};\n\n// useNative argument is added for testing purpose, without it test cases are breaking in Node-20 and above\n// Reason being that in node 20 crypto is always present in globalThis\n// and it is not possible to reset it due to security reasons\nexport const validateSignature = async (\n  data: ArrayBuffer,\n  hashSignature: string,\n  key: string,\n  filePath: string,\n  nativeCrypto?: NativeCrypto,\n  useNative?: boolean,\n) => {\n  const hashString = await getHash(data, nativeCrypto, useNative);\n  // const hashString = hash.toString();\n  const ec = new EdDSA('ed25519');\n  const ecKey = ec.keyFromPublic(key);\n  // eslint-disable-next-line no-restricted-globals\n  const result = ecKey.verify(Buffer.from(hashString), hashSignature);\n  if (!result) {\n    throw Error(`Signature verification failed for file path: ${filePath}`);\n  }\n};\n\nexport const constructURLHref = (base: string, path: string): string =>\n  new URL(\n    `${URL_PREFIX}${base}/${path}`\n      .replace(/https:\\/\\/https:\\/\\//gu, 'https://')\n      .replace(/\\/\\//gu, '/'),\n  ).href;\n\nexport const addHexPrefix = (str: string) => {\n  if (typeof str !== 'string' || str.match(/^-?0x/u)) {\n    return str;\n  }\n\n  if (str.match(/^-?0X/u)) {\n    return str.replace('0X', '0x');\n  }\n\n  return `0x${parseInt(str, 10).toString(16)}`;\n};\n\n/*\n * The function check to ensure that file path can contain only alphanumeric\n * characters and a dot character (.) or slash (/).\n */\nexport const checkFilePath = (filePath: string): void => {\n  const filePathRegex = /^[\\w./]+$/u;\n  if (!filePath.match(filePathRegex)) {\n    throw new Error(`Invalid file path for data file: ${filePath}`);\n  }\n};\n"]}