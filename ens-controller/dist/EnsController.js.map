{"version":3,"file":"EnsController.js","sourceRoot":"","sources":["../src/EnsController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ExternalProvider,\n  JsonRpcFetchFunc,\n} from '@ethersproject/providers';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport type { ChainId } from '@metamask/controller-utils';\nimport {\n  normalizeEnsName,\n  isValidHexAddress,\n  toChecksumHexAddress,\n  CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport type { NetworkState } from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { createProjectLogger } from '@metamask/utils';\nimport ensNetworkMap from 'ethereum-ens-network-map';\nimport { toASCII } from 'punycode/';\n\nconst log = createProjectLogger('ens-controller');\n\nconst name = 'EnsController';\n\n/**\n * @type EnsEntry\n *\n * ENS entry representation\n * @property chainId - Id of the associated chain\n * @property ensName - The ENS name\n * @property address - Hex address with the ENS name, or null\n */\nexport type EnsEntry = {\n  chainId: Hex;\n  ensName: string;\n  address: string | null;\n};\n\n/**\n * @type EnsControllerState\n *\n * ENS controller state\n * @property ensEntries - Object of ENS entry objects\n */\nexport type EnsControllerState = {\n  ensEntries: {\n    [chainId: Hex]: {\n      [ensName: string]: EnsEntry;\n    };\n  };\n  ensResolutionsByAddress: { [key: string]: string };\n};\n\nexport type EnsControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  never,\n  never,\n  never,\n  never\n>;\n\nconst metadata = {\n  ensEntries: { persist: true, anonymous: false },\n  ensResolutionsByAddress: { persist: true, anonymous: false },\n};\n\nconst defaultState = {\n  ensEntries: {},\n  ensResolutionsByAddress: {},\n};\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\nconst ZERO_X_ERROR_ADDRESS = '0x';\n\n/**\n * Controller that manages a list ENS names and their resolved addresses\n * by chainId. A null address indicates an unresolved ENS name.\n */\nexport class EnsController extends BaseController<\n  typeof name,\n  EnsControllerState,\n  EnsControllerMessenger\n> {\n  #ethProvider: Web3Provider | null = null;\n\n  /**\n   * Creates an EnsController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.provider - Provider instance.\n   * @param options.onNetworkDidChange - Allows subscribing to network controller networkDidChange events.\n   */\n  constructor({\n    messenger,\n    state = {},\n    provider,\n    onNetworkDidChange,\n  }: {\n    messenger: EnsControllerMessenger;\n    state?: Partial<EnsControllerState>;\n    provider?: ExternalProvider | JsonRpcFetchFunc;\n    onNetworkDidChange?: (\n      listener: (networkState: Pick<NetworkState, 'providerConfig'>) => void,\n    ) => void;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: {\n        ...defaultState,\n        ...state,\n      },\n    });\n\n    if (provider && onNetworkDidChange) {\n      onNetworkDidChange((networkState) => {\n        this.resetState();\n        const currentChainId = networkState.providerConfig.chainId;\n        if (this.#getChainEnsSupport(currentChainId)) {\n          this.#ethProvider = new Web3Provider(provider, {\n            chainId: convertHexToDecimal(currentChainId),\n            name: CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP[\n              currentChainId as ChainId\n            ],\n            ensAddress: ensNetworkMap[parseInt(currentChainId, 16)],\n          });\n        } else {\n          this.#ethProvider = null;\n        }\n      });\n    }\n  }\n\n  /**\n   * Clears ensResolutionsByAddress state property.\n   */\n  resetState() {\n    this.update((currentState) => {\n      currentState.ensResolutionsByAddress = {};\n    });\n  }\n\n  /**\n   * Remove all chain Ids and ENS entries from state.\n   */\n  clear() {\n    this.update((state) => {\n      state.ensEntries = {};\n    });\n  }\n\n  /**\n   * Delete an ENS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to delete.\n   * @param ensName - Name of the ENS entry to delete.\n   * @returns Boolean indicating if the entry was deleted.\n   */\n  delete(chainId: Hex, ensName: string): boolean {\n    const normalizedEnsName = normalizeEnsName(ensName);\n    if (\n      !normalizedEnsName ||\n      !this.state.ensEntries[chainId] ||\n      !this.state.ensEntries[chainId][normalizedEnsName]\n    ) {\n      return false;\n    }\n\n    this.update((state) => {\n      delete state.ensEntries[chainId][normalizedEnsName];\n\n      if (Object.keys(state.ensEntries[chainId]).length === 0) {\n        delete state.ensEntries[chainId];\n      }\n    });\n    return true;\n  }\n\n  /**\n   * Retrieve a DNS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to retrieve.\n   * @param ensName - Name of the ENS entry to retrieve.\n   * @returns The EnsEntry or null if it does not exist.\n   */\n  get(chainId: Hex, ensName: string): EnsEntry | null {\n    const normalizedEnsName = normalizeEnsName(ensName);\n\n    // TODO Explicitly handle the case where `normalizedEnsName` is `null`\n    // eslint-disable-next-line no-implicit-coercion\n    return !!normalizedEnsName && this.state.ensEntries[chainId]\n      ? this.state.ensEntries[chainId][normalizedEnsName] || null\n      : null;\n  }\n\n  /**\n   * Add or update an ENS entry by chainId and ensName.\n   *\n   * A null address indicates that the ENS name does not resolve.\n   *\n   * @param chainId - Id of the associated chain.\n   * @param ensName - The ENS name.\n   * @param address - Associated address (or null) to add or update.\n   * @returns Boolean indicating if the entry was set.\n   */\n  set(chainId: Hex, ensName: string, address: string | null): boolean {\n    if (\n      !Number.isInteger(Number.parseInt(chainId, 10)) ||\n      !ensName ||\n      typeof ensName !== 'string' ||\n      (address && !isValidHexAddress(address))\n    ) {\n      throw new Error(\n        `Invalid ENS entry: { chainId:${chainId}, ensName:${ensName}, address:${address}}`,\n      );\n    }\n\n    const normalizedEnsName = normalizeEnsName(ensName);\n    if (!normalizedEnsName) {\n      throw new Error(`Invalid ENS name: ${ensName}`);\n    }\n\n    const normalizedAddress = address ? toChecksumHexAddress(address) : null;\n    const subState = this.state.ensEntries[chainId];\n\n    if (\n      subState?.[normalizedEnsName] &&\n      subState[normalizedEnsName].address === normalizedAddress\n    ) {\n      return false;\n    }\n\n    this.update((state) => {\n      state.ensEntries = {\n        ...this.state.ensEntries,\n        [chainId]: {\n          ...this.state.ensEntries[chainId],\n          [normalizedEnsName]: {\n            address: normalizedAddress,\n            chainId,\n            ensName: normalizedEnsName,\n          },\n        },\n      };\n    });\n    return true;\n  }\n\n  /**\n   * Check if the chain supports ENS.\n   *\n   * @param chainId - chain id.\n   * @returns Boolean indicating if the chain supports ENS.\n   */\n  #getChainEnsSupport(chainId: string) {\n    return Boolean(ensNetworkMap[parseInt(chainId, 16)]);\n  }\n\n  /**\n   * Resolve ens by address.\n   *\n   * @param nonChecksummedAddress - address\n   * @returns ens resolution\n   */\n  async reverseResolveAddress(nonChecksummedAddress: string) {\n    if (!this.#ethProvider) {\n      return undefined;\n    }\n\n    const address = toChecksumHexAddress(nonChecksummedAddress);\n    if (this.state.ensResolutionsByAddress[address]) {\n      return this.state.ensResolutionsByAddress[address];\n    }\n\n    let domain: string | null;\n    try {\n      domain = await this.#ethProvider.lookupAddress(address);\n    } catch (error) {\n      log(error);\n      return undefined;\n    }\n\n    if (!domain) {\n      return undefined;\n    }\n\n    let registeredAddress: string | null;\n    try {\n      registeredAddress = await this.#ethProvider.resolveName(domain);\n    } catch (error) {\n      log(error);\n      return undefined;\n    }\n\n    if (!registeredAddress) {\n      return undefined;\n    }\n\n    if (\n      registeredAddress === ZERO_ADDRESS ||\n      registeredAddress === ZERO_X_ERROR_ADDRESS\n    ) {\n      return undefined;\n    }\n    if (toChecksumHexAddress(registeredAddress) !== address) {\n      return undefined;\n    }\n\n    this.update((state) => {\n      state.ensResolutionsByAddress[address] = toASCII(domain as string);\n    });\n\n    return domain;\n  }\n}\n\nexport default EnsController;\n"]}